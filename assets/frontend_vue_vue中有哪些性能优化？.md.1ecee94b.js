import{_ as s,o as a,c as n,S as o}from"./chunks/framework.59c3ae61.js";const F=JSON.parse('{"title":"Vue 中有哪些性能优化？","description":"","frontmatter":{"isTimeLine":true,"title":"Vue 中有哪些性能优化？","date":"2023-12-7","tags":["Vue","开发经验"],"categories":["Vue"]},"headers":[],"relativePath":"frontend/vue/vue中有哪些性能优化？.md","filePath":"frontend/vue/vue中有哪些性能优化？.md","lastUpdated":1701958889000}'),e={name:"frontend/vue/vue中有哪些性能优化？.md"},l=o(`<h1 id="vue-中有哪些性能优化" tabindex="-1">Vue 中有哪些性能优化？ <a class="header-anchor" href="#vue-中有哪些性能优化" aria-label="Permalink to &quot;Vue 中有哪些性能优化？&quot;">​</a></h1><h2 id="路由懒加载" tabindex="-1">路由懒加载 <a class="header-anchor" href="#路由懒加载" aria-label="Permalink to &quot;路由懒加载&quot;">​</a></h2><p>路由懒加载是通过动态导入（Dynamic Import）实现的，它可以帮助优化应用程序的性能。</p><p>路由懒加载的原理是延迟加载（懒加载）路由组件，只在需要时才进行加载，以减少初始加载时间和资源负担。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> router </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createRouter</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">routes</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// 借助webpack的import()实现异步组件</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">path</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/foo</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">component</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./Foo.vue</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  ]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><p><strong>路由懒加载的工作原理：</strong></p><ol><li>动态导入：在路由配置中，使用import()函数来异步加载路由组件。这样可以将路由组件的加载推迟到需要时才进行，而不是在初始加载时一次性加载所有组件。</li><li>以路由组件为单位的懒加载：每个路由都被拆分为独立的组件，只有用户导航到某个路由时，对应的组件才会被下载和执行。</li><li>代码分包：在打包构建的过程中，Vue 会将每个异步加载的路由组件划分为单独的代码块，每个页面只加载当前页面所需的代码块，以减少初始加载时间和资源负担。</li><li>组件缓存：在路由懒加载的过程中，组件实例会被缓存，以便在路由切换时重用，避免重复加载组件。</li></ol>`,7),p=[l];function t(r,c,i,D,y,A){return a(),n("div",null,p)}const _=s(e,[["render",t]]);export{F as __pageData,_ as default};
