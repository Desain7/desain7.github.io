<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Desain</title>
        <link>https://desain7.top</link>
        <description>要从那时起，不再动摇（前端相关技术分享）</description>
        <lastBuildDate>Sat, 09 Sep 2023 14:15:12 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>zh-cn</language>
        <image>
            <title>Desain</title>
            <url>http://oss.desain7.top/pic94500053.jpg</url>
            <link>https://desain7.top</link>
        </image>
        <copyright>Copyright (c) 2022-present, Desain</copyright>
        <item>
            <title><![CDATA[2023-9-9 算法日记]]></title>
            <link>https://desain7.top/coding/algorithm/2023-9-9.html</link>
            <guid>https://desain7.top/coding/algorithm/2023-9-9.html</guid>
            <pubDate>Fri, 08 Sep 2023 16:00:00 GMT</pubDate>
            <description><![CDATA[ 1. 二叉搜索树中的搜索
题目地址
题意：给定一棵二叉搜索树和一个数，在二叉搜索树中找到并返回以该节点为根的子树。
思路：利用二叉搜索树的特性，递归遍历，找到节点。
代码实现：
```js
 * @]]></description>
            <content:encoded><![CDATA[<h1 id="_2023-9-9-算法日记" tabindex="-1">2023-9-9 算法日记 <a class="header-anchor" href="#_2023-9-9-算法日记" aria-label="Permalink to &quot;2023-9-9 算法日记&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="_1-二叉搜索树中的搜索" tabindex="-1">1. 二叉搜索树中的搜索 <a class="header-anchor" href="#_1-二叉搜索树中的搜索" aria-label="Permalink to &quot;1. 二叉搜索树中的搜索&quot;">&ZeroWidthSpace;</a></h2>
<p><a href="https://leetcode.cn/problems/search-in-a-binary-search-tree/" target="_blank" rel="noreferrer">题目地址</a></p>
<p><strong>题意</strong>：给定一棵二叉搜索树和一个数，在二叉搜索树中找到并返回以该节点为根的子树。</p>
<p><strong>思路</strong>：利用二叉搜索树的特性，递归遍历，找到节点。</p>
<p><strong>代码实现</strong>：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #89DDFF">*</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">@</span><span style="color: #A6ACCD">param </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD">TreeNode</span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD"> root</span></span>
<span class="line"><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">*</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">@</span><span style="color: #A6ACCD">param </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD">number</span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD"> val</span></span>
<span class="line"><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">*</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">@</span><span style="color: #A6ACCD">return </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD">TreeNode</span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">*/</span></span>
<span class="line"><span style="color: #C792EA">var</span><span style="color: #A6ACCD"> searchBST </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">root</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">val</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">root</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">null</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 当前节点等于目标值，返回节点</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">val</span><span style="color: #F07178"> </span><span style="color: #89DDFF">==</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">val</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">root</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 大于目标值，向左搜索子树</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">val</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&gt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">val</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #82AAFF">searchBST</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">left</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">val</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 小于目标值，向右搜索子树</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">val</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">val</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #82AAFF">searchBST</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">right</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">val</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">};</span></span></code></pre>
</div><h2 id="_2-验证二叉搜索树" tabindex="-1">2. 验证二叉搜索树 <a class="header-anchor" href="#_2-验证二叉搜索树" aria-label="Permalink to &quot;2. 验证二叉搜索树&quot;">&ZeroWidthSpace;</a></h2>
<p><a href="https://leetcode.cn/problems/validate-binary-search-tree/" target="_blank" rel="noreferrer">题目地址</a></p>
<p><strong>题意</strong>：给出一棵二叉树，判断是否是二叉搜索树。</p>
<p><strong>思路</strong>：根据二叉搜索树的特性，中序遍历二叉搜索树，得到的数组必然为递增序列。判断中序遍历后的数组是否递增即可得到结果。</p>
<p><strong>代码实现</strong>：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">/**</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">TreeNode</span><span style="color: #89DDFF; font-style: italic">}</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">root</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">return</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">boolean</span><span style="color: #89DDFF; font-style: italic">}</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> */</span></span>
<span class="line"><span style="color: #C792EA">var</span><span style="color: #A6ACCD"> isValidBST </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">root</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">root</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">false</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> []</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 中序遍历二叉树，得到数组</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">dfs</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">root</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">root</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">return</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">dfs</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">left</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">arr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">val</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">dfs</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">right</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #82AAFF">dfs</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 验证数组是否递增</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178">(</span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">++</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #F07178">] </span><span style="color: #89DDFF">&gt;=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">]) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">false</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">true</span></span>
<span class="line"><span style="color: #89DDFF">};</span></span></code></pre>
</div><h2 id="_3-二叉搜索树的最小绝对差" tabindex="-1">3. 二叉搜索树的最小绝对差 <a class="header-anchor" href="#_3-二叉搜索树的最小绝对差" aria-label="Permalink to &quot;3. 二叉搜索树的最小绝对差&quot;">&ZeroWidthSpace;</a></h2>
<p><a href="https://leetcode.cn/problems/minimum-absolute-difference-in-bst/" target="_blank" rel="noreferrer">题目地址</a></p>
<p><strong>题意</strong>：给出一棵二叉搜索树，求出树中任意两个节点的绝对值之差的最小值。</p>
<p><strong>思路</strong>：思路和上题类似，可以中序遍历得出递增序列后，遍历数组得到；但本题也可以简化，在遍历的过程中直接计算最小值。</p>
<p><strong>代码实现</strong>：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">/**</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">TreeNode</span><span style="color: #89DDFF; font-style: italic">}</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">root</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">return</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">number</span><span style="color: #89DDFF; font-style: italic">}</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> */</span></span>
<span class="line"><span style="color: #C792EA">var</span><span style="color: #A6ACCD"> getMinimumDifference </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">root</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">min</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">Infinity</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 初始化 pre 为 root</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">pre</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">root</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">dfs</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">root</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">tem</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">root</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">return</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">dfs</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">left</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 当 pre 不等于 root，即 pre 为 root 的上一个节点时，才进行计算</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">pre</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">root</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">tem</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">Math</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">abs</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">val</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">pre</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">val</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">min</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">Math</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">min</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">tem</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">min</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">pre</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">root</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">dfs</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">right</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #82AAFF">dfs</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">min</span></span>
<span class="line"><span style="color: #89DDFF">};</span></span></code></pre>
</div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[React + Codemirror 实现在线代码编辑器]]></title>
            <link>https://desain7.top/frontend/react/codemirror+react实现在线代码编辑器.html</link>
            <guid>https://desain7.top/frontend/react/codemirror+react实现在线代码编辑器.html</guid>
            <pubDate>Fri, 08 Sep 2023 16:00:00 GMT</pubDate>
            <description><![CDATA[ 背景
最近开发的项目中需要实现一个在线代码编辑器的需求，所以需要用到 code-mirror]]></description>
            <content:encoded><![CDATA[<h1 id="codemirror-react-实现在线代码编辑器" tabindex="-1">codemirror + react 实现在线代码编辑器 <a class="header-anchor" href="#codemirror-react-实现在线代码编辑器" aria-label="Permalink to &quot;codemirror + react 实现在线代码编辑器&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="背景" tabindex="-1">背景 <a class="header-anchor" href="#背景" aria-label="Permalink to &quot;背景&quot;">&ZeroWidthSpace;</a></h2>
<p>最近开发的项目中需要实现一个在线代码编辑器的需求，所以需要用到 code-mirror</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[2023-9-6 算法日记]]></title>
            <link>https://desain7.top/coding/algorithm/2023-9-6.html</link>
            <guid>https://desain7.top/coding/algorithm/2023-9-6.html</guid>
            <pubDate>Tue, 05 Sep 2023 16:00:00 GMT</pubDate>
            <description><![CDATA[ 1. 从中序与后序遍历序列构造二叉树
题目地址
题意：根据给出的中序遍历及后续遍历数组，构造出一颗二叉树
思路：
1. 利用递归实现
2. 根据后序遍历的最后一个数（当前根节点），来切割中序遍历数组]]></description>
            <content:encoded><![CDATA[<h1 id="_2023-9-6-算法日记" tabindex="-1">2023-9-6 算法日记 <a class="header-anchor" href="#_2023-9-6-算法日记" aria-label="Permalink to &quot;2023-9-6 算法日记&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="_1-从中序与后序遍历序列构造二叉树" tabindex="-1">1. 从中序与后序遍历序列构造二叉树 <a class="header-anchor" href="#_1-从中序与后序遍历序列构造二叉树" aria-label="Permalink to &quot;1. 从中序与后序遍历序列构造二叉树&quot;">&ZeroWidthSpace;</a></h2>
<p><a href="https://leetcode.cn/problems/construct-binary-tree-from-inorder-and-postorder-traversal/" target="_blank" rel="noreferrer">题目地址</a></p>
<p><strong>题意</strong>：根据给出的中序遍历及后续遍历数组，构造出一颗二叉树</p>
<p><strong>思路</strong>：</p>
<ol>
<li>利用递归实现</li>
<li>根据后序遍历的最后一个数（当前根节点），来切割中序遍历数组</li>
<li>根据切割后的左右中序遍历数组长度来划分左右<code>后序遍历数组</code></li>
<li>分别根据新生成的左右<code>中后序遍历数组</code>去构造当前节点的左右子树</li>
</ol>
<p><strong>代码实现</strong>：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">/**</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">number[]</span><span style="color: #89DDFF; font-style: italic">}</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">inorder</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">number[]</span><span style="color: #89DDFF; font-style: italic">}</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">postorder</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">return</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">TreeNode</span><span style="color: #89DDFF; font-style: italic">}</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> */</span></span>
<span class="line"><span style="color: #C792EA">var</span><span style="color: #A6ACCD"> buildTree </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">inorder</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">postorder</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">inorder</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #F07178"> </span><span style="color: #89DDFF">||</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">postorder</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">null</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">res</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">dfs</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">inorder</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">postorder</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">res</span></span>
<span class="line"><span style="color: #89DDFF">};</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">let</span><span style="color: #A6ACCD"> dfs </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">inorder</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">postorder</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">postorder</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">null</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 后序遍历数组最后一个元素，就是当前的中间节点</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">midVal</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">postorder</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">pop</span><span style="color: #F07178">()</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">root</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">TreeNode</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">midVal</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 叶子节点</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">postorder</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">root</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 找到中序遍历的切割点</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">div</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178">(</span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">inorder</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">++</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">inorder</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">] </span><span style="color: #89DDFF">==</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">midVal</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">div</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 切割中序数组</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">leftIn</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">inorder</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">slice</span><span style="color: #F07178">(</span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">div</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">rightIn</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">inorder</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">slice</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">div</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">inorder</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #F07178">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 切割后序数组</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">leftPost</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">postorder</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">slice</span><span style="color: #F07178">(</span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">leftIn</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">rightPost</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">postorder</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">slice</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">leftIn</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">postorder</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 连接左右子树</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">left</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">dfs</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">leftIn</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">leftPost</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">right</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">dfs</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">rightIn</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">rightPost</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">root</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="_2-最大二叉树" tabindex="-1">2. 最大二叉树 <a class="header-anchor" href="#_2-最大二叉树" aria-label="Permalink to &quot;2. 最大二叉树&quot;">&ZeroWidthSpace;</a></h2>
<p><a href="https://leetcode.cn/problems/maximum-binary-tree/" target="_blank" rel="noreferrer">题目地址</a></p>
<p><strong>题意</strong>：
提供一个整数数组，构造一棵最大二叉树：</p>
<ol>
<li>创建一个根节点，其值为 nums 中的最大值。</li>
<li>递归地在最大值 左边 的 子数组前缀上 构建左子树。</li>
<li>递归地在最大值 右边 的 子数组后缀上 构建右子树。</li>
</ol>
<p><strong>思路</strong>：找出数组中的最大值，根据下标划分左右子树，递归构建</p>
<p><strong>实现代码</strong>：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">/**</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">number[]</span><span style="color: #89DDFF; font-style: italic">}</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">nums</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">return</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">TreeNode</span><span style="color: #89DDFF; font-style: italic">}</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> */</span></span>
<span class="line"><span style="color: #C792EA">var</span><span style="color: #A6ACCD"> constructMaximumBinaryTree </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">nums</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">nums</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">null</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #82AAFF">dfs</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">nums</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">};</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">let</span><span style="color: #A6ACCD"> dfs </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">nodes</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">nodes</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">null</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">maxNum</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">Math</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">max</span><span style="color: #F07178">(</span><span style="color: #89DDFF">...</span><span style="color: #A6ACCD">nodes</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">maxIdx</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">nodes</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">indexOf</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">maxNum</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">root</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">TreeNode</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">maxNum</span><span style="color: #F07178">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">left</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">dfs</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">nodes</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">slice</span><span style="color: #F07178">(</span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">maxIdx</span><span style="color: #F07178">))</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">right</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">dfs</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">nodes</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">slice</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">maxIdx</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #F07178">))</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">root</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="_3-合并二叉树" tabindex="-1">3. 合并二叉树 <a class="header-anchor" href="#_3-合并二叉树" aria-label="Permalink to &quot;3. 合并二叉树&quot;">&ZeroWidthSpace;</a></h2>
<p><a href="https://leetcode.cn/problems/merge-two-binary-trees/" target="_blank" rel="noreferrer">题目地址</a></p>
<p><strong>题意</strong>：给出两颗二叉树，将两棵二叉树合并成一棵（若重复则相加）</p>
<p><strong>思路</strong>：同时递归遍历两棵二叉树（前中后序都可以）</p>
<p><strong>实现代码</strong>：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">/**</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">TreeNode</span><span style="color: #89DDFF; font-style: italic">}</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">root1</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">TreeNode</span><span style="color: #89DDFF; font-style: italic">}</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">root2</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">return</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">TreeNode</span><span style="color: #89DDFF; font-style: italic">}</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> */</span></span>
<span class="line"><span style="color: #C792EA">var</span><span style="color: #A6ACCD"> mergeTrees </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">root1</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">root2</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">root1</span><span style="color: #F07178">) </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">root2</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">root2</span><span style="color: #F07178">) </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">root1</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">root1</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">val</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">root2</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">val</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">root1</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">left</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">mergeTrees</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root1</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">left</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">root2</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">left</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">root1</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">right</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">mergeTrees</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root1</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">right</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">root2</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">right</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">root1</span></span>
<span class="line"><span style="color: #89DDFF">};</span></span></code></pre>
</div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[常用数据处理函数]]></title>
            <link>https://desain7.top/coding/js/常用数据处理函数.html</link>
            <guid>https://desain7.top/coding/js/常用数据处理函数.html</guid>
            <pubDate>Tue, 05 Sep 2023 16:00:00 GMT</pubDate>
            <description><![CDATA[ 日期格式化函数
将传入的标准化日期对象转换为指定的格式
实现代码：
```js
const dateFormat = (dateInput, format) =
  // 获取日期
  let da]]></description>
            <content:encoded><![CDATA[<h1 id="常用数据处理函数" tabindex="-1">常用数据处理函数 <a class="header-anchor" href="#常用数据处理函数" aria-label="Permalink to &quot;常用数据处理函数&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="日期格式化函数" tabindex="-1">日期格式化函数 <a class="header-anchor" href="#日期格式化函数" aria-label="Permalink to &quot;日期格式化函数&quot;">&ZeroWidthSpace;</a></h2>
<p>将传入的标准化日期对象转换为指定的格式</p>
<p><strong>实现代码</strong>：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> dateFormat </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">dateInput</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">format</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 获取日期</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">day</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">dateInput</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getDate</span><span style="color: #F07178">()</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 获取月份</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">month</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">dateInput</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getMonth</span><span style="color: #F07178">() </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 获取年份</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">year</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">dateInput</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getFullYear</span><span style="color: #F07178">()</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 将传入的格式化日期中对应格式的字符串进行替换</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">format</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">format</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">replace</span><span style="color: #F07178">(</span><span style="color: #89DDFF">/</span><span style="color: #C3E88D">yyyy</span><span style="color: #89DDFF">/</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">year</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">format</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">format</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">replace</span><span style="color: #F07178">(</span><span style="color: #89DDFF">/</span><span style="color: #C3E88D">mm</span><span style="color: #89DDFF">/</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">month</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">format</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">format</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">replace</span><span style="color: #F07178">(</span><span style="color: #89DDFF">/</span><span style="color: #C3E88D">dd</span><span style="color: #89DDFF">/</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">day</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="不使用临时变量-交换-a、b-的值" tabindex="-1">不使用临时变量，交换 a、b 的值 <a class="header-anchor" href="#不使用临时变量-交换-a、b-的值" aria-label="Permalink to &quot;不使用临时变量，交换 a、b 的值&quot;">&ZeroWidthSpace;</a></h2>
<div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #A6ACCD">a = a + b</span></span>
<span class="line"><span style="color: #A6ACCD">b = a - b</span></span>
<span class="line"><span style="color: #A6ACCD">a = a - b</span></span></code></pre>
</div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[2023-9-4 算法日记]]></title>
            <link>https://desain7.top/coding/algorithm/2023-9-4.html</link>
            <guid>https://desain7.top/coding/algorithm/2023-9-4.html</guid>
            <pubDate>Sun, 03 Sep 2023 16:00:00 GMT</pubDate>
            <description><![CDATA[ 1. 左叶子之和
题目地址
题意：求出一颗二叉树所有左叶子的和。
思路：分别递归遍历二叉树的左子树和右子树，在这个过程中，不断判断每个子树根节点的左节点是否为叶节点，并将其添加到结果中；最后将结果相]]></description>
            <content:encoded><![CDATA[<h1 id="_2023-9-4-算法日记" tabindex="-1">2023-9-4 算法日记 <a class="header-anchor" href="#_2023-9-4-算法日记" aria-label="Permalink to &quot;2023-9-4 算法日记&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="_1-左叶子之和" tabindex="-1">1. 左叶子之和 <a class="header-anchor" href="#_1-左叶子之和" aria-label="Permalink to &quot;1. 左叶子之和&quot;">&ZeroWidthSpace;</a></h2>
<p><a href="https://leetcode.cn/problems/sum-of-left-leaves/description/" target="_blank" rel="noreferrer">题目地址</a></p>
<p><strong>题意</strong>：求出一颗二叉树所有左叶子的和。</p>
<p><strong>思路</strong>：分别递归遍历二叉树的左子树和右子树，在这个过程中，不断判断每个子树根节点的左节点是否为叶节点，并将其添加到结果中；最后将结果相加即可得到答案。</p>
<p><strong>代码实现</strong>：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">/**</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">TreeNode</span><span style="color: #89DDFF; font-style: italic">}</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">root</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">return</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">number</span><span style="color: #89DDFF; font-style: italic">}</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> */</span></span>
<span class="line"><span style="color: #C792EA">var</span><span style="color: #A6ACCD"> sumOfLeftLeaves </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">root</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">root</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 计算当前节点左子树的所有左叶子之和</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">leftSum</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">sumOfLeftLeaves</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">left</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 若当前节点左节点为叶子节点，则加入结果</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">left</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">left</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">left</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">left</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">right</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">leftSum</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">left</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">val</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 计算当前节点右子树的所有左叶子之和</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">rightSum</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">sumOfLeftLeaves</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">right</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 返回当前节点左右子树所有左叶子之和</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">leftSum</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">rightSum</span></span>
<span class="line"><span style="color: #89DDFF">};</span></span></code></pre>
</div><h2 id="_2-找树左下角的值" tabindex="-1">2. 找树左下角的值 <a class="header-anchor" href="#_2-找树左下角的值" aria-label="Permalink to &quot;2. 找树左下角的值&quot;">&ZeroWidthSpace;</a></h2>
<p><a href="https://leetcode.cn/problems/find-bottom-left-tree-value/" target="_blank" rel="noreferrer">题目地址</a></p>
<p><strong>题意</strong>：找出一颗二叉树左下角的值（即最后一层最左边的值）。</p>
<p><strong>思路</strong>：层序遍历整棵二叉树，不断更新每一层最左侧的节点。</p>
<p><strong>代码实现</strong>：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">/**</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">TreeNode</span><span style="color: #89DDFF; font-style: italic">}</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">root</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">return</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">number</span><span style="color: #89DDFF; font-style: italic">}</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> */</span></span>
<span class="line"><span style="color: #C792EA">var</span><span style="color: #A6ACCD"> findBottomLeftValue </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">root</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">res</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">que</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> []</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">que</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">while</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">que</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&gt;</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">len</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">que</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178"> (</span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">len</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">++</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">node</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">que</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">shift</span><span style="color: #F07178">()</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #676E95; font-style: italic">// 移除队列的第一个元素，并保存到临时变量node中</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">node</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">left</span><span style="color: #F07178">) </span><span style="color: #A6ACCD">que</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">node</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">left</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">node</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">right</span><span style="color: #F07178">) </span><span style="color: #A6ACCD">que</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">node</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">right</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #A6ACCD">res</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">node</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">val</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #676E95; font-style: italic">// 更新res为第一个元素的值</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">res</span></span>
<span class="line"><span style="color: #89DDFF">};</span></span></code></pre>
</div><h2 id="_3-路经总和" tabindex="-1">3. 路经总和 <a class="header-anchor" href="#_3-路经总和" aria-label="Permalink to &quot;3. 路经总和&quot;">&ZeroWidthSpace;</a></h2>
<p><a href="https://leetcode.cn/problems/path-sum/" target="_blank" rel="noreferrer">题目地址</a></p>
<p><strong>题意</strong>：求出一颗二叉树是否存在根节点至叶节点的一条路径，能使得路径总合为目标值。</p>
<p><strong>思路</strong>：通过先序遍历遍历整棵二叉树，若存在这样的一条路径，则返回 <code>true</code>。</p>
<p><strong>代码实现</strong>：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">/**</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">TreeNode</span><span style="color: #89DDFF; font-style: italic">}</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">root</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">number</span><span style="color: #89DDFF; font-style: italic">}</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">targetSum</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">return</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">boolean</span><span style="color: #89DDFF; font-style: italic">}</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> */</span></span>
<span class="line"><span style="color: #C792EA">var</span><span style="color: #A6ACCD"> hasPathSum </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">root</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">targetSum</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">res</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">false</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">dfs</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">node</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">curSum</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">node</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">return</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">sum</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">node</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">val</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">curSum</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">sum</span><span style="color: #F07178"> </span><span style="color: #89DDFF">==</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">targetSum</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">node</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">left</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">node</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">right</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">res</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">true</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">return</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">dfs</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">node</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">left</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">sum</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">dfs</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">node</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">right</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">sum</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #82AAFF">dfs</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">res</span></span>
<span class="line"><span style="color: #89DDFF">};</span></span></code></pre>
</div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[深拷贝的实现]]></title>
            <link>https://desain7.top/coding/js/深拷贝的实现.html</link>
            <guid>https://desain7.top/coding/js/深拷贝的实现.html</guid>
            <pubDate>Sun, 03 Sep 2023 16:00:00 GMT</pubDate>
            <description><![CDATA[ 什么是深拷贝？
深拷贝与浅拷贝最大的不同就在于，当遇到属性值为引用类型的时候，它会新建一个引用类型并将对应的值复制给它，因此新对象获得的一个是新的引用类型而不是原有类型的引用。
深拷贝对于一些对象可]]></description>
            <content:encoded><![CDATA[<h1 id="深拷贝的实现" tabindex="-1">深拷贝的实现 <a class="header-anchor" href="#深拷贝的实现" aria-label="Permalink to &quot;深拷贝的实现&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="什么是深拷贝" tabindex="-1">什么是深拷贝？ <a class="header-anchor" href="#什么是深拷贝" aria-label="Permalink to &quot;什么是深拷贝？&quot;">&ZeroWidthSpace;</a></h2>
<p>深拷贝与浅拷贝最大的不同就在于，当遇到属性值为引用类型的时候，它会新建一个引用类型并将对应的值复制给它，因此新对象获得的一个是新的引用类型而不是原有类型的引用。</p>
<p>深拷贝对于一些对象可以使用 JSON 的两个函数来实现，但是由于 JSON 的对象格式比 js 的对象格式更加严格，所以如果属性值里边出现函数或者 Symbol 类型的值时，会转换失败。</p>
<h2 id="代码实现" tabindex="-1">代码实现 <a class="header-anchor" href="#代码实现" aria-label="Permalink to &quot;代码实现&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="json-stringify" tabindex="-1">JSON.stringify() <a class="header-anchor" href="#json-stringify" aria-label="Permalink to &quot;JSON.stringify()&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li><code>JSON.parse(JSON.stringify(obj))</code> 是目前比较常用的深拷贝方法之一，它的原理就是利用 <code>JSON.stringify()</code> 将js对象序列化（JSON字符串），再使用 <code>JSON.parse()</code> 来反序列化(还原)js对象。</li>
<li>这个方法可以简单粗暴地实现深拷贝，但是还存在问题，要拷贝的对象中如果有函数，undefined 或 symbol，当使用过 <code>JSON.stringify()</code> 进行处理之后，都会消失。</li>
</ul>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">let</span><span style="color: #A6ACCD"> obj1 </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD">  </span><span style="color: #F07178">a</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">              </span><span style="color: #F07178">b</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">                 </span><span style="color: #F07178">c</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">0</span></span>
<span class="line"><span style="color: #A6ACCD">                 </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #A6ACCD">            </span><span style="color: #89DDFF">};</span></span>
<span class="line"><span style="color: #C792EA">let</span><span style="color: #A6ACCD"> obj2 </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> JSON</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">parse</span><span style="color: #A6ACCD">(JSON</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">stringify</span><span style="color: #A6ACCD">(obj1))</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">obj1</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">a </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">obj1</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">b</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">c </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #A6ACCD">(obj1)</span><span style="color: #89DDFF">;</span><span style="color: #A6ACCD"> </span><span style="color: #676E95; font-style: italic">// {a: 1, b: {c: 1}}</span></span>
<span class="line"><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #A6ACCD">(obj2)</span><span style="color: #89DDFF">;</span><span style="color: #A6ACCD"> </span><span style="color: #676E95; font-style: italic">// {a: 0, b: {c: 0}}</span></span></code></pre>
</div><h3 id="手写实现" tabindex="-1">手写实现 <a class="header-anchor" href="#手写实现" aria-label="Permalink to &quot;手写实现&quot;">&ZeroWidthSpace;</a></h3>
<p><strong>思路</strong>：</p>
<ol>
<li>遍历源对象的所有属性。</li>
<li>对于每个属性，如果是基本类型，则直接赋值给目标对象。</li>
<li>如果是引用类型（如对象或数组），则递归调用深拷贝函数，创建一个新的对象或数组，并将属性值复制到新的对象或数组中。</li>
</ol>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">deepCopy</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">obj</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 检查是否是基本类型</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">obj</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #89DDFF">null</span><span style="color: #F07178"> </span><span style="color: #89DDFF">||</span><span style="color: #F07178"> </span><span style="color: #89DDFF">typeof</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">obj</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!==</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">object</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">obj</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 创建目标对象</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">copy</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">Array</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">isArray</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">obj</span><span style="color: #F07178">)) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 如果是数组，创建一个空数组</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">copy</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> []</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 如果是对象，创建一个空对象</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">copy</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{};</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 遍历源对象的属性</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178"> (</span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">in</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">obj</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">obj</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">hasOwnProperty</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">)) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// 对于每个属性，递归调用深拷贝函数</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">copy</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">deepCopy</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">obj</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">])</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">copy</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[浅拷贝的实现]]></title>
            <link>https://desain7.top/coding/js/浅拷贝的实现.html</link>
            <guid>https://desain7.top/coding/js/浅拷贝的实现.html</guid>
            <pubDate>Sat, 02 Sep 2023 16:00:00 GMT</pubDate>
            <description><![CDATA[ 什么是浅拷贝？
浅拷贝是指将一个新的对象对原始对象的属性值进行精确地拷贝，如果是基本数据类型，拷贝的就是基本数据类型的值，如果是引用数据类型，拷贝的就是内存地址。如果其中一个对象的引用类型属性的值发]]></description>
            <content:encoded><![CDATA[<h1 id="浅拷贝的实现" tabindex="-1">浅拷贝的实现 <a class="header-anchor" href="#浅拷贝的实现" aria-label="Permalink to &quot;浅拷贝的实现&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="什么是浅拷贝" tabindex="-1">什么是浅拷贝？ <a class="header-anchor" href="#什么是浅拷贝" aria-label="Permalink to &quot;什么是浅拷贝？&quot;">&ZeroWidthSpace;</a></h2>
<p>浅拷贝是指将一个新的对象对原始对象的属性值进行精确地拷贝，如果是基本数据类型，拷贝的就是基本数据类型的值，如果是引用数据类型，拷贝的就是内存地址。如果其中一个对象的引用类型属性的值发生改变，另一个对象也会发生变化。</p>
<h2 id="代码实现" tabindex="-1">代码实现 <a class="header-anchor" href="#代码实现" aria-label="Permalink to &quot;代码实现&quot;">&ZeroWidthSpace;</a></h2>
<p>通常情况下，有多种手段可以实现浅拷贝</p>
<h3 id="object-assign" tabindex="-1">Object.assign() <a class="header-anchor" href="#object-assign" aria-label="Permalink to &quot;Object.assign()&quot;">&ZeroWidthSpace;</a></h3>
<p><code>Object.assign()</code> 是 ES6 中对象的拷贝方法，第一个参数是要拷贝到的目标对象，其余参数是源对象。</p>
<p>用法：<code>Object.assign(target, source_1, ···)</code></p>
<div class="tip custom-block"><p class="custom-block-title">TIP</p>
<ol>
<li>如果目标对象和源对象有同名属性，或者多个源对象有同名属性，则后面的属性会覆盖前面的属性。</li>
<li>当该函数只有一个参数是，如果参数为对象，直接返回该对象；如果参数不是对象，会先将参数转为对象然后返回。</li>
<li>因为 null 和 undefined 不能转化为对象，所以第一个参数不能为 null 或 undefined，会报错。</li>
</ol>
</div>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">let</span><span style="color: #A6ACCD"> target </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #F07178">a</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD"> </span></span>
<span class="line"><span style="color: #C792EA">let</span><span style="color: #A6ACCD"> object2 </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #F07178">b</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">2</span><span style="color: #89DDFF">};</span></span>
<span class="line"><span style="color: #C792EA">let</span><span style="color: #A6ACCD"> object3 </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #F07178">c</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">3</span><span style="color: #89DDFF">};</span></span>
<span class="line"><span style="color: #A6ACCD">Object</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">assign</span><span style="color: #A6ACCD">(target</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD">object2</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD">object3)</span><span style="color: #89DDFF">;</span><span style="color: #A6ACCD">  </span></span>
<span class="line"><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #A6ACCD">(target)</span><span style="color: #89DDFF">;</span><span style="color: #A6ACCD">  </span><span style="color: #676E95; font-style: italic">// {a: 1, b: 2, c: 3}</span></span></code></pre>
</div><h3 id="扩展运算符" tabindex="-1">扩展运算符 <a class="header-anchor" href="#扩展运算符" aria-label="Permalink to &quot;扩展运算符&quot;">&ZeroWidthSpace;</a></h3>
<p>在构造字面量对象时，可以使用扩展运算符进行对象属性的拷贝。</p>
<p>用法：<code>let cloneObj = {...obj}</code></p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">let</span><span style="color: #A6ACCD"> obj1 </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #F07178">a</span><span style="color: #89DDFF">:</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #F07178">b</span><span style="color: #89DDFF">:{</span><span style="color: #F07178">c</span><span style="color: #89DDFF">:</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">}}</span></span>
<span class="line"><span style="color: #C792EA">let</span><span style="color: #A6ACCD"> obj2 </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{...</span><span style="color: #A6ACCD">obj1</span><span style="color: #89DDFF">};</span></span>
<span class="line"><span style="color: #A6ACCD">obj1</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">a </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">2</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #A6ACCD">(obj1)</span><span style="color: #89DDFF">;</span><span style="color: #A6ACCD"> </span><span style="color: #676E95; font-style: italic">//{a:2,b:{c:1}}</span></span>
<span class="line"><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #A6ACCD">(obj2)</span><span style="color: #89DDFF">;</span><span style="color: #A6ACCD"> </span><span style="color: #676E95; font-style: italic">//{a:1,b:{c:1}}</span></span>
<span class="line"><span style="color: #A6ACCD">obj1</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">b</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">c </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">2</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #A6ACCD">(obj1)</span><span style="color: #89DDFF">;</span><span style="color: #A6ACCD"> </span><span style="color: #676E95; font-style: italic">//{a:2,b:{c:2}}</span></span>
<span class="line"><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #A6ACCD">(obj2)</span><span style="color: #89DDFF">;</span><span style="color: #A6ACCD"> </span><span style="color: #676E95; font-style: italic">//{a:1,b:{c:2}}</span></span></code></pre>
</div><h3 id="数组方法实现数组浅拷贝" tabindex="-1">数组方法实现数组浅拷贝 <a class="header-anchor" href="#数组方法实现数组浅拷贝" aria-label="Permalink to &quot;数组方法实现数组浅拷贝&quot;">&ZeroWidthSpace;</a></h3>
<ol>
<li><code>Array.prototype.slice()</code></li>
</ol>
<ul>
<li><code>slice()</code> 方法可以从已有的数组中返回选定的元素，该方法不会改变原数组。</li>
<li>该方法有两个参数，两个参数都可选，如果两个参数都不写，就可以实现一个数组的浅拷贝。</li>
</ul>
<p>用法：<code>Array.slice(start, end)</code></p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">let</span><span style="color: #A6ACCD"> arr </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> [</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">2</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">3</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">4</span><span style="color: #A6ACCD">]</span></span>
<span class="line"><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #A6ACCD">(arr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">slice</span><span style="color: #A6ACCD">())</span><span style="color: #89DDFF">;</span><span style="color: #A6ACCD"> </span><span style="color: #676E95; font-style: italic">// [1,2,3,4]</span></span>
<span class="line"><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #A6ACCD">(arr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">slice</span><span style="color: #A6ACCD">() </span><span style="color: #89DDFF">===</span><span style="color: #A6ACCD"> arr)</span><span style="color: #89DDFF">;</span><span style="color: #A6ACCD"> </span><span style="color: #676E95; font-style: italic">//false</span></span></code></pre>
</div><ol start="2">
<li><code>Array.prototype.concat()</code></li>
</ol>
<ul>
<li><code>concat()</code> 方法用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组。</li>
<li>该方法有两个参数，两个参数都可选，如果两个参数都不写，就可以实现一个数组的浅拷贝。</li>
</ul>
<p>用法： <code>arr1.concat(arr2)</code></p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">let</span><span style="color: #A6ACCD"> arr </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> [</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #F78C6C">2</span><span style="color: #89DDFF">,</span><span style="color: #F78C6C">3</span><span style="color: #89DDFF">,</span><span style="color: #F78C6C">4</span><span style="color: #A6ACCD">]</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #A6ACCD">(arr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">concat</span><span style="color: #A6ACCD">())</span><span style="color: #89DDFF">;</span><span style="color: #A6ACCD"> </span><span style="color: #676E95; font-style: italic">// [1,2,3,4]</span></span>
<span class="line"><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #A6ACCD">(arr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">concat</span><span style="color: #A6ACCD">() </span><span style="color: #89DDFF">===</span><span style="color: #A6ACCD"> arr)</span><span style="color: #89DDFF">;</span><span style="color: #A6ACCD"> </span><span style="color: #676E95; font-style: italic">//false</span></span></code></pre>
</div><h3 id="手写实现" tabindex="-1">手写实现 <a class="header-anchor" href="#手写实现" aria-label="Permalink to &quot;手写实现&quot;">&ZeroWidthSpace;</a></h3>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// 浅拷贝的实现;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">shallowCopy</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">object</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 只拷贝对象</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">object</span><span style="color: #F07178"> </span><span style="color: #89DDFF">||</span><span style="color: #F07178"> </span><span style="color: #89DDFF">typeof</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">object</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!==</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">object</span><span style="color: #89DDFF">&quot;</span><span style="color: #F07178">) </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 根据 object 的类型判断是新建一个数组还是对象</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newObject</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">Array</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">isArray</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">object</span><span style="color: #F07178">) </span><span style="color: #89DDFF">?</span><span style="color: #F07178"> [] </span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{};</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 遍历 object，并且判断是 object 的属性才拷贝</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178"> (</span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">in</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">object</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">object</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">hasOwnProperty</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">)) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">newObject</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">object</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">]</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newObject</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #676E95; font-style: italic">// 浅拷贝的实现;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">shallowCopy</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">object</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 只拷贝对象</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">object</span><span style="color: #F07178"> </span><span style="color: #89DDFF">||</span><span style="color: #F07178"> </span><span style="color: #89DDFF">typeof</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">object</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!==</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">object</span><span style="color: #89DDFF">&quot;</span><span style="color: #F07178">) </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 根据 object 的类型判断是新建一个数组还是对象</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newObject</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">Array</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">isArray</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">object</span><span style="color: #F07178">) </span><span style="color: #89DDFF">?</span><span style="color: #F07178"> [] </span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{};</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 遍历 object，并且判断是 object 的属性才拷贝</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178"> (</span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">in</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">object</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">object</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">hasOwnProperty</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">)) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">newObject</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">object</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">]</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newObject</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #676E95; font-style: italic">// 浅拷贝的实现;</span></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">shallowCopy</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">object</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 只拷贝对象</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">object</span><span style="color: #F07178"> </span><span style="color: #89DDFF">||</span><span style="color: #F07178"> </span><span style="color: #89DDFF">typeof</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">object</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!==</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">object</span><span style="color: #89DDFF">&quot;</span><span style="color: #F07178">) </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 根据 object 的类型判断是新建一个数组还是对象</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newObject</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">Array</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">isArray</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">object</span><span style="color: #F07178">) </span><span style="color: #89DDFF">?</span><span style="color: #F07178"> [] </span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{};</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 遍历 object，并且判断是 object 的属性才拷贝</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178"> (</span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">in</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">object</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">object</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">hasOwnProperty</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">)) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">newObject</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">object</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">]</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newObject</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[函数柯里化的实现]]></title>
            <link>https://desain7.top/coding/js/函数柯里化的实现.html</link>
            <guid>https://desain7.top/coding/js/函数柯里化的实现.html</guid>
            <pubDate>Fri, 01 Sep 2023 16:00:00 GMT</pubDate>
            <description><![CDATA[ 实现思路
1. 创建一个柯里化函数，它接受一个函数作为参数，并返回一个新函数。
2. 在新函数内部，使用闭包保存传入的函数和已经传入的参数。
3. 在新函数的主体中，判断已经传入的参数数量是否满足原]]></description>
            <content:encoded><![CDATA[<h1 id="函数柯里化的实现" tabindex="-1">函数柯里化的实现 <a class="header-anchor" href="#函数柯里化的实现" aria-label="Permalink to &quot;函数柯里化的实现&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="实现思路" tabindex="-1">实现思路 <a class="header-anchor" href="#实现思路" aria-label="Permalink to &quot;实现思路&quot;">&ZeroWidthSpace;</a></h2>
<ol>
<li>
<p>创建一个柯里化函数，它接受一个函数作为参数，并返回一个新函数。</p>
</li>
<li>
<p>在新函数内部，使用闭包保存传入的函数和已经传入的参数。</p>
</li>
<li>
<p>在新函数的主体中，判断已经传入的参数数量是否满足原函数的参数数量。</p>
</li>
<li>
<p>如果已经传入的参数数量足够，就调用原函数并传入这些参数，返回结果。</p>
</li>
<li>
<p>如果已经传入的参数数量不足，就返回一个新的柯里化函数，并将已经传入的参数和新传入的参数合并。</p>
</li>
<li>
<p>重复步骤3到步骤5，直到所有参数都被处理完毕。</p>
</li>
</ol>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// 函数柯里化通常由闭包和递归实现</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">curry</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">fn</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 返回柯里化后的函数</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #C792EA">function</span><span style="color: #F07178"> </span><span style="color: #82AAFF">curried</span><span style="color: #89DDFF">(...</span><span style="color: #A6ACCD; font-style: italic">args</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 持续接受参数，若参数数量大于等于原函数，则直接传入原函数并调用</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">args</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&gt;=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">fn</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">fn</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">apply</span><span style="color: #F07178">(</span><span style="color: #89DDFF">this,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">args</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// 否则返回一个新的函数，直到函数的所有参数都被收集完毕</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #C792EA">function</span><span style="color: #F07178"> </span><span style="color: #89DDFF">(...</span><span style="color: #A6ACCD; font-style: italic">newArgs</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">// 收集参数</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">curried</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">apply</span><span style="color: #F07178">(</span><span style="color: #89DDFF">this,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">args</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">concat</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">newArgs</span><span style="color: #F07178">))</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">};</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">};</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[手写类型判断函数]]></title>
            <link>https://desain7.top/coding/js/手写类型判断函数.html</link>
            <guid>https://desain7.top/coding/js/手写类型判断函数.html</guid>
            <pubDate>Fri, 01 Sep 2023 16:00:00 GMT</pubDate>
            <description><![CDATA[ 实现思路
实现一个类型判断函数可以按照下面这个思路：
1. 首先，通过 JavaScript 提供的基本类型判断方法进行判断。包括使用 typeof 操作符判断基本类型（如字符串、数字、布尔值、函数]]></description>
            <content:encoded><![CDATA[<h1 id="手写类型判断函数" tabindex="-1">手写类型判断函数 <a class="header-anchor" href="#手写类型判断函数" aria-label="Permalink to &quot;手写类型判断函数&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="实现思路" tabindex="-1">实现思路 <a class="header-anchor" href="#实现思路" aria-label="Permalink to &quot;实现思路&quot;">&ZeroWidthSpace;</a></h2>
<p>实现一个类型判断函数可以按照下面这个思路：</p>
<ol>
<li>
<p>首先，通过 JavaScript 提供的基本类型判断方法进行判断。包括使用 typeof 操作符判断基本类型（如字符串、数字、布尔值、函数等），使用 <code>Array.isArray()</code> 判断数组，使用 typeof null 判断 null 类型。</p>
</li>
<li>
<p>对于引用类型（对象、数组等），可以通过判断其构造函数来确定具体类型。使用 instanceof 操作符可以判断一个对象是否属于某个构造函数创建的实例。例如，使用 obj instanceof Array 可以判断 obj 是否为数组。</p>
</li>
<li>
<p>对于特殊类型的判断，可以使用其他方法。例如，使用 <code>Object.prototype.toString()</code> 方法可以获取对象的内部属性 <code>[[Class]]</code>，从而判断其类型。这种方式可以判断更复杂的类型，如日期对象、正则表达式等。</p>
</li>
<li>
<p>对于 null 和 undefined，它们的类型判断比较特殊。可以通过严格相等（===）运算符进行判断，如 value === null 判断是否为 null，typeof value === 'undefined' 判断是否为 undefined。</p>
</li>
</ol>
<h2 id="代码实现" tabindex="-1">代码实现 <a class="header-anchor" href="#代码实现" aria-label="Permalink to &quot;代码实现&quot;">&ZeroWidthSpace;</a></h2>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">getType</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">value</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">value</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #89DDFF">null</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">null</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">typeof</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">value</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">undefined</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">undefined</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">typeof</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">value</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">object</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">valueClass</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Object</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">prototype</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">toString</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">call</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">value</span><span style="color: #F07178">)</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">type</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">valueClass</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">split</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #F07178">)[</span><span style="color: #F78C6C">1</span><span style="color: #F07178">]</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">split</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&quot;&quot;</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">type</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">pop</span><span style="color: #F07178">()</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">type</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">join</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&quot;&quot;</span><span style="color: #F07178">)</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">toLowerCase</span><span style="color: #F07178">()</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">type</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">typeof</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">value</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">Object</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">prototype</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">toString</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">call</span><span style="color: #A6ACCD">(</span><span style="color: #F78C6C">2</span><span style="color: #A6ACCD">) </span><span style="color: #676E95; font-style: italic">// [object Number]</span></span>
<span class="line"><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">getType</span><span style="color: #A6ACCD">(</span><span style="color: #F78C6C">2</span><span style="color: #A6ACCD">) </span><span style="color: #676E95; font-style: italic">// Number</span></span></code></pre>
</div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[手写实现 call、apply 方法]]></title>
            <link>https://desain7.top/coding/js/手写 call与apply.html</link>
            <guid>https://desain7.top/coding/js/手写 call与apply.html</guid>
            <pubDate>Thu, 24 Aug 2023 16:00:00 GMT</pubDate>
            <description><![CDATA[ call 方法和 apply 方法的区别
1. 参数传递方式：
call 方法接受的参数是作为函数调用时的参数一一传递的，通过逗号分隔。
例如：`func.call(context, arg1, a]]></description>
            <content:encoded><![CDATA[<h1 id="手写实现-call、apply-方法" tabindex="-1">手写实现 call、apply 方法 <a class="header-anchor" href="#手写实现-call、apply-方法" aria-label="Permalink to &quot;手写实现 call、apply 方法&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="call-方法和-apply-方法的区别" tabindex="-1">call 方法和 apply 方法的区别 <a class="header-anchor" href="#call-方法和-apply-方法的区别" aria-label="Permalink to &quot;call 方法和 apply 方法的区别&quot;">&ZeroWidthSpace;</a></h2>
<ol>
<li>参数传递方式：</li>
</ol>
<p>call 方法接受的参数是作为函数调用时的参数一一传递的，通过逗号分隔。</p>
<p>例如：<code>func.call(context, arg1, arg2, ...)</code>。</p>
<p>apply 方法接受的参数是一个数组或类数组对象，数组中的元素作为函数调用时的参数传递。</p>
<p>例如：<code>func.apply(context, [arg1, arg2, ...])</code>。</p>
<ol start="2">
<li>参数数量：</li>
</ol>
<p>call 方法的参数数量是固定的，需要按照实际参数的个数逐个传递。</p>
<p>apply 方法可以接受任意数量的参数，只需要将参数以数组的形式传递。</p>
<ol start="3">
<li>使用方式：</li>
</ol>
<p>call 方法在调用时，参数需要逐个列举出来，适合已知参数个数的情况。</p>
<p>apply 方法在调用时，参数以数组形式传递，适合参数数量不确定或已经存在数组的情况。</p>
<p><em>用例：</em></p>
<p>假设有一个函数 greet 和一个对象 person：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">greet</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">message</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">punctuation</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #89DDFF">`${</span><span style="color: #A6ACCD">message</span><span style="color: #89DDFF">}</span><span style="color: #C3E88D"> </span><span style="color: #89DDFF">${</span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">name</span><span style="color: #89DDFF">}${</span><span style="color: #A6ACCD">punctuation</span><span style="color: #89DDFF">}`</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> person </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">name</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">John</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #89DDFF">};</span></span></code></pre>
</div><p>分别使用 call 和 apply 方法来调用 greet 函数</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// 使用 call 方法调用 greet 函数</span></span>
<span class="line"><span style="color: #A6ACCD">greet</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">call</span><span style="color: #A6ACCD">(person</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">Hello</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">!</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 使用 apply 方法调用 greet 函数</span></span>
<span class="line"><span style="color: #A6ACCD">greet</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">apply</span><span style="color: #A6ACCD">(person</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> [</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">Hello</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">!</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD">])</span><span style="color: #89DDFF">;</span></span></code></pre>
</div><div class="tip custom-block"><p class="custom-block-title">TIP</p>
<p>除了参数传递方式的不同，二者在其他方面的行为是类似的，得到的结果也是相同的</p>
</div>
<h2 id="实现-call-方法" tabindex="-1">实现 call 方法 <a class="header-anchor" href="#实现-call-方法" aria-label="Permalink to &quot;实现 call 方法&quot;">&ZeroWidthSpace;</a></h2>
<ol>
<li>将 call 通过原型链的方式添加到 Function 的 Prototype 上，确保所有函数都能调用该方法</li>
<li>将提供给 call 方法的对象作为函数的上下文，参数作为函数的参数</li>
<li>在 call 方法内部通过 this 引用调用了 call 的函数</li>
<li>将该引用赋值为对象的方法，调用方法得到结果</li>
<li>从对象上删除该方法，返回结果</li>
</ol>
<div class="tip custom-block"><p class="custom-block-title">TIP</p>
<p>由于 this 引用得到的函数不能直接调用，所以将它暂时作为对象上的方法，为了避免与原对象上的方法或属性名重复，故将 symbol 作为方法名</p>
</div>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #FFCB6B">Function</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">prototype</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">myCall</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">ctx</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">...</span><span style="color: #A6ACCD; font-style: italic">args</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">fn</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">Symbol</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">fn</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 若传入的对象为空，则使用 window 对象</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">ctx</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">fn</span><span style="color: #F07178">] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">this</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">res</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">ctx</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">fn</span><span style="color: #F07178">](</span><span style="color: #89DDFF">...</span><span style="color: #A6ACCD">args</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">delete</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">ctx</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">fn</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">res</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="实现-apply-方法" tabindex="-1">实现 apply 方法 <a class="header-anchor" href="#实现-apply-方法" aria-label="Permalink to &quot;实现 apply 方法&quot;">&ZeroWidthSpace;</a></h2>
<p>具体实现和 call 方法类似</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #FFCB6B">Function</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">prototype</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">myApply</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">context</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">argsArray</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">fn</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">Symbol</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">fn</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">context</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">context</span><span style="color: #F07178"> </span><span style="color: #89DDFF">||</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">window</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">context</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">fn</span><span style="color: #F07178">] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">this;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">result</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">Array</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">isArray</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">argsArray</span><span style="color: #F07178">)) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">result</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">context</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">fn</span><span style="color: #F07178">](</span><span style="color: #89DDFF">...</span><span style="color: #A6ACCD">argsArray</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 如果传给 apply 方法的第二个参数不是数组或类数组对象，那么就直接执行函数</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">result</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">context</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">fn</span><span style="color: #F07178">]()</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">delete</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">context</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">fn</span><span style="color: #F07178">]</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">result</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">};</span></span></code></pre>
</div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[手写实现 Promise]]></title>
            <link>https://desain7.top/coding/js/手写promise.html</link>
            <guid>https://desain7.top/coding/js/手写promise.html</guid>
            <pubDate>Thu, 24 Aug 2023 16:00:00 GMT</pubDate>
            <description><![CDATA[Promise 简述
---
 定义三种状态
* Promise 的三种状态
  * pending（等待）: 初始状态，没有完成，也没有被拒绝
  * resolved（完成）: 表示操作成功完成
]]></description>
            <content:encoded><![CDATA[<h1 id="手写实现-promise" tabindex="-1">手写实现 Promise <a class="header-anchor" href="#手写实现-promise" aria-label="Permalink to &quot;手写实现 Promise&quot;">&ZeroWidthSpace;</a></h1>
<p><a href="/interview/js/Promise简述.html">Promise 简述</a></p>
<hr>
<h2 id="定义三种状态" tabindex="-1">定义三种状态 <a class="header-anchor" href="#定义三种状态" aria-label="Permalink to &quot;定义三种状态&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li>Promise 的三种状态
<ul>
<li>pending（等待）: 初始状态，没有完成，也没有被拒绝</li>
<li>resolved（完成）: 表示操作成功完成</li>
<li>rejectde（拒绝）: 表示操作失败</li>
</ul>
</li>
</ul>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> PENDING </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">PENDING</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">;</span><span style="color: #A6ACCD"> </span><span style="color: #676E95; font-style: italic">// 进行中</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> FULFILLED </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">FULFILLED</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">;</span><span style="color: #A6ACCD"> </span><span style="color: #676E95; font-style: italic">// 已成功</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> REJECTED </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">REJECTED</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">;</span><span style="color: #A6ACCD"> </span><span style="color: #676E95; font-style: italic">// 已失败</span></span></code></pre>
</div><h2 id="定义-promise-类及构造器-初始化-promise-内部属性、方法" tabindex="-1">定义 Promise 类及构造器，初始化 Promise 内部属性、方法 <a class="header-anchor" href="#定义-promise-类及构造器-初始化-promise-内部属性、方法" aria-label="Permalink to &quot;定义 Promise 类及构造器，初始化 Promise 内部属性、方法&quot;">&ZeroWidthSpace;</a></h2>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">class</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">Promise</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 构造器</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #C792EA">constructor</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">exextor</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// Promise 初始状态为 Pending</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">status</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">PENDING</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 将成功与失败的结果存到 this 上，便于 then 与 catch 的访问</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">value</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">undefined</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">reason</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">undefined</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 成功后的回调函数队列</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">onFulfilledCallbacks</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> []</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 失败后的回调函数队列</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">onRejectedCallbacks</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 定义 resolve 方法</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">resolve</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">value</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// 只有当状态为 Pending 时，才可以更改状态</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">status</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">PENDING</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">status</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">FULFILLED</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">value</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">value</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">onFulfilledCallbacks</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">forEach</span><span style="color: #F07178">(</span><span style="color: #A6ACCD; font-style: italic">fn</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #82AAFF">fn</span><span style="color: #F07178">(</span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">value</span><span style="color: #F07178">))</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 定义 reject 方法</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">reject</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">reason</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// 只有当状态为 Pending 时，才可以更改状态</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">status</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">PENDING</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">status</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">REJECTED</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">reason</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">reason</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">onRejectedCallbacks</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">forEach</span><span style="color: #F07178">(</span><span style="color: #A6ACCD; font-style: italic">fn</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #82AAFF">fn</span><span style="color: #F07178">(</span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">reason</span><span style="color: #F07178">))</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 初始化成功后立即执行 Promise 内部的语句</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">try</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// 立即执行 executor</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// 把内部的 resolve 和 reject 传入 executor，用户可调用 resolve 和 reject 来变更 Promise 的状态</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">exector</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">resolve</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">reject</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">catch</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">e</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// executor 执行出错，将错误内容 reject 抛出去</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">reject</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">e</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><div class="tip custom-block"><p class="custom-block-title">TIP</p>
<p>以下方法均定义在 Promise 类内部</p>
</div>
<h2 id="实现-promise-then-方法" tabindex="-1">实现 Promise.then() 方法 <a class="header-anchor" href="#实现-promise-then-方法" aria-label="Permalink to &quot;实现 Promise.then() 方法&quot;">&ZeroWidthSpace;</a></h2>
<p><code>Promise.then()</code> 方法接收两个参数，对应 Promise 成功和失败的两种状态，它会返回一个等效的 Promise 对象。</p>
<div class="tip custom-block"><p class="custom-block-title">TIP</p>
<p>当传入的参数不为函数时，则直接返回值或抛出错误</p>
</div>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">/**</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">   * promise.then 的实现</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">   * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">*</span><span style="color: #89DDFF; font-style: italic">}</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">onFulfilled</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">   * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">*</span><span style="color: #89DDFF; font-style: italic">}</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">onRejected</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">   * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">returns</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">   * </span></span>
<span class="line"><span style="color: #676E95; font-style: italic">   */</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #82AAFF">then</span><span style="color: #A6ACCD">(onFulfilled</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> onRejected) </span><span style="color: #89DDFF">{</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// onFulfilled 函数会在 Promise 对象完成时异步执行</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">onFulfilled</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">typeof</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">onFulfilled</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">function</span><span style="color: #89DDFF">&quot;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">?</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">onFulfilled</span><span style="color: #F07178"> </span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">value</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">value</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">onRejected</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">typeof</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">onRejected</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">function</span><span style="color: #89DDFF">&quot;</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">?</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">onRejected</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">reason</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #89DDFF; font-style: italic">throw</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">Error</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">reason</span><span style="color: #F07178"> </span><span style="color: #89DDFF">instanceof</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Error</span><span style="color: #F07178"> </span><span style="color: #89DDFF">?</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">reason</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">message</span><span style="color: #F07178"> </span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">reason</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #89DDFF">};</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 保存this</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">self</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">this;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Promise</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">resolve</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">reject</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">self</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">status</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">PENDING</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #A6ACCD">self</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">onFulfilledCallbacks</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push</span><span style="color: #F07178">(</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">          </span><span style="color: #676E95; font-style: italic">// try捕获错误</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #89DDFF; font-style: italic">try</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">            </span><span style="color: #676E95; font-style: italic">// 模拟微任务</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #82AAFF">setTimeout</span><span style="color: #F07178">(</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">              </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">result</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">onFulfilled</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">self</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">value</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">              </span><span style="color: #676E95; font-style: italic">// 分两种情况：</span></span>
<span class="line"><span style="color: #89DDFF">              </span><span style="color: #676E95; font-style: italic">// 1. 回调函数返回值是Promise，执行then操作</span></span>
<span class="line"><span style="color: #89DDFF">              </span><span style="color: #676E95; font-style: italic">// 2. 如果不是Promise，调用新Promise的resolve函数</span></span>
<span class="line"><span style="color: #F07178">              </span><span style="color: #A6ACCD">result</span><span style="color: #F07178"> </span><span style="color: #89DDFF">instanceof</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Promise</span></span>
<span class="line"><span style="color: #F07178">                </span><span style="color: #89DDFF">?</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">result</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">resolve</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">reject</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">                </span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #82AAFF">resolve</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">result</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">catch</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">e</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #82AAFF">reject</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">e</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #A6ACCD">self</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">onRejectedCallbacks</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push</span><span style="color: #F07178">(</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">          </span><span style="color: #676E95; font-style: italic">// 以下同理</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #89DDFF; font-style: italic">try</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #82AAFF">setTimeout</span><span style="color: #F07178">(</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">              </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">result</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">onRejected</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">self</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">reason</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">              </span><span style="color: #676E95; font-style: italic">// 不同点：此时是reject</span></span>
<span class="line"><span style="color: #F07178">              </span><span style="color: #A6ACCD">result</span><span style="color: #F07178"> </span><span style="color: #89DDFF">instanceof</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Promise</span></span>
<span class="line"><span style="color: #F07178">                </span><span style="color: #89DDFF">?</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">result</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">resolve</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">reject</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">                </span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #82AAFF">resolve</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">result</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">catch</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">e</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #82AAFF">reject</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">e</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">self</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">status</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">FULFILLED</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF; font-style: italic">try</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #82AAFF">setTimeout</span><span style="color: #F07178">(</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">result</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">onFulfilled</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">self</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">value</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #A6ACCD">result</span><span style="color: #F07178"> </span><span style="color: #89DDFF">instanceof</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Promise</span></span>
<span class="line"><span style="color: #F07178">              </span><span style="color: #89DDFF">?</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">result</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">resolve</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">reject</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">              </span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #82AAFF">resolve</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">result</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">catch</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">e</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #82AAFF">reject</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">e</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">self</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">status</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">REJECTED</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF; font-style: italic">try</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #82AAFF">setTimeout</span><span style="color: #F07178">(</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">result</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">onRejected</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">self</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">reason</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #A6ACCD">result</span><span style="color: #F07178"> </span><span style="color: #89DDFF">instanceof</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Promise</span></span>
<span class="line"><span style="color: #F07178">              </span><span style="color: #89DDFF">?</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">result</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">resolve</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">reject</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">              </span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #82AAFF">resolve</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">result</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">catch</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">e</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #82AAFF">reject</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">e</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span></code></pre>
</div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">class</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">Promise</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD"> </span></span>
<span class="line"><span style="color: #A6ACCD"> </span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">catch</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">onRejected</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">this.</span><span style="color: #82AAFF">then</span><span style="color: #F07178">(</span><span style="color: #89DDFF">null,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">onRejected</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #C792EA">static</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">resolve</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">value</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">value</span><span style="color: #F07178"> </span><span style="color: #89DDFF">instanceof</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Promise</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// 如果是Promise实例，直接返回</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">value</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// 如果不是Promise实例，返回一个新的Promise对象，状态为FULFILLED</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Promise</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">resolve</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">reject</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #82AAFF">resolve</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">value</span><span style="color: #F07178">))</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #C792EA">static</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">reject</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">reason</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Promise</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">resolve</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">reject</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">reject</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">reason</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #C792EA">static</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">all</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">promiseArr</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">len</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">promiseArr</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">values</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">Array</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">len</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 记录已经成功执行的promise个数</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">count</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Promise</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">resolve</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">reject</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178"> (</span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">len</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">++</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">// Promise.resolve()处理，确保每一个都是promise实例</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #FFCB6B">Promise</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">resolve</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">promiseArr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">])</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #F07178">(</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">val</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #A6ACCD">values</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">val</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #A6ACCD">count</span><span style="color: #89DDFF">++;</span></span>
<span class="line"><span style="color: #89DDFF">            </span><span style="color: #676E95; font-style: italic">// 如果全部执行完，返回promise的状态就可以改变了</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">count</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">len</span><span style="color: #F07178">) </span><span style="color: #82AAFF">resolve</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">values</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #89DDFF">},</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">err</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #82AAFF">reject</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">err</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">        )</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #C792EA">static</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">race</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">promiseArr</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Promise</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">resolve</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">reject</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">promiseArr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">forEach</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">p</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #FFCB6B">Promise</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">resolve</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">p</span><span style="color: #F07178">)</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #F07178">(</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">val</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #82AAFF">resolve</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">val</span><span style="color: #F07178">)</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">err</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #82AAFF">reject</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">err</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">        )</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[节流&防抖]]></title>
            <link>https://desain7.top/coding/js/节流&amp;防抖.html</link>
            <guid>https://desain7.top/coding/js/节流&amp;防抖.html</guid>
            <pubDate>Wed, 23 Aug 2023 16:00:00 GMT</pubDate>
            <description><![CDATA[ 节流
* 规定一个时间，在这个时间内，只能有一次触发事件的回调函数执行，如果在同一个时间内某事件被触发多次，只有一次能生效
```js
const throttle = function (call]]></description>
            <content:encoded><![CDATA[<h1 id="节流-防抖" tabindex="-1">节流&amp;防抖 <a class="header-anchor" href="#节流-防抖" aria-label="Permalink to &quot;节流&amp;防抖&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="节流" tabindex="-1">节流 <a class="header-anchor" href="#节流" aria-label="Permalink to &quot;节流&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li>规定一个时间，在这个时间内，只能有一次触发事件的回调函数执行，如果在同一个时间内某事件被触发多次，只有一次能生效</li>
</ul>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> throttle </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">callback</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">delay</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">timer</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">null</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #C792EA">function</span><span style="color: #F07178"> </span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">timer</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">return</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">callback</span><span style="color: #F07178">()</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">timer</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">setTimeout</span><span style="color: #F07178">(</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">timer</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">null</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">},</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">delay</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="防抖" tabindex="-1">防抖 <a class="header-anchor" href="#防抖" aria-label="Permalink to &quot;防抖&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li>规定一个时间，在这个时间内，一次触发事件的回调函数会被执行，如果在同一时间内某事件被触发多次，该回调函数会被重新执行</li>
</ul>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> debounce </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">callback</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">delay</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">timer</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">null</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #C792EA">function</span><span style="color: #F07178"> </span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">clearTimeout</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">timer</span><span style="color: #F07178">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">timer</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">setTimeout</span><span style="color: #F07178">(</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">callback</span><span style="color: #F07178">()</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">},</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">delay</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Promise的特点是什么，分别有什么优缺点？什么是Promise链？Promise构造函数执行和then函数执行有什么区别？]]></title>
            <link>https://desain7.top/interview/js/Promise简述.html</link>
            <guid>https://desain7.top/interview/js/Promise简述.html</guid>
            <pubDate>Wed, 23 Aug 2023 16:00:00 GMT</pubDate>
            <description><![CDATA[ 特点
* Promise 有三种状态
  * pending（等待）: 初始状态，没有完成，也没有被拒绝
  * resolved（完成）: 表示操作成功完成
  * rejectde（拒绝）: 表]]></description>
            <content:encoded><![CDATA[<h1 id="promise-的特点是什么-分别有什么优缺点-什么是-promise-链-promise-构造函数执行和-then-函数执行有什么区别" tabindex="-1">Promise 的特点是什么，分别有什么优缺点？什么是 Promise 链？Promise 构造函数执行和 then 函数执行有什么区别？ <a class="header-anchor" href="#promise-的特点是什么-分别有什么优缺点-什么是-promise-链-promise-构造函数执行和-then-函数执行有什么区别" aria-label="Permalink to &quot;Promise 的特点是什么，分别有什么优缺点？什么是 Promise 链？Promise 构造函数执行和 then 函数执行有什么区别？&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="特点" tabindex="-1">特点 <a class="header-anchor" href="#特点" aria-label="Permalink to &quot;特点&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li>Promise 有三种状态
<ul>
<li>pending（等待）: 初始状态，没有完成，也没有被拒绝</li>
<li>resolved（完成）: 表示操作成功完成</li>
<li>rejectde（拒绝）: 表示操作失败</li>
</ul>
</li>
<li>如果一个 Promise 从等待状态变为其他状态就永远不能更改状态，此时的状态可称为 settled（已敲定）</li>
</ul>
<h2 id="优点" tabindex="-1">优点 <a class="header-anchor" href="#优点" aria-label="Permalink to &quot;优点&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li>
<p>很好的解决了回调地狱的问题</p>
</li>
<li>
<p>Promise 利用三大手段解决回调地狱：</p>
<ol>
<li>回调函数延迟绑定
通过将回调函数封装在一个函数中，并在异步操作完成后调用该函数并传递结果实现</li>
</ol>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// 异步操作返回一个 Promise 对象</span></span>
<span class="line"><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">asyncOperation</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">   </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Promise</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">resolve</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">     </span><span style="color: #82AAFF">setTimeout</span><span style="color: #F07178">(</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">       </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">result</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">Operation result</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">       </span><span style="color: #82AAFF">resolve</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">result</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">     </span><span style="color: #89DDFF">},</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1000</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">nextOperation</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">result</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">   </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">result</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">   </span><span style="color: #676E95; font-style: italic">// 执行下一个操作</span></span>
<span class="line"><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF"> </span><span style="color: #676E95; font-style: italic">// 通过 .then() 方法，在异步操作完成后执行下一个操作，若出现错误，则用 .catch() 捕获并处理</span></span>
<span class="line"><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">asyncOperation</span><span style="color: #A6ACCD">()</span></span>
<span class="line"><span style="color: #A6ACCD">   </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #A6ACCD">(nextOperation)</span></span>
<span class="line"><span style="color: #A6ACCD">   </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">catch</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">error</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">     </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">error</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">error</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span></code></pre>
</div><ol start="2">
<li>返回值穿透
通过一个函数返回 Promise，以链式的方式连接多个异步操作，避免嵌套回调函数</li>
</ol>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">asyncOperation</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Promise</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">resolve</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">   </span><span style="color: #82AAFF">setTimeout</span><span style="color: #F07178">(</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">     </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">result</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">Operation result</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">     </span><span style="color: #82AAFF">resolve</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">result</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">   </span><span style="color: #89DDFF">},</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1000</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 每个 .then() 方法都返回一个新的 Promise 对象，从而将多个操作连接在一起，并在过程中完成值的传递</span></span>
<span class="line"><span style="color: #82AAFF">asyncOperation</span><span style="color: #A6ACCD">()</span></span>
<span class="line"><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">result</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">   </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">result</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">   </span><span style="color: #676E95; font-style: italic">// 执行下一个操作</span></span>
<span class="line"><span style="color: #F07178">   </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">Next operation result</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">nextResult</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">   </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">nextResult</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">   </span><span style="color: #676E95; font-style: italic">// 执行下一个操作</span></span>
<span class="line"><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">catch</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">error</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">   </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">error</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">error</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span></code></pre>
</div><ol start="3">
<li>错误冒泡
通过在 Promise 链中使用 .catch() 方法来捕获和处理错误，避免它们在链中传播并导致回调地狱</li>
</ol>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">asyncOperation</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Promise</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">resolve</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">reject</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">   </span><span style="color: #82AAFF">setTimeout</span><span style="color: #F07178">(</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">     </span><span style="color: #676E95; font-style: italic">// 若异步操作失败，就抛出错误，并将 Promise 的状态变为 rejected</span></span>
<span class="line"><span style="color: #F07178">     </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">error</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">Error</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">Operation failed</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">     </span><span style="color: #82AAFF">reject</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">error</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">   </span><span style="color: #89DDFF">},</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1000</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #82AAFF">asyncOperation</span><span style="color: #A6ACCD">()</span></span>
<span class="line"><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">result</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">   </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">result</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">   </span><span style="color: #676E95; font-style: italic">// 执行下一个操作</span></span>
<span class="line"><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">catch</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">error</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">   </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">error</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">error</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">   </span><span style="color: #676E95; font-style: italic">// 错误处理逻辑</span></span>
<span class="line"><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span></code></pre>
</div></li>
</ul>
<h2 id="缺点" tabindex="-1">缺点 <a class="header-anchor" href="#缺点" aria-label="Permalink to &quot;缺点&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li>无法取消
Promise 一旦创建并开始执行后，就无法取消了</li>
<li>异常处理比较复杂
Promise 的异常处理需要通过 .catch() 方法，或在每个 .then() 方法中处处理错误来实现</li>
</ul>
<h2 id="promise链" tabindex="-1">Promise链 <a class="header-anchor" href="#promise链" aria-label="Permalink to &quot;Promise链&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li>每次调用 .then() 之后返回的都是一个全新的 Promise，此时又可以接着使用 .then() 方法,由此便形成了一条 Promise 链</li>
<li>在 .then() 中 使用了 return，那么 return 的值会被 Promise.resolve() 包装</li>
</ul>
<h2 id="promise-构造函数执行和-then-函数执行有什么区别" tabindex="-1">Promise 构造函数执行和 then 函数执行有什么区别 <a class="header-anchor" href="#promise-构造函数执行和-then-函数执行有什么区别" aria-label="Permalink to &quot;Promise 构造函数执行和 then 函数执行有什么区别&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li>构造 Promise 时，构造函数内部的代码是立即执行的（同步）</li>
<li>.then() 在  Promise 对象的状态变为 resolved 时执行（异步）</li>
</ul>
<div class="tip custom-block"><p class="custom-block-title">TIP</p>
<p>.then() 中的回调函数会被放入微任务队列中，等待 JavaScript 引擎空闲时执行</p>
</div>
]]></content:encoded>
        </item>
    </channel>
</rss>