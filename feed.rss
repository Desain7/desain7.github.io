<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Desain</title>
        <link>https://desain7.top</link>
        <description>要从那时起，不再动摇（前端相关技术分享）</description>
        <lastBuildDate>Mon, 28 Aug 2023 06:16:45 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>zh-cn</language>
        <image>
            <title>Desain</title>
            <url>http://oss.desain7.top/pic94500053.jpg</url>
            <link>https://desain7.top</link>
        </image>
        <copyright>Copyright (c) 2022-present, Desain</copyright>
        <item>
            <title><![CDATA[手写实现 call、apply 方法]]></title>
            <link>https://desain7.top/coding/js/手写 call与apply.html</link>
            <guid>https://desain7.top/coding/js/手写 call与apply.html</guid>
            <pubDate>Thu, 24 Aug 2023 16:00:00 GMT</pubDate>
            <description><![CDATA[ call 方法和 apply 方法的区别
1. 参数传递方式：
call 方法接受的参数是作为函数调用时的参数一一传递的，通过逗号分隔。
例如：`func.call(context, arg1, a]]></description>
            <content:encoded><![CDATA[<h1 id="手写实现-call、apply-方法" tabindex="-1">手写实现 call、apply 方法 <a class="header-anchor" href="#手写实现-call、apply-方法" aria-label="Permalink to &quot;手写实现 call、apply 方法&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="call-方法和-apply-方法的区别" tabindex="-1">call 方法和 apply 方法的区别 <a class="header-anchor" href="#call-方法和-apply-方法的区别" aria-label="Permalink to &quot;call 方法和 apply 方法的区别&quot;">&ZeroWidthSpace;</a></h2>
<ol>
<li>参数传递方式：</li>
</ol>
<p>call 方法接受的参数是作为函数调用时的参数一一传递的，通过逗号分隔。</p>
<p>例如：<code>func.call(context, arg1, arg2, ...)</code>。</p>
<p>apply 方法接受的参数是一个数组或类数组对象，数组中的元素作为函数调用时的参数传递。</p>
<p>例如：<code>func.apply(context, [arg1, arg2, ...])</code>。</p>
<ol start="2">
<li>参数数量：</li>
</ol>
<p>call 方法的参数数量是固定的，需要按照实际参数的个数逐个传递。</p>
<p>apply 方法可以接受任意数量的参数，只需要将参数以数组的形式传递。</p>
<ol start="3">
<li>使用方式：</li>
</ol>
<p>call 方法在调用时，参数需要逐个列举出来，适合已知参数个数的情况。</p>
<p>apply 方法在调用时，参数以数组形式传递，适合参数数量不确定或已经存在数组的情况。</p>
<p><em>用例：</em></p>
<p>假设有一个函数 greet 和一个对象 person：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">greet</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">message</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">punctuation</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #89DDFF">`${</span><span style="color: #A6ACCD">message</span><span style="color: #89DDFF">}</span><span style="color: #C3E88D"> </span><span style="color: #89DDFF">${</span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">name</span><span style="color: #89DDFF">}${</span><span style="color: #A6ACCD">punctuation</span><span style="color: #89DDFF">}`</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> person </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">name</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">John</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #89DDFF">};</span></span></code></pre>
</div><p>分别使用 call 和 apply 方法来调用 greet 函数</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// 使用 call 方法调用 greet 函数</span></span>
<span class="line"><span style="color: #A6ACCD">greet</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">call</span><span style="color: #A6ACCD">(person</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">Hello</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">!</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 使用 apply 方法调用 greet 函数</span></span>
<span class="line"><span style="color: #A6ACCD">greet</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">apply</span><span style="color: #A6ACCD">(person</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> [</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">Hello</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">!</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD">])</span><span style="color: #89DDFF">;</span></span></code></pre>
</div><div class="tip custom-block"><p class="custom-block-title">TIP</p>
<p>除了参数传递方式的不同，二者在其他方面的行为是类似的，得到的结果也是相同的</p>
</div>
<h2 id="实现-call-方法" tabindex="-1">实现 call 方法 <a class="header-anchor" href="#实现-call-方法" aria-label="Permalink to &quot;实现 call 方法&quot;">&ZeroWidthSpace;</a></h2>
<ol>
<li>将 call 通过原型链的方式添加到 Function 的 Prototype 上，确保所有函数都能调用该方法</li>
<li>将提供给 call 方法的对象作为函数的上下文，参数作为函数的参数</li>
<li>在 call 方法内部通过 this 引用调用了 call 的函数</li>
<li>将该引用赋值为对象的方法，调用方法得到结果</li>
<li>从对象上删除该方法，返回结果</li>
</ol>
<div class="tip custom-block"><p class="custom-block-title">TIP</p>
<p>由于 this 引用得到的函数不能直接调用，所以将它暂时作为对象上的方法，为了避免与原对象上的方法或属性名重复，故将 symbol 作为方法名</p>
</div>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #FFCB6B">Function</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">prototype</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">myCall</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">ctx</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">...</span><span style="color: #A6ACCD; font-style: italic">args</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">fn</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">Symbol</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">fn</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 若传入的对象为空，则使用 window 对象</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">ctx</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">fn</span><span style="color: #F07178">] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">this</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">res</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">ctx</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">fn</span><span style="color: #F07178">](</span><span style="color: #89DDFF">...</span><span style="color: #A6ACCD">args</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">delete</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">ctx</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">fn</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">res</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="实现-apply-方法" tabindex="-1">实现 apply 方法 <a class="header-anchor" href="#实现-apply-方法" aria-label="Permalink to &quot;实现 apply 方法&quot;">&ZeroWidthSpace;</a></h2>
<p>具体实现和 call 方法类似</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #FFCB6B">Function</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">prototype</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">myApply</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">context</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">argsArray</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">fn</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">Symbol</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">fn</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">context</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">context</span><span style="color: #F07178"> </span><span style="color: #89DDFF">||</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">window</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">context</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">fn</span><span style="color: #F07178">] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">this;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">result</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">Array</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">isArray</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">argsArray</span><span style="color: #F07178">)) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">result</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">context</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">fn</span><span style="color: #F07178">](</span><span style="color: #89DDFF">...</span><span style="color: #A6ACCD">argsArray</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 如果传给 apply 方法的第二个参数不是数组或类数组对象，那么就直接执行函数</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">result</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">context</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">fn</span><span style="color: #F07178">]()</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">delete</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">context</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">fn</span><span style="color: #F07178">]</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">result</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">};</span></span></code></pre>
</div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[手写实现 Promise]]></title>
            <link>https://desain7.top/coding/js/手写promise.html</link>
            <guid>https://desain7.top/coding/js/手写promise.html</guid>
            <pubDate>Thu, 24 Aug 2023 16:00:00 GMT</pubDate>
            <description><![CDATA[Promise 简述
---
 定义三种状态
* Promise 的三种状态
  * pending（等待）: 初始状态，没有完成，也没有被拒绝
  * resolved（完成）: 表示操作成功完成
]]></description>
            <content:encoded><![CDATA[<h1 id="手写实现-promise" tabindex="-1">手写实现 Promise <a class="header-anchor" href="#手写实现-promise" aria-label="Permalink to &quot;手写实现 Promise&quot;">&ZeroWidthSpace;</a></h1>
<p><a href="/interview/js/Promise简述.html">Promise 简述</a></p>
<hr>
<h2 id="定义三种状态" tabindex="-1">定义三种状态 <a class="header-anchor" href="#定义三种状态" aria-label="Permalink to &quot;定义三种状态&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li>Promise 的三种状态
<ul>
<li>pending（等待）: 初始状态，没有完成，也没有被拒绝</li>
<li>resolved（完成）: 表示操作成功完成</li>
<li>rejectde（拒绝）: 表示操作失败</li>
</ul>
</li>
</ul>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> PENDING </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">PENDING</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">;</span><span style="color: #A6ACCD"> </span><span style="color: #676E95; font-style: italic">// 进行中</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> FULFILLED </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">FULFILLED</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">;</span><span style="color: #A6ACCD"> </span><span style="color: #676E95; font-style: italic">// 已成功</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> REJECTED </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">REJECTED</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">;</span><span style="color: #A6ACCD"> </span><span style="color: #676E95; font-style: italic">// 已失败</span></span></code></pre>
</div><h2 id="定义-promise-类及构造器-初始化-promise-内部属性、方法" tabindex="-1">定义 Promise 类及构造器，初始化 Promise 内部属性、方法 <a class="header-anchor" href="#定义-promise-类及构造器-初始化-promise-内部属性、方法" aria-label="Permalink to &quot;定义 Promise 类及构造器，初始化 Promise 内部属性、方法&quot;">&ZeroWidthSpace;</a></h2>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">class</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">Promise</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 构造器</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #C792EA">constructor</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">exextor</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// Promise 初始状态为 Pending</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">status</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">PENDING</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 将成功与失败的结果存到 this 上，便于 then 与 catch 的访问</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">value</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">undefined</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">reason</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">undefined</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 成功后的回调函数队列</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">onFulfilledCallbacks</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> []</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 失败后的回调函数队列</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">onRejectedCallbacks</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 定义 resolve 方法</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">resolve</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">value</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// 只有当状态为 Pending 时，才可以更改状态</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">status</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">PENDING</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">status</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">FULFILLED</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">value</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">value</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">onFulfilledCallbacks</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">forEach</span><span style="color: #F07178">(</span><span style="color: #A6ACCD; font-style: italic">fn</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #82AAFF">fn</span><span style="color: #F07178">(</span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">value</span><span style="color: #F07178">))</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 定义 reject 方法</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">reject</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">reason</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// 只有当状态为 Pending 时，才可以更改状态</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">status</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">PENDING</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">status</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">REJECTED</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">reason</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">reason</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">onRejectedCallbacks</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">forEach</span><span style="color: #F07178">(</span><span style="color: #A6ACCD; font-style: italic">fn</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #82AAFF">fn</span><span style="color: #F07178">(</span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">reason</span><span style="color: #F07178">))</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 初始化成功后立即执行 Promise 内部的语句</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">try</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// 立即执行 executor</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// 把内部的 resolve 和 reject 传入 executor，用户可调用 resolve 和 reject 来变更 Promise 的状态</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">exector</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">resolve</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">reject</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">catch</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">e</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// executor 执行出错，将错误内容 reject 抛出去</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">reject</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">e</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><div class="tip custom-block"><p class="custom-block-title">TIP</p>
<p>以下方法均定义在 Promise 类内部</p>
</div>
<h2 id="实现-promise-then-方法" tabindex="-1">实现 Promise.then() 方法 <a class="header-anchor" href="#实现-promise-then-方法" aria-label="Permalink to &quot;实现 Promise.then() 方法&quot;">&ZeroWidthSpace;</a></h2>
<p><code>Promise.then()</code> 方法接收两个参数，对应 Promise 成功和失败的两种状态，它会返回一个等效的 Promise 对象。</p>
<div class="tip custom-block"><p class="custom-block-title">TIP</p>
<p>当传入的参数不为函数时，则直接返回值或抛出错误</p>
</div>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">/**</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">   * promise.then 的实现</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">   * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">*</span><span style="color: #89DDFF; font-style: italic">}</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">onFulfilled</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">   * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">*</span><span style="color: #89DDFF; font-style: italic">}</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">onRejected</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">   * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">returns</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">   * </span></span>
<span class="line"><span style="color: #676E95; font-style: italic">   */</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #82AAFF">then</span><span style="color: #A6ACCD">(onFulfilled</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> onRejected) </span><span style="color: #89DDFF">{</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// onFulfilled 函数会在 Promise 对象完成时异步执行</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">onFulfilled</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">typeof</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">onFulfilled</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">function</span><span style="color: #89DDFF">&quot;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">?</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">onFulfilled</span><span style="color: #F07178"> </span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">value</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">value</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">onRejected</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">typeof</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">onRejected</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">function</span><span style="color: #89DDFF">&quot;</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">?</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">onRejected</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">reason</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #89DDFF; font-style: italic">throw</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">Error</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">reason</span><span style="color: #F07178"> </span><span style="color: #89DDFF">instanceof</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Error</span><span style="color: #F07178"> </span><span style="color: #89DDFF">?</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">reason</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">message</span><span style="color: #F07178"> </span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">reason</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #89DDFF">};</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 保存this</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">self</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">this;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Promise</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">resolve</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">reject</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">self</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">status</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">PENDING</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #A6ACCD">self</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">onFulfilledCallbacks</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push</span><span style="color: #F07178">(</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">          </span><span style="color: #676E95; font-style: italic">// try捕获错误</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #89DDFF; font-style: italic">try</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">            </span><span style="color: #676E95; font-style: italic">// 模拟微任务</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #82AAFF">setTimeout</span><span style="color: #F07178">(</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">              </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">result</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">onFulfilled</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">self</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">value</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">              </span><span style="color: #676E95; font-style: italic">// 分两种情况：</span></span>
<span class="line"><span style="color: #89DDFF">              </span><span style="color: #676E95; font-style: italic">// 1. 回调函数返回值是Promise，执行then操作</span></span>
<span class="line"><span style="color: #89DDFF">              </span><span style="color: #676E95; font-style: italic">// 2. 如果不是Promise，调用新Promise的resolve函数</span></span>
<span class="line"><span style="color: #F07178">              </span><span style="color: #A6ACCD">result</span><span style="color: #F07178"> </span><span style="color: #89DDFF">instanceof</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Promise</span></span>
<span class="line"><span style="color: #F07178">                </span><span style="color: #89DDFF">?</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">result</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">resolve</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">reject</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">                </span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #82AAFF">resolve</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">result</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">catch</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">e</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #82AAFF">reject</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">e</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #A6ACCD">self</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">onRejectedCallbacks</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push</span><span style="color: #F07178">(</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">          </span><span style="color: #676E95; font-style: italic">// 以下同理</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #89DDFF; font-style: italic">try</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #82AAFF">setTimeout</span><span style="color: #F07178">(</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">              </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">result</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">onRejected</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">self</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">reason</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">              </span><span style="color: #676E95; font-style: italic">// 不同点：此时是reject</span></span>
<span class="line"><span style="color: #F07178">              </span><span style="color: #A6ACCD">result</span><span style="color: #F07178"> </span><span style="color: #89DDFF">instanceof</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Promise</span></span>
<span class="line"><span style="color: #F07178">                </span><span style="color: #89DDFF">?</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">result</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">resolve</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">reject</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">                </span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #82AAFF">resolve</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">result</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">catch</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">e</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #82AAFF">reject</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">e</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">self</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">status</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">FULFILLED</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF; font-style: italic">try</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #82AAFF">setTimeout</span><span style="color: #F07178">(</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">result</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">onFulfilled</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">self</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">value</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #A6ACCD">result</span><span style="color: #F07178"> </span><span style="color: #89DDFF">instanceof</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Promise</span></span>
<span class="line"><span style="color: #F07178">              </span><span style="color: #89DDFF">?</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">result</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">resolve</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">reject</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">              </span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #82AAFF">resolve</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">result</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">catch</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">e</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #82AAFF">reject</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">e</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">self</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">status</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">REJECTED</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF; font-style: italic">try</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #82AAFF">setTimeout</span><span style="color: #F07178">(</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">result</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">onRejected</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">self</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">reason</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #A6ACCD">result</span><span style="color: #F07178"> </span><span style="color: #89DDFF">instanceof</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Promise</span></span>
<span class="line"><span style="color: #F07178">              </span><span style="color: #89DDFF">?</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">result</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">resolve</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">reject</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">              </span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #82AAFF">resolve</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">result</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">catch</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">e</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #82AAFF">reject</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">e</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span></code></pre>
</div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">class</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">Promise</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD"> </span></span>
<span class="line"><span style="color: #A6ACCD"> </span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">catch</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">onRejected</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">this.</span><span style="color: #82AAFF">then</span><span style="color: #F07178">(</span><span style="color: #89DDFF">null,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">onRejected</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #C792EA">static</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">resolve</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">value</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">value</span><span style="color: #F07178"> </span><span style="color: #89DDFF">instanceof</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Promise</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// 如果是Promise实例，直接返回</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">value</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// 如果不是Promise实例，返回一个新的Promise对象，状态为FULFILLED</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Promise</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">resolve</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">reject</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #82AAFF">resolve</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">value</span><span style="color: #F07178">))</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #C792EA">static</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">reject</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">reason</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Promise</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">resolve</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">reject</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">reject</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">reason</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #C792EA">static</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">all</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">promiseArr</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">len</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">promiseArr</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">values</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">Array</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">len</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 记录已经成功执行的promise个数</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">count</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Promise</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">resolve</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">reject</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178"> (</span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">len</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">++</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">// Promise.resolve()处理，确保每一个都是promise实例</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #FFCB6B">Promise</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">resolve</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">promiseArr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">])</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #F07178">(</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">val</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #A6ACCD">values</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">val</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #A6ACCD">count</span><span style="color: #89DDFF">++;</span></span>
<span class="line"><span style="color: #89DDFF">            </span><span style="color: #676E95; font-style: italic">// 如果全部执行完，返回promise的状态就可以改变了</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">count</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">len</span><span style="color: #F07178">) </span><span style="color: #82AAFF">resolve</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">values</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #89DDFF">},</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">err</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #82AAFF">reject</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">err</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">        )</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #C792EA">static</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">race</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">promiseArr</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Promise</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">resolve</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">reject</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">promiseArr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">forEach</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">p</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #FFCB6B">Promise</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">resolve</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">p</span><span style="color: #F07178">)</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #F07178">(</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">val</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #82AAFF">resolve</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">val</span><span style="color: #F07178">)</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">err</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #82AAFF">reject</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">err</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">        )</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[节流&防抖]]></title>
            <link>https://desain7.top/coding/js/节流&amp;防抖.html</link>
            <guid>https://desain7.top/coding/js/节流&amp;防抖.html</guid>
            <pubDate>Wed, 23 Aug 2023 16:00:00 GMT</pubDate>
            <description><![CDATA[ 节流
* 规定一个时间，在这个时间内，只能有一次触发事件的回调函数执行，如果在同一个时间内某事件被触发多次，只有一次能生效
```js
const throttle = function (call]]></description>
            <content:encoded><![CDATA[<h1 id="节流-防抖" tabindex="-1">节流&amp;防抖 <a class="header-anchor" href="#节流-防抖" aria-label="Permalink to &quot;节流&amp;防抖&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="节流" tabindex="-1">节流 <a class="header-anchor" href="#节流" aria-label="Permalink to &quot;节流&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li>规定一个时间，在这个时间内，只能有一次触发事件的回调函数执行，如果在同一个时间内某事件被触发多次，只有一次能生效</li>
</ul>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> throttle </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">callback</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">delay</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">timer</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">null</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #C792EA">function</span><span style="color: #F07178"> </span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">timer</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">return</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">callback</span><span style="color: #F07178">()</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">timer</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">setTimeout</span><span style="color: #F07178">(</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">timer</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">null</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">},</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">delay</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="防抖" tabindex="-1">防抖 <a class="header-anchor" href="#防抖" aria-label="Permalink to &quot;防抖&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li>规定一个时间，在这个时间内，一次触发事件的回调函数会被执行，如果在同一时间内某事件被触发多次，该回调函数会被重新执行</li>
</ul>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> debounce </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">callback</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">delay</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">timer</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">null</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #C792EA">function</span><span style="color: #F07178"> </span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">clearTimeout</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">timer</span><span style="color: #F07178">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">timer</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">setTimeout</span><span style="color: #F07178">(</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">callback</span><span style="color: #F07178">()</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">},</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">delay</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Promise的特点是什么，分别有什么优缺点？什么是Promise链？Promise构造函数执行和then函数执行有什么区别？]]></title>
            <link>https://desain7.top/interview/js/Promise简述.html</link>
            <guid>https://desain7.top/interview/js/Promise简述.html</guid>
            <pubDate>Wed, 23 Aug 2023 16:00:00 GMT</pubDate>
            <description><![CDATA[ 特点
* Promise 有三种状态
  * pending（等待）: 初始状态，没有完成，也没有被拒绝
  * resolved（完成）: 表示操作成功完成
  * rejectde（拒绝）: 表]]></description>
            <content:encoded><![CDATA[<h1 id="promise-的特点是什么-分别有什么优缺点-什么是-promise-链-promise-构造函数执行和-then-函数执行有什么区别" tabindex="-1">Promise 的特点是什么，分别有什么优缺点？什么是 Promise 链？Promise 构造函数执行和 then 函数执行有什么区别？ <a class="header-anchor" href="#promise-的特点是什么-分别有什么优缺点-什么是-promise-链-promise-构造函数执行和-then-函数执行有什么区别" aria-label="Permalink to &quot;Promise 的特点是什么，分别有什么优缺点？什么是 Promise 链？Promise 构造函数执行和 then 函数执行有什么区别？&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="特点" tabindex="-1">特点 <a class="header-anchor" href="#特点" aria-label="Permalink to &quot;特点&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li>Promise 有三种状态
<ul>
<li>pending（等待）: 初始状态，没有完成，也没有被拒绝</li>
<li>resolved（完成）: 表示操作成功完成</li>
<li>rejectde（拒绝）: 表示操作失败</li>
</ul>
</li>
<li>如果一个 Promise 从等待状态变为其他状态就永远不能更改状态，此时的状态可称为 settled（已敲定）</li>
</ul>
<h2 id="优点" tabindex="-1">优点 <a class="header-anchor" href="#优点" aria-label="Permalink to &quot;优点&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li>
<p>很好的解决了回调地狱的问题</p>
</li>
<li>
<p>Promise 利用三大手段解决回调地狱：</p>
<ol>
<li>回调函数延迟绑定
通过将回调函数封装在一个函数中，并在异步操作完成后调用该函数并传递结果实现</li>
</ol>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// 异步操作返回一个 Promise 对象</span></span>
<span class="line"><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">asyncOperation</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">   </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Promise</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">resolve</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">     </span><span style="color: #82AAFF">setTimeout</span><span style="color: #F07178">(</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">       </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">result</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">Operation result</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">       </span><span style="color: #82AAFF">resolve</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">result</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">     </span><span style="color: #89DDFF">},</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1000</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">nextOperation</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">result</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">   </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">result</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">   </span><span style="color: #676E95; font-style: italic">// 执行下一个操作</span></span>
<span class="line"><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF"> </span><span style="color: #676E95; font-style: italic">// 通过 .then() 方法，在异步操作完成后执行下一个操作，若出现错误，则用 .catch() 捕获并处理</span></span>
<span class="line"><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">asyncOperation</span><span style="color: #A6ACCD">()</span></span>
<span class="line"><span style="color: #A6ACCD">   </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #A6ACCD">(nextOperation)</span></span>
<span class="line"><span style="color: #A6ACCD">   </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">catch</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">error</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">     </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">error</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">error</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span></code></pre>
</div><ol start="2">
<li>返回值穿透
通过一个函数返回 Promise，以链式的方式连接多个异步操作，避免嵌套回调函数</li>
</ol>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">asyncOperation</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Promise</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">resolve</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">   </span><span style="color: #82AAFF">setTimeout</span><span style="color: #F07178">(</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">     </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">result</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">Operation result</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">     </span><span style="color: #82AAFF">resolve</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">result</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">   </span><span style="color: #89DDFF">},</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1000</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 每个 .then() 方法都返回一个新的 Promise 对象，从而将多个操作连接在一起，并在过程中完成值的传递</span></span>
<span class="line"><span style="color: #82AAFF">asyncOperation</span><span style="color: #A6ACCD">()</span></span>
<span class="line"><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">result</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">   </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">result</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">   </span><span style="color: #676E95; font-style: italic">// 执行下一个操作</span></span>
<span class="line"><span style="color: #F07178">   </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">Next operation result</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">nextResult</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">   </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">nextResult</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">   </span><span style="color: #676E95; font-style: italic">// 执行下一个操作</span></span>
<span class="line"><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">catch</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">error</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">   </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">error</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">error</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span></code></pre>
</div><ol start="3">
<li>错误冒泡
通过在 Promise 链中使用 .catch() 方法来捕获和处理错误，避免它们在链中传播并导致回调地狱</li>
</ol>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">asyncOperation</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Promise</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">resolve</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">reject</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">   </span><span style="color: #82AAFF">setTimeout</span><span style="color: #F07178">(</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">     </span><span style="color: #676E95; font-style: italic">// 若异步操作失败，就抛出错误，并将 Promise 的状态变为 rejected</span></span>
<span class="line"><span style="color: #F07178">     </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">error</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">Error</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">Operation failed</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">     </span><span style="color: #82AAFF">reject</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">error</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">   </span><span style="color: #89DDFF">},</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1000</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #82AAFF">asyncOperation</span><span style="color: #A6ACCD">()</span></span>
<span class="line"><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">result</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">   </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">result</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">   </span><span style="color: #676E95; font-style: italic">// 执行下一个操作</span></span>
<span class="line"><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">catch</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">error</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">   </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">error</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">error</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">   </span><span style="color: #676E95; font-style: italic">// 错误处理逻辑</span></span>
<span class="line"><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span></code></pre>
</div></li>
</ul>
<h2 id="缺点" tabindex="-1">缺点 <a class="header-anchor" href="#缺点" aria-label="Permalink to &quot;缺点&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li>无法取消
Promise 一旦创建并开始执行后，就无法取消了</li>
<li>异常处理比较复杂
Promise 的异常处理需要通过 .catch() 方法，或在每个 .then() 方法中处处理错误来实现</li>
</ul>
<h2 id="promise链" tabindex="-1">Promise链 <a class="header-anchor" href="#promise链" aria-label="Permalink to &quot;Promise链&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li>每次调用 .then() 之后返回的都是一个全新的 Promise，此时又可以接着使用 .then() 方法,由此便形成了一条 Promise 链</li>
<li>在 .then() 中 使用了 return，那么 return 的值会被 Promise.resolve() 包装</li>
</ul>
<h2 id="promise-构造函数执行和-then-函数执行有什么区别" tabindex="-1">Promise 构造函数执行和 then 函数执行有什么区别 <a class="header-anchor" href="#promise-构造函数执行和-then-函数执行有什么区别" aria-label="Permalink to &quot;Promise 构造函数执行和 then 函数执行有什么区别&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li>构造 Promise 时，构造函数内部的代码是立即执行的（同步）</li>
<li>.then() 在  Promise 对象的状态变为 resolved 时执行（异步）</li>
</ul>
<div class="tip custom-block"><p class="custom-block-title">TIP</p>
<p>.then() 中的回调函数会被放入微任务队列中，等待 JavaScript 引擎空闲时执行</p>
</div>
]]></content:encoded>
        </item>
    </channel>
</rss>