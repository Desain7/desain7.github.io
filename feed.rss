<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Desain &amp;&amp; Blog</title>
        <link>https://desain7.top</link>
        <description>要从那时起，不再动摇（前端相关技术分享）</description>
        <lastBuildDate>Tue, 12 Mar 2024 08:24:47 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>zh-cn</language>
        <image>
            <title>Desain &amp;&amp; Blog</title>
            <url>http://oss.desain7.top/pic94500053.jpg</url>
            <link>https://desain7.top</link>
        </image>
        <copyright>Copyright (c) 2022-present, Desain</copyright>
        <item>
            <title><![CDATA[手写发布订阅模式]]></title>
            <link>https://desain7.top/coding/js/手写发布订阅模式.html</link>
            <guid>https://desain7.top/coding/js/手写发布订阅模式.html</guid>
            <pubDate>Sun, 10 Mar 2024 16:00:00 GMT</pubDate>
            <description><![CDATA[ 什么是发布订阅模式？
发布-订阅模式是一种对象间一对多的依赖关系。当一个对象的状态发生改变时，所有依赖于它的对象都将得到状态改变的通知。
- 订阅者（Subscriber）把自己想订阅的事件注册（S]]></description>
            <content:encoded><![CDATA[<h1 id="手写发布订阅模式" tabindex="-1">手写发布订阅模式 <a class="header-anchor" href="#手写发布订阅模式" aria-label="Permalink to &quot;手写发布订阅模式&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="什么是发布订阅模式" tabindex="-1">什么是发布订阅模式？ <a class="header-anchor" href="#什么是发布订阅模式" aria-label="Permalink to &quot;什么是发布订阅模式？&quot;">&ZeroWidthSpace;</a></h2>
<p>发布-订阅模式是一种对象间一对多的依赖关系。当一个对象的状态发生改变时，所有依赖于它的对象都将得到状态改变的通知。</p>
<ul>
<li><strong>订阅者</strong>（Subscriber）把自己想订阅的事件<strong>注册</strong>（Subscribe）到调度中心（Event Channel）;</li>
<li>当<strong>发布者</strong>（Publisher）<strong>发布</strong>该事件（Publish Event）到调度中心，也就是该事件触发时，由调度中心统一调度（Fire Event）订阅者注册到调度中心的处理代码。</li>
</ul>
<h2 id="发布订阅模式的实现" tabindex="-1">发布订阅模式的实现 <a class="header-anchor" href="#发布订阅模式的实现" aria-label="Permalink to &quot;发布订阅模式的实现&quot;">&ZeroWidthSpace;</a></h2>
<ol>
<li>首先创建一个调度中心的类及它的构造器</li>
</ol>
<p>使用对象作为事件容器，当同一个事件存在多个订阅者时，使用数组存放。</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">class</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">EventCenter</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #C792EA">constructor</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 事件容器，用于存放事件数组</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">events</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{};</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><ol start="2">
<li>添加订阅事件方法</li>
</ol>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// 订阅事件</span></span>
<span class="line"><span style="color: #82AAFF">on</span><span style="color: #A6ACCD">(type</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> callback) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 创建数组容器</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">!this.</span><span style="color: #A6ACCD">events</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">type</span><span style="color: #F07178">]) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">events</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">type</span><span style="color: #F07178">] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> [</span><span style="color: #A6ACCD">callback</span><span style="color: #F07178">]</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 向数组容器中添加事件</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">events</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">type</span><span style="color: #F07178">]</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">callback</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><ol start="3">
<li>添加事件触发方法</li>
</ol>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// 触发事件</span></span>
<span class="line"><span style="color: #82AAFF">emit</span><span style="color: #A6ACCD">(type</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">...</span><span style="color: #A6ACCD">args) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 判断是否存在事件</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #89DDFF">!this.</span><span style="color: #A6ACCD">events</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">type</span><span style="color: #F07178">]) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 依次触发事件</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">events</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">type</span><span style="color: #F07178">]</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">forEach</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">cb</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">cb</span><span style="color: #F07178">(</span><span style="color: #89DDFF">...</span><span style="color: #A6ACCD">args</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><ol start="4">
<li>添加取消订阅方法</li>
</ol>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// 取消订阅</span></span>
<span class="line"><span style="color: #82AAFF">off</span><span style="color: #A6ACCD">(type</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> callback) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #89DDFF">!this.</span><span style="color: #A6ACCD">events</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">type</span><span style="color: #F07178">]) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">callback</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">events</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">name</span><span style="color: #F07178">]</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">filter</span><span style="color: #F07178">(</span><span style="color: #A6ACCD; font-style: italic">cb</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">cb</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!==</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">callback</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 不指定回调函数时，删除所有订阅</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">delete</span><span style="color: #F07178"> </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">events</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">name</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[怎么解决跨域问题？]]></title>
            <link>https://desain7.top/frontend/exp/怎么解决跨域问题？.html</link>
            <guid>https://desain7.top/frontend/exp/怎么解决跨域问题？.html</guid>
            <pubDate>Wed, 06 Mar 2024 16:00:00 GMT</pubDate>
            <description><![CDATA[ 什么是跨域？
一个网页向另一个不同域名/不同协议/不同端口的网页请求资源，这就是跨域。
跨域产生的原因：出于安全考虑，浏览器实施了同源策略。在当前域名请求网站中，默认不允许通过 ajax 请求发送到]]></description>
            <content:encoded><![CDATA[<h1 id="怎么解决跨域问题" tabindex="-1">怎么解决跨域问题？ <a class="header-anchor" href="#怎么解决跨域问题" aria-label="Permalink to &quot;怎么解决跨域问题？&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="什么是跨域" tabindex="-1">什么是跨域？ <a class="header-anchor" href="#什么是跨域" aria-label="Permalink to &quot;什么是跨域？&quot;">&ZeroWidthSpace;</a></h2>
<p>一个网页向另一个不同域名/不同协议/不同端口的网页请求资源，这就是跨域。</p>
<p>跨域产生的原因：出于安全考虑，浏览器实施了同源策略。在当前域名请求网站中，默认不允许通过 ajax 请求发送到其他域名。<em>违背同源策略就是跨域</em></p>
<h2 id="同源策略" tabindex="-1">同源策略 <a class="header-anchor" href="#同源策略" aria-label="Permalink to &quot;同源策略&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="什么是同源策略" tabindex="-1">什么是同源策略 <a class="header-anchor" href="#什么是同源策略" aria-label="Permalink to &quot;什么是同源策略&quot;">&ZeroWidthSpace;</a></h3>
<p>同源策略是由 Netscape 提出的一个著名的安全策略，现在所有支持 JavaScript 的浏览器都会使用这个策略。</p>
<p>同源策略要求网页只能从同一个域名（协议、域名、端口号都相同）加载资源，而不能直接访问其他域名下的资源。</p>
<h3 id="为什么要使用同源策略" tabindex="-1">为什么要使用同源策略 <a class="header-anchor" href="#为什么要使用同源策略" aria-label="Permalink to &quot;为什么要使用同源策略&quot;">&ZeroWidthSpace;</a></h3>
<p>同源策略的目的是防止恶意网站通过脚本等方式获取用户的敏感信息或进行其他恶意操作。</p>
<p>如果没有同源策略限制，恶意网站就可以通过跨域请求攻击其他网站，窃取用户的信息。</p>
<p>如果网页之间不满足同源要求，将不能:</p>
<ol>
<li>共享Cookie、LocalStorage、IndexDB</li>
<li>获取DOM</li>
<li>AJAX请求不能发送</li>
</ol>
<h2 id="跨域的解决方案" tabindex="-1">跨域的解决方案 <a class="header-anchor" href="#跨域的解决方案" aria-label="Permalink to &quot;跨域的解决方案&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="cors-跨域资源共享" tabindex="-1">CORS（跨域资源共享） <a class="header-anchor" href="#cors-跨域资源共享" aria-label="Permalink to &quot;CORS（跨域资源共享）&quot;">&ZeroWidthSpace;</a></h3>
<p>CORS（Cross-Origin Resource Sharing），跨域资源共享。CORS 是官方的跨域解决方案，它的特点是不需要在客户端做任何特殊的操作，完全在服务器中进行处理，支持 get 和 post 请求。</p>
<p>跨域资源共享标准新增了一组 HTTP 首部字段，允许服务器声明哪些源站通过浏览器有权限访问哪些资源。</p>
<p><strong>怎么使用 CORS：</strong> CORS 通过设置一个响应头来告诉浏览器，该请求允许跨域，浏览器收到该响应以后就会对响应放行。</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// 代码示例</span></span>
<span class="line"><span style="color: #A6ACCD">app</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">all</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">/cors-server</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">request</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">response</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">//设置响应头</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">//响应首部中可以携带一个 Access-Control-Allow-Origin 字段，表示允许哪些源站访问</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">response</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">setHeader</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">Access-Control-Allow-Origin</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">*</span><span style="color: #89DDFF">&quot;</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// response.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;http://127.0.0.1:5500&quot;);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">//Access-Control-Allow-Headers 首部字段用于预检请求的响应。其指明了实际请求中允许携带的首部字</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">response</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">setHeader</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">Access-Control-Allow-Headers</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">*</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">//Access-Control-Allow-Methods 首部字段用于预检请求的响应。其指明了实际请求所允许使用的 HTTP</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">response</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">setHeader</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">Access-Control-Allow-Method</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">*</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">response</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">send</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">hello CORS</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span></code></pre>
</div><p><strong>以下是具体的一些字段：</strong></p>
<ol>
<li>Access-Control-Allow-Origin</li>
</ol>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #A6ACCD">Access</span><span style="color: #89DDFF">-</span><span style="color: #A6ACCD">Control</span><span style="color: #89DDFF">-</span><span style="color: #A6ACCD">Allow</span><span style="color: #89DDFF">-</span><span style="color: #FFCB6B">Origin</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">origin</span><span style="color: #89DDFF">&gt;</span><span style="color: #A6ACCD"> | *</span></span></code></pre>
</div><p>origin 参数的值指定了允许访问该资源的外域 URI。对于不需要携带身份凭证的请求，服务器可以指定该字段的值为通配符，表示允许来自所有域的请求。</p>
<ol start="2">
<li>Access-Control-Allow-Headers</li>
</ol>
<p>Access-Control-Allow-Headers 指明了实际请求中允许携带的首部字段。</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #A6ACCD">Access</span><span style="color: #89DDFF">-</span><span style="color: #A6ACCD">Control</span><span style="color: #89DDFF">-</span><span style="color: #A6ACCD">Allow</span><span style="color: #89DDFF">-</span><span style="color: #FFCB6B">Headers</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #FFCB6B">field-name</span><span style="color: #89DDFF">&gt;</span><span style="color: #A6ACCD">[, </span><span style="color: #89DDFF">&lt;</span><span style="color: #FFCB6B">field-name</span><span style="color: #89DDFF">&gt;</span><span style="color: #A6ACCD">]*</span></span></code></pre>
</div><ol start="3">
<li>Access-Control-Allow-Methods</li>
</ol>
<p>Access-Control-Allow-Methods 指明了实际请求所允许使用的 HTTP 方法。</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #A6ACCD">Access</span><span style="color: #89DDFF">-</span><span style="color: #A6ACCD">Control</span><span style="color: #89DDFF">-</span><span style="color: #A6ACCD">Allow</span><span style="color: #89DDFF">-</span><span style="color: #FFCB6B">Methods</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">method</span><span style="color: #89DDFF">&gt;</span><span style="color: #A6ACCD">[, </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">method</span><span style="color: #89DDFF">&gt;</span><span style="color: #A6ACCD">]*</span></span></code></pre>
</div><h3 id="jsonp" tabindex="-1">JSONP <a class="header-anchor" href="#jsonp" aria-label="Permalink to &quot;JSONP&quot;">&ZeroWidthSpace;</a></h3>
<p><strong>JSONP 是什么？</strong></p>
<p>JSONP(JSON with Padding)，是一个非官方的跨域解决方案，纯粹凭借程序员的聪明才智开发出来，只支持 get 请求。</p>
<p><strong>JSONP 是怎么工作的？</strong></p>
<p>在网页有一些标签天生具有跨域能力，比如：img link iframe script。</p>
<p>JSONP 就是利用 script 标签的跨域能力来发送请求的。</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// 1. 动态的创建一个 script 标签------------------------------------------------------------</span></span>
<span class="line"><span style="color: #C792EA">var</span><span style="color: #A6ACCD"> script </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> document</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">createElement</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">script</span><span style="color: #89DDFF">&quot;</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">//2. 设置 script 的 src， 设置回调函数</span></span>
<span class="line"><span style="color: #A6ACCD">script</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">src </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">http://localhost:3000/testAJAX?callback=abc</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">abc</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">data</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #82AAFF">alert</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">data</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">name</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">};</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 3. 将 script 添加到 body 中</span></span>
<span class="line"><span style="color: #A6ACCD">document</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">body</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">appendChild</span><span style="color: #A6ACCD">(script)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 4. 服务器中路由的处理------------------------------------------------------</span></span>
<span class="line"><span style="color: #A6ACCD">router</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">get</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">/testAJAX</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">req</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">res</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">收到请求</span><span style="color: #89DDFF">&quot;</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">var</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">callback</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">req</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">query</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">callback</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">var</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">obj</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    ame</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">孙悟空</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">    age</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #F78C6C">18</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">res</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">send</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">callback</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">JSON</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">stringify</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">obj</span><span style="color: #F07178">) </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">)</span><span style="color: #89DDFF">&quot;</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span></code></pre>
</div><p>Axios 中的实现：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">$http </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> axios</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">$http</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">jsonp</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">http://www.domain2.com:8080/login</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #F07178">params</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{},</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #F07178">jsonp</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">handleCallback</span><span style="color: #89DDFF">&#39;</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">res</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">res</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span></span></code></pre>
</div><p><strong>JSONP的缺点：</strong></p>
<ul>
<li>具有局限性， 仅支持get方法</li>
<li>不安全，可能会遭受XSS攻击</li>
</ul>
<h3 id="nginx-反向代理" tabindex="-1">nginx 反向代理 <a class="header-anchor" href="#nginx-反向代理" aria-label="Permalink to &quot;nginx 反向代理&quot;">&ZeroWidthSpace;</a></h3>
<p>同源策略仅是针对浏览器的安全策略。服务器端调用 HTTP 接口只是使用 HTTP 协议，不需要同源策略，也就不存在跨域问题。</p>
<p>**实现思路：**通过 Nginx 配置一个代理服务器域名与 domain1 相同，端口不同）做跳板机，反向代理访问 domain2 接口，并且可以顺便修改 cookie 中 domain 信息，方便当前域 cookie 写入，实现跨域访问。</p>
<p>nginx 具体配置：</p>
<div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #A6ACCD">#proxy服务器</span></span>
<span class="line"><span style="color: #A6ACCD">server {</span></span>
<span class="line"><span style="color: #A6ACCD">    listen       81;</span></span>
<span class="line"><span style="color: #A6ACCD">    server_name  www.domain1.com;</span></span>
<span class="line"><span style="color: #A6ACCD">    location / {</span></span>
<span class="line"><span style="color: #A6ACCD">        proxy_pass   http://www.domain2.com:8080;  #反向代理</span></span>
<span class="line"><span style="color: #A6ACCD">        proxy_cookie_domain www.domain2.com www.domain1.com; #修改cookie里域名</span></span>
<span class="line"><span style="color: #A6ACCD">        index  index.html index.htm;</span></span>
<span class="line"><span style="color: #A6ACCD">        # 当用webpack-dev-server等中间件代理接口访问nignx时，此时无浏览器参与，故没有同源限制，下面的跨域配置可不启用</span></span>
<span class="line"><span style="color: #A6ACCD">        add_header Access-Control-Allow-Origin http://www.domain1.com;  #当前端只跨域不带cookie时，可为*</span></span>
<span class="line"><span style="color: #A6ACCD">        add_header Access-Control-Allow-Credentials true;</span></span>
<span class="line"><span style="color: #A6ACCD">    }</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
</div><h3 id="待更新" tabindex="-1">待更新... <a class="header-anchor" href="#待更新" aria-label="Permalink to &quot;待更新...&quot;">&ZeroWidthSpace;</a></h3>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[HTTP 的数据传输方式有哪些？]]></title>
            <link>https://desain7.top/interview/计算机网络/HTTP 的数据传输方式有哪些？.html</link>
            <guid>https://desain7.top/interview/计算机网络/HTTP 的数据传输方式有哪些？.html</guid>
            <pubDate>Tue, 05 Mar 2024 16:00:00 GMT</pubDate>
            <description><![CDATA[对前端来说，后端主要通过提供 http 接口来传输数据，而数据传输的方式主要有 5 种：
- url param
- query
- form-urlencoded
- form-data
- jso]]></description>
            <content:encoded><![CDATA[<h1 id="http-的数据传输方式有哪些" tabindex="-1">HTTP 的数据传输方式有哪些？ <a class="header-anchor" href="#http-的数据传输方式有哪些" aria-label="Permalink to &quot;HTTP 的数据传输方式有哪些？&quot;">&ZeroWidthSpace;</a></h1>
<p>对前端来说，后端主要通过提供 http 接口来传输数据，而数据传输的方式主要有 5 种：</p>
<ul>
<li>url param</li>
<li>query</li>
<li>form-urlencoded</li>
<li>form-data</li>
<li>json</li>
</ul>
<h2 id="url-param" tabindex="-1">url param <a class="header-anchor" href="#url-param" aria-label="Permalink to &quot;url param&quot;">&ZeroWidthSpace;</a></h2>
<p>url param 是 url 中的参数，它是通过 URL 中的参数来传输数据的。</p>
<p>我们可以把参数写在 url 中，比如：</p>
<div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #A6ACCD">http://baidu.com/person/abc</span></span></code></pre>
</div><p>这里的 abc 就是路径中的参数（url param），服务端框架或单页应用的路由都支持从 url 中取出参数。</p>
<h2 id="query" tabindex="-1">query <a class="header-anchor" href="#query" aria-label="Permalink to &quot;query&quot;">&ZeroWidthSpace;</a></h2>
<p>通过 url 中 ？后面用 &amp; 分隔的字符串传递数据。比如：</p>
<div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #A6ACCD">http://baidu.com/person?name=abc&amp;age=20</span></span></code></pre>
</div><p>这里的 name 和 age 就是 query 传递的数据。</p>
<p>其中非英文的字符和一些特殊字符要经过编码，可以使用  encodeURIComponent 的 api 来编码：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> query </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">?name=</span><span style="color: #89DDFF">&quot;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">+</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">encodeURIComponent</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">abc</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD">) </span><span style="color: #89DDFF">+</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">&amp;age=</span><span style="color: #89DDFF">&quot;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">+</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">encodeURIComponent</span><span style="color: #A6ACCD">(</span><span style="color: #F78C6C">20</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">// ?name=%E5%85%89&amp;age=20</span></span></code></pre>
</div><p>或使用 querystring 的 api 来编码：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> query </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> querystring</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">stringify</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">name</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">abc</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">age</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">20</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">// ?name=%E5%85%89&amp;age=20</span></span></code></pre>
</div><h2 id="form-urlencoded" tabindex="-1">form-urlencoded <a class="header-anchor" href="#form-urlencoded" aria-label="Permalink to &quot;form-urlencoded&quot;">&ZeroWidthSpace;</a></h2>
<p>直接用 form 表单提交数据就是这种，它和 query 字符串的方式的区别只是放在了 body 里，然后指定了 content-type 是 <code>application/x-www-form-urlencoded</code>。</p>
<p>因为内容也是 query 字符串，所以也要用 encodeURIComponent 的 api 或 query-string 库处理下。</p>
<p>这种格式也很容易理解，get 是把数据拼成 query 字符串放在 url 后面，于是表单的 post 提交方式的时候就直接用相同的方式把数据放在了 body 里。</p>
<p>通过 &amp; 分隔的 form-urlencoded 的方式需要对内容做 url encode，如果传递大量的数据，比如上传文件的时候就不是很合适了，因为文件 encode 一遍的话太慢了，这时候就可以用 form-data。</p>
<h2 id="form-data" tabindex="-1">form-data <a class="header-anchor" href="#form-data" aria-label="Permalink to &quot;form-data&quot;">&ZeroWidthSpace;</a></h2>
<p>form data 不再是通过 &amp; 分隔数据，而是用 --------- + 一串数字做为 boundary 分隔符。因为不是 url 的方式了，自然也不用再做 url encode 了。</p>
<p>form-data 需要指定 content type 为 multipart/form-data，然后指定 boundary 也就是分割线。</p>
<p>body 里面就是用 boundary 分隔符分割的内容。</p>
<p>很明显，这种方式适合传输文件，而且可以传输多个文件。</p>
<p>但是毕竟多了一些只是用来分隔的 boundary，所以请求体会增大。</p>
<h2 id="json" tabindex="-1">json <a class="header-anchor" href="#json" aria-label="Permalink to &quot;json&quot;">&ZeroWidthSpace;</a></h2>
<p>form-urlencoded 需要对内容做 url encode，而 form data 则需要加很长的 boundary，两种方式都有一些缺点。如果只是传输 json 数据的话，不需要用这两种。</p>
<p>可以直接指定content type 为 application/json 就行，我们平时传输 json 数据基本用的是这种。</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[$nextTick 的实现原理]]></title>
            <link>https://desain7.top/frontend/vue/$nextTick 的实现原理.html</link>
            <guid>https://desain7.top/frontend/vue/$nextTick 的实现原理.html</guid>
            <pubDate>Wed, 14 Feb 2024 16:00:00 GMT</pubDate>
            <description><![CDATA[ nextTick 的使用
在 Vue 3 中，`nextTick` 是一个全局方法，用于在下一次 DOM 更新循环结束之后执行延迟回调函数。
它的作用是在当前代码块的同步代码执行完毕后，进行一些异步]]></description>
            <content:encoded><![CDATA[<h1 id="nexttick-的实现原理" tabindex="-1">$nextTick 的实现原理 <a class="header-anchor" href="#nexttick-的实现原理" aria-label="Permalink to &quot;$nextTick 的实现原理&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="nexttick-的使用" tabindex="-1">nextTick 的使用 <a class="header-anchor" href="#nexttick-的使用" aria-label="Permalink to &quot;nextTick 的使用&quot;">&ZeroWidthSpace;</a></h2>
<p>在 Vue 3 中，<code>nextTick</code> 是一个全局方法，用于在下一次 DOM 更新循环结束之后执行延迟回调函数。</p>
<p>它的作用是在当前代码块的同步代码执行完毕后，进行一些异步操作，以确保在更新DOM后执行某些操作。</p>
<p><strong>nextTick 的应用场景包括：</strong></p>
<ul>
<li>异步更新 DOM 后执行操作：当需要在 Vue 实例更新了 DOM 后执行一些操作时，可以使用 nextTick。这能确保在下一次 DOM 更新循环结束后执行回调，以便操作可以正确地应用于更新后的DOM。</li>
<li>异步更新后的数据获取： 某些数据需要等待页面 DOM 更新后才能够获取到，如果直接获取会得到错误的结果。此时就可以使用 nextTick ，在页面 DOM 更新后再获取数据。</li>
</ul>
<p><strong>代码示例:</strong></p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// 在Vue组件中的方法中使用nextTick</span></span>
<span class="line"><span style="color: #FFCB6B">methods</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #82AAFF">exampleMethod</span><span style="color: #F07178">() </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 修改数据</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">message</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">Updated Message</span><span style="color: #89DDFF">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 在下一次DOM更新后执行回调</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">this.</span><span style="color: #82AAFF">$nextTick</span><span style="color: #F07178">(</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// 更新后的DOM操作</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">updatedElement</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">document</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getElementById</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">my-element</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// 执行其他操作</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>在上面的例子中，当 exampleMethod 被调用时，它会先更新 message 的值，然后在下一次 DOM 更新后执行 nextTick 的回调函数。</p>
<p>在回调函数中，就可以获得最新的数据并执行相关的 DOM 操作或其他操作。</p>
<h2 id="nexttick-原理及作用" tabindex="-1">nextTick 原理及作用 <a class="header-anchor" href="#nexttick-原理及作用" aria-label="Permalink to &quot;nextTick 原理及作用&quot;">&ZeroWidthSpace;</a></h2>
<p>Vue 中的 nextTick 本质是对 JavaScript 执行原理 EventLoop 的一种应用。</p>
<p>nextTick 的核心是利用如 Promise 、MutationObserver、setImmediate、setTimeout 的原生 JavaScript 方法来模拟对应的微/宏任务的实现，本质是为了利用 JavaScript 的这些异步回调任务队列来实现 Vue 框架中自己的异步回调队列。</p>
<p>nextTick 不仅是 Vue 内部的异步队列的调用方法，同时也允许开发者在实际项目中使用这个方法来满足实际应用中对 DOM 更新数据时机的后续逻辑处理。</p>
<p><strong>为什么要引入异步更新队列机制？</strong></p>
<ul>
<li>
<p>当需要多次对一个或多个元素赋值时，如果是同步更新，会频繁触发 UI/DOM 的渲染，影响性能。而异步更新可以收集所有的变动，最后再更新页面，能减少一些无用渲染。</p>
</li>
<li>
<p>对于 Vue 内部来说，由于 VirtualDOM 的引入，每一次状态发生变化后，状态变化的信号会发送给组件，组件内部使用 VirtualDOM 进行计算得出需要更新的具体的 DOM 节点，然后对 DOM 进行更新操作。同步更新会使每次更新状态后的渲染过程需要更多的计算，导致性能浪费。</p>
</li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[vue 中的响应式原理]]></title>
            <link>https://desain7.top/frontend/vue/Vue 中的响应式原理.html</link>
            <guid>https://desain7.top/frontend/vue/Vue 中的响应式原理.html</guid>
            <pubDate>Mon, 18 Dec 2023 16:00:00 GMT</pubDate>
            <description><![CDATA[ 什么是响应式原理？
在 Vue 中，你可以通过声明式的方式将数据绑定到视图上，当数据发生变化时，Vue 会自动追踪这些变化，并更新相关的视图部分，从而保持数据和视图之间的同步。
从广义上简单来讲，响]]></description>
            <content:encoded><![CDATA[<h1 id="vue-中的响应式原理" tabindex="-1">Vue 中的响应式原理 <a class="header-anchor" href="#vue-中的响应式原理" aria-label="Permalink to &quot;Vue 中的响应式原理&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="什么是响应式原理" tabindex="-1">什么是响应式原理？ <a class="header-anchor" href="#什么是响应式原理" aria-label="Permalink to &quot;什么是响应式原理？&quot;">&ZeroWidthSpace;</a></h2>
<p>在 Vue 中，你可以通过声明式的方式将数据绑定到视图上，当数据发生变化时，Vue 会自动追踪这些变化，并更新相关的视图部分，从而保持数据和视图之间的同步。</p>
<p>从广义上简单来讲，响应式原理就是当数据发生变化后，所有依赖该数据的部分均会响应它的变化，也发生变化（一般是重新执行函数或方法）。</p>
<h2 id="为什么-vue-需要响应式" tabindex="-1">为什么 Vue 需要响应式？ <a class="header-anchor" href="#为什么-vue-需要响应式" aria-label="Permalink to &quot;为什么 Vue 需要响应式？&quot;">&ZeroWidthSpace;</a></h2>
<p>响应式是 Vue 的核心特性之一，它让开发者能够以声明式的方式编写代码，而不必手动去处理视图和数据之间的同步。</p>
<p>这样的设计让开发者能够更专注于业务逻辑，提高开发效率。</p>
<p>在传统的 Web 开发中，我们通常需要手动更新 DOM 元素来反映数据的变化。</p>
<p>这种方式需要编写大量的操作 DOM 的代码，不仅繁琐且容易出错。而 Vue 中的响应式能够自动追踪数据的变化并更新视图，大大简化了开发过程。</p>
<h2 id="响应式能带来什么好处" tabindex="-1">响应式能带来什么好处？ <a class="header-anchor" href="#响应式能带来什么好处" aria-label="Permalink to &quot;响应式能带来什么好处？&quot;">&ZeroWidthSpace;</a></h2>
<ol>
<li>
<p>简化开发：开发者只需要关注数据的变化，而不必手动操作 DOM 元素，从而减少了代码量和开发时间。</p>
</li>
<li>
<p>数据驱动视图：Vue 中的响应式让数据成为驱动视图的源头，数据的变化会自动反映在相关的视图上，保持了数据和视图的一致性。</p>
</li>
<li>
<p>高效更新：Vue 使用虚拟 DOM 和 diff 算法来高效地更新视图，只对变化的部分进行更新，提高了性能。</p>
</li>
<li>
<p>可维护性：响应式让代码更易于维护，因为数据和视图之间的关系更加清晰，修改需求时只需修改数据，而不必关心视图的改变。</p>
</li>
</ol>
<h2 id="vue-中的响应式是什么实现的-有哪些优缺点" tabindex="-1">Vue 中的响应式是什么实现的？有哪些优缺点？ <a class="header-anchor" href="#vue-中的响应式是什么实现的-有哪些优缺点" aria-label="Permalink to &quot;Vue 中的响应式是什么实现的？有哪些优缺点？&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="vue2" tabindex="-1">Vue2 <a class="header-anchor" href="#vue2" aria-label="Permalink to &quot;Vue2&quot;">&ZeroWidthSpace;</a></h3>
<p>在 Vue2 中，Vue 的响应式是通过使用 Object.defineProperty() 方法来实现的。在初始化一个 Vue 实例时，Vue 会递归地将数据对象的属性转换为 getter/setter，并在必要的时候为每个属性创建一个依赖收集器。这样，当属性被访问或修改时，会触发相应的 getter/setter，从而更新相关的视图。</p>
<p>优点：</p>
<ul>
<li>实现了数据和视图的自动同步，简化了开发流程。</li>
<li>数据的变化能够精确地追踪和更新视图，提高了性能。</li>
<li>适用于大部分应用场景，易于上手使用。</li>
</ul>
<p>缺点：</p>
<ul>
<li>对象新增或删除的属性以及数组的索引修改无法被监听，需要使用额外的方法来解决。</li>
<li>对于大量的数据变化，会有一定的性能损耗。</li>
<li>无法监听动态添加的属性。</li>
</ul>
<h3 id="vue3" tabindex="-1">Vue3 <a class="header-anchor" href="#vue3" aria-label="Permalink to &quot;Vue3&quot;">&ZeroWidthSpace;</a></h3>
<p>在 Vue3 中，Vue 的响应式机制发生了重大变化，主要引入了 Proxy 对象来替代了 Object.defineProperty()。</p>
<p>Vue3 中的响应式机制基于 Proxy 对象，它能够拦截对对象的各种操作，包括属性的读取、修改、删除等。当对被代理的对象进行操作时，会触发相应的拦截器函数，从而实现对数据的追踪和更新。</p>
<p>优点：</p>
<ul>
<li>更好的性能：Proxy 对象相比 Object.defineProperty() 在大量数据变化时性能更好。</li>
<li>支持数组变化的监听：Vue3 中可以直接监听数组的变化，无需使用额外的方法。</li>
<li>更好的类型推导：使用 Proxy 对象可以更准确地推导出类型，提供更好的开发工具支持和类型检查。</li>
<li>更灵活的响应式能力：Vue3 中的响应式能力更加灵活，可以监听动态添加的属性和删除的属性。</li>
</ul>
<p>缺点：</p>
<ul>
<li>兼容性问题：Proxy 对象在一些旧版本的浏览器中不被支持。</li>
<li>学习曲线：相对于 Vue2 中的实现方式，使用 Proxy 对象的 Vue3 响应式机制可能需要一些额外的学习和适应。</li>
</ul>
<h2 id="响应式的缺点是什么" tabindex="-1">响应式的缺点是什么？ <a class="header-anchor" href="#响应式的缺点是什么" aria-label="Permalink to &quot;响应式的缺点是什么？&quot;">&ZeroWidthSpace;</a></h2>
<p>既然响应式有这么多优点，为什么现代框架没有 all in 响应式？</p>
<ul>
<li>
<p>性能开销： 实现响应式需要在运行时进行数据变化的追踪和更新，这会导致一定的性能开销。特别是在处理大量数据或频繁变化的情况下，使用响应式可能会导致性能下降。</p>
</li>
<li>
<p>复杂性和难以调试： 响应式系统涉及到许多内部的追踪和更新机制，对于开发者来说，理解和调试这些内部工作可能会有一定的复杂性。当出现问题时，追踪问题的根源可能会比较困难。</p>
</li>
<li>
<p>兼容性问题： 响应式的实现方式可能在一些旧版本浏览器或特定环境中存在兼容性问题。特别是在使用 Proxy 对象的情况下，一些旧版浏览器可能不支持，限制了响应式的适用范围。</p>
</li>
<li>
<p>不适用于特定场景： 响应式在大多数应用场景下都非常有效，但在某些特定场景下可能不太适用。例如，对于一些需要更细粒度控制和定制化的 UI 或需要高度手动控制 DOM 的情况，响应式可能不是最佳选择。</p>
</li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[ref 和 reactive 有什么区别？]]></title>
            <link>https://desain7.top/frontend/vue/ref和reactive有什么区别？.html</link>
            <guid>https://desain7.top/frontend/vue/ref和reactive有什么区别？.html</guid>
            <pubDate>Sun, 10 Dec 2023 16:00:00 GMT</pubDate>
            <description><![CDATA[语法上：
- ref 接受一个初始值作为参数，并返回一个包装了响应式数据的引用对象。
- reactive 接受一个普通对象作为参数，并返回一个响应式代理对象。
ref 主要用于包装基本类型数据，而 ]]></description>
            <content:encoded><![CDATA[<h1 id="ref-和-reactive-有什么区别" tabindex="-1">ref 和 reactive 有什么区别？ <a class="header-anchor" href="#ref-和-reactive-有什么区别" aria-label="Permalink to &quot;ref 和 reactive 有什么区别？&quot;">&ZeroWidthSpace;</a></h1>
<p><strong>语法上：</strong></p>
<ul>
<li>ref 接受一个初始值作为参数，并返回一个包装了响应式数据的引用对象。</li>
<li>reactive 接受一个普通对象作为参数，并返回一个响应式代理对象。</li>
</ul>
<p>ref 主要用于包装基本类型数据，而 reactive 用于包装对象类型数据。</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// ref</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> count </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">ref</span><span style="color: #A6ACCD">(</span><span style="color: #F78C6C">0</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #A6ACCD">(count</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">value) </span><span style="color: #676E95; font-style: italic">// 0</span></span>
<span class="line"><span style="color: #A6ACCD">​</span></span>
<span class="line"><span style="color: #A6ACCD">count</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">value</span><span style="color: #89DDFF">++</span></span>
<span class="line"><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #A6ACCD">(count</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">value) </span><span style="color: #676E95; font-style: italic">// 1</span></span>
<span class="line"></span>
<span class="line"><span style="color: #676E95; font-style: italic">// reactive</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> obj </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">reactive</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">count</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">0</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">obj</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">count</span><span style="color: #89DDFF">++</span></span></code></pre>
</div><p><strong>实现上：</strong></p>
<ul>
<li>ref</li>
</ul>
<ol>
<li>ref 使用了一个名为 RefImpl 的类来表示响应式数据。这个类内部有一个 _value 属性，用于保存具体的值。</li>
</ol>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">class</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">RefImpl</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #C792EA">constructor</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">value</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">_value</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">value</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #C792EA">get</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">value</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 在读取值时，触发依赖收集，追踪该响应式数据的依赖关系</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">track</span><span style="color: #F07178">(</span><span style="color: #89DDFF">this,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">TrackOpTypes</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">GET</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">value</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">_value</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #C792EA">set</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">value</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">newValue</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 在修改值时，更新内部的值，并触发依赖更新</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">_value</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newValue</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">trigger</span><span style="color: #F07178">(</span><span style="color: #89DDFF">this,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">TriggerOpTypes</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">SET</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">value</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newValue</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><ol start="2">
<li>通过调用 ref 函数创建的响应式引用对象实际上是 RefImpl 类的实例，其 _value 属性保存传入的初始值。</li>
<li>当访问响应式引用对象的值时，实际上是访问了 _value 属性。而当修改值时，会更新 _value 属性，并触发依赖更新。</li>
</ol>
<ul>
<li>reactive</li>
</ul>
<ol>
<li>reactive 使用了 Vue 3 的 Proxy 和 Reflect 特性来创建响应式代理对象。</li>
<li>当调用 reactive 函数时，会将传入的普通对象转换为响应式代理对象。这个代理对象会拦截对对象属性的访问和修改操作，并触发依赖更新。</li>
<li>在代理对象的内部，Proxy 通过 get 拦截器来监听对属性的访问操作，set 拦截器来监听对属性的修改操作，并通过 Reflect 来实际读取和写入属性值。</li>
</ol>
<p><strong>使用上：</strong></p>
<ul>
<li>
<p>ref 返回的响应式数据在 JS 中使用需要加上 .value 才能访问其值，在视图中使用会自动脱 ref，不需要 .value。</p>
</li>
<li>
<p>ref 同样可以接收对象或数组等非原始值，但内部依然是使用 reactive 实现响应式。</p>
</li>
<li>
<p>reactive 内部如果接收的是一个 Ref 对象会自动脱 ref。</p>
</li>
<li>
<p>使用展开运算符(...)展开 reactive 返回的响应式对象会使其失去响应性，可以结合 toRefs() 将值转换为Ref对象之后再展开。</p>
</li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Vue 中有哪些性能优化？]]></title>
            <link>https://desain7.top/frontend/vue/vue中有哪些性能优化？.html</link>
            <guid>https://desain7.top/frontend/vue/vue中有哪些性能优化？.html</guid>
            <pubDate>Wed, 06 Dec 2023 16:00:00 GMT</pubDate>
            <description><![CDATA[ 路由懒加载
路由懒加载是通过动态导入（Dynamic Import）实现的，它可以帮助优化应用程序的性能。
路由懒加载的原理是延迟加载（懒加载）路由组件，只在需要时才进行加载，以减少初始加载时间和资]]></description>
            <content:encoded><![CDATA[<h1 id="vue-中有哪些性能优化" tabindex="-1">Vue 中有哪些性能优化？ <a class="header-anchor" href="#vue-中有哪些性能优化" aria-label="Permalink to &quot;Vue 中有哪些性能优化？&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="路由懒加载" tabindex="-1">路由懒加载 <a class="header-anchor" href="#路由懒加载" aria-label="Permalink to &quot;路由懒加载&quot;">&ZeroWidthSpace;</a></h2>
<p>路由懒加载是通过动态导入（Dynamic Import）实现的，它可以帮助优化应用程序的性能。</p>
<p>路由懒加载的原理是延迟加载（懒加载）路由组件，只在需要时才进行加载，以减少初始加载时间和资源负担。</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> router </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">createRouter</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">routes</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> [</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #676E95; font-style: italic">// 借助webpack的import()实现异步组件</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">path</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">/foo</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">component</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">import</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">./Foo.vue</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD">) </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #A6ACCD">  ]</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span></span></code></pre>
</div><p><strong>路由懒加载的工作原理：</strong></p>
<ol>
<li>动态导入：在路由配置中，使用import()函数来异步加载路由组件。这样可以将路由组件的加载推迟到需要时才进行，而不是在初始加载时一次性加载所有组件。</li>
<li>以路由组件为单位的懒加载：每个路由都被拆分为独立的组件，只有用户导航到某个路由时，对应的组件才会被下载和执行。</li>
<li>代码分包：在打包构建的过程中，Vue 会将每个异步加载的路由组件划分为单独的代码块，每个页面只加载当前页面所需的代码块，以减少初始加载时间和资源负担。</li>
<li>组件缓存：在路由懒加载的过程中，组件实例会被缓存，以便在路由切换时重用，避免重复加载组件。</li>
</ol>
<h2 id="页面-组件缓存" tabindex="-1">页面/组件缓存 <a class="header-anchor" href="#页面-组件缓存" aria-label="Permalink to &quot;页面/组件缓存&quot;">&ZeroWidthSpace;</a></h2>
<p>在Vue中，使用 <code>&lt;keep-alive&gt;</code> 组件可以实现页面缓存，即在组件被销毁后保留其状态和内容，以便下次重新加载时能够快速恢复(从缓存中获取)。</p>
<p>用法：<code>&lt;keep-alive&gt;</code>通常与 <code>&lt;component&gt;</code> 或 <code>&lt;router-view&gt;</code> 组件一起使用。</p>
<div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">router-view</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">v-slot</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">{ Component }</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">&gt;</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">keep-alive</span><span style="color: #89DDFF">&gt;</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">component</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">:is</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">Component</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">&gt;&lt;/</span><span style="color: #F07178">component</span><span style="color: #89DDFF">&gt;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">keep-alive</span><span style="color: #89DDFF">&gt;</span></span>
<span class="line"><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">router-view</span><span style="color: #89DDFF">&gt;</span></span></code></pre>
</div><p><strong><code>&lt;keep-alive&gt;</code> 的工作原理</strong></p>
<ol>
<li>缓存组件：将需要缓存的组件包裹在 <code>&lt;keep-alive&gt;</code> 标签内。</li>
<li>组件生命周期改变：当组件被包裹在 <code>&lt;keep-alive&gt;</code> 中时，它们的生命周期钩子函数会有所变化。正常情况下，组件的 created、mounted 和 destroyed 等钩子函数会在组件的创建、挂载和销毁时触发。但是在 <code>&lt;keep-alive&gt;</code> 中，被缓存的组件的 mounted 和 destroyed 钩子函数不会被触发，而是会触发 activated 和 deactivated 钩子函数。</li>
<li>缓存和恢复：当组件被缓存时，其状态和内容将被保留在内存中，而不会被销毁。当离开该组件并再次进入时，组件将从缓存中恢复，而不会重新创建和初始化。这样可以避免重新渲染和重新加载组件所需的数据，提高页面的加载速度和性能。</li>
<li>切换缓存策略：在 <code>&lt;keep-alive&gt;</code> 组件上可以设置不同的属性，以控制缓存的行为。</li>
</ol>
<p>常用的属性包括：</p>
<ul>
<li>include：指定需要缓存的组件名称或匹配模式。</li>
<li>exclude：指定不需要缓存的组件名称或匹配模式。</li>
<li>max：指定最大缓存的组件实例数量。当超过该数量时，较早的组件实例将被销毁。</li>
</ul>
<h2 id="复用-dom" tabindex="-1">复用 DOM <a class="header-anchor" href="#复用-dom" aria-label="Permalink to &quot;复用 DOM&quot;">&ZeroWidthSpace;</a></h2>
<p>使用 v-show 实现 DOM 的复用，避免重复创建组件。</p>
<div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">template</span><span style="color: #89DDFF">&gt;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">div</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">class</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">cell</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">&gt;</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #676E95; font-style: italic">&lt;!-- 这种情况用v-show复用DOM，比v-if效果好 --&gt;</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">div</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">v-show</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">value</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">class</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">on</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">&gt;</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">Heavy</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">:n</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">10000</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">/&gt;</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">div</span><span style="color: #89DDFF">&gt;</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">section</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">v-show</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">!value</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">class</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">off</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">&gt;</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">Heavy</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">:n</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">10000</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">/&gt;</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">section</span><span style="color: #89DDFF">&gt;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">div</span><span style="color: #89DDFF">&gt;</span></span>
<span class="line"><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">template</span><span style="color: #89DDFF">&gt;</span></span></code></pre>
</div><h2 id="v-once-v-memo" tabindex="-1">v-once/v-memo <a class="header-anchor" href="#v-once-v-memo" aria-label="Permalink to &quot;v-once/v-memo&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li>对于不再变化的数据，使用 v-once 避免重复渲染。</li>
</ul>
<div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">&lt;!-- single element --&gt;</span></span>
<span class="line"><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">span</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">v-once</span><span style="color: #89DDFF">&gt;</span><span style="color: #A6ACCD">This will never change: {{msg}}</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">span</span><span style="color: #89DDFF">&gt;</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">&lt;!-- the element have children --&gt;</span></span>
<span class="line"><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">div</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">v-once</span><span style="color: #89DDFF">&gt;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">h1</span><span style="color: #89DDFF">&gt;</span><span style="color: #A6ACCD">comment</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">h1</span><span style="color: #89DDFF">&gt;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">p</span><span style="color: #89DDFF">&gt;</span><span style="color: #A6ACCD">{{msg}}</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">p</span><span style="color: #89DDFF">&gt;</span></span>
<span class="line"><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">div</span><span style="color: #89DDFF">&gt;</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">&lt;!-- component --&gt;</span></span>
<span class="line"><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">my-component</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">v-once</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">:comment</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">msg</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">&gt;&lt;/</span><span style="color: #F07178">my-component</span><span style="color: #89DDFF">&gt;</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">&lt;!-- `v-for` directive --&gt;</span></span>
<span class="line"><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">ul</span><span style="color: #89DDFF">&gt;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">li</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">v-for</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">i in list</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">v-once</span><span style="color: #89DDFF">&gt;</span><span style="color: #A6ACCD">{{i}}</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">li</span><span style="color: #89DDFF">&gt;</span></span>
<span class="line"><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">ul</span><span style="color: #89DDFF">&gt;</span></span></code></pre>
</div><ul>
<li>需要按条件跳过更新时，使用 v-memo</li>
</ul>
<div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">div</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">v-for</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">item in list</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">:key</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">item.id</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">v-memo</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">[item.id === selected]</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">&gt;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">p</span><span style="color: #89DDFF">&gt;</span><span style="color: #A6ACCD">ID: {{ item.id }} - selected: {{ item.id === selected }}</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">p</span><span style="color: #89DDFF">&gt;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">p</span><span style="color: #89DDFF">&gt;</span><span style="color: #A6ACCD">...more child nodes</span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">p</span><span style="color: #89DDFF">&gt;</span></span>
<span class="line"><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">div</span><span style="color: #89DDFF">&gt;</span></span></code></pre>
</div><h2 id="及时销毁事件及定时器" tabindex="-1">及时销毁事件及定时器 <a class="header-anchor" href="#及时销毁事件及定时器" aria-label="Permalink to &quot;及时销毁事件及定时器&quot;">&ZeroWidthSpace;</a></h2>
<p>在 Vue 组件销毁时，调用相应的生命周期钩子，解绑它的全部指令及事件监听器，但是仅限于组件本身的事件。</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #89DDFF; font-style: italic">export</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">default</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">created</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">timer</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">setInterval</span><span style="color: #F07178">(</span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">refresh</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #F78C6C">2000</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">},</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">beforeUnmount</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">clearInterval</span><span style="color: #F07178">(</span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">timer</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="按需引入第三方插件" tabindex="-1">按需引入第三方插件 <a class="header-anchor" href="#按需引入第三方插件" aria-label="Permalink to &quot;按需引入第三方插件&quot;">&ZeroWidthSpace;</a></h2>
<p>像 ant-design、element-plus 这样的第三方组件库可以按需引入避免体积太大。</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #89DDFF; font-style: italic">import</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">createApp</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">from</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">vue</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF; font-style: italic">import</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">Button</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">Select</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">from</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">element-plus</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">​</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> app </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">createApp</span><span style="color: #A6ACCD">()</span></span>
<span class="line"><span style="color: #A6ACCD">app</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">use</span><span style="color: #A6ACCD">(Button)</span></span>
<span class="line"><span style="color: #A6ACCD">app</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">use</span><span style="color: #A6ACCD">(Select)</span></span></code></pre>
</div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[v-for 和 v-if 能一起使用吗？]]></title>
            <link>https://desain7.top/frontend/vue/v-for 和 v-if 能一起使用吗？.html</link>
            <guid>https://desain7.top/frontend/vue/v-for 和 v-if 能一起使用吗？.html</guid>
            <pubDate>Tue, 05 Dec 2023 16:00:00 GMT</pubDate>
            <description><![CDATA[结论：v-for 和 v-if 不能一起使用
 原因
在 Vue2 中，v-for 的 优先级高于 v-if，而 Vue3 中 v-if 的 优先级高于 v-for。
Vue2 时期，由于 v-for]]></description>
            <content:encoded><![CDATA[<h1 id="v-for-和-v-if-能一起使用吗" tabindex="-1">v-for 和 v-if 能一起使用吗？ <a class="header-anchor" href="#v-for-和-v-if-能一起使用吗" aria-label="Permalink to &quot;v-for 和 v-if 能一起使用吗？&quot;">&ZeroWidthSpace;</a></h1>
<p>结论：<strong>v-for 和 v-if 不能一起使用</strong></p>
<h2 id="原因" tabindex="-1">原因 <a class="header-anchor" href="#原因" aria-label="Permalink to &quot;原因&quot;">&ZeroWidthSpace;</a></h2>
<p>在 Vue2 中，v-for 的 优先级高于 v-if，而 Vue3 中 v-if 的 优先级高于 v-for。</p>
<p>Vue2 时期，由于 v-for 的 优先级高于 v-if 所以会先执行循环再判断条件。哪怕只有其中的一部分元素需要渲染，也会在重新渲染的时候去遍历整个列表，此时就会造成性能的浪费。</p>
<p>而到了 Vue3 中，v-if 的优先级高于 v-for，当 v-if 执行时，他调用的变量还不存在，就会导致异常。</p>
<h2 id="源码" tabindex="-1">源码 <a class="header-anchor" href="#源码" aria-label="Permalink to &quot;源码&quot;">&ZeroWidthSpace;</a></h2>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">genNode</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">node</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">CodegenNode</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">|</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">symbol</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">|</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">string</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">context</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">CodegenContext</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #82AAFF">isString</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">node</span><span style="color: #F07178">)) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">context</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">node</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #82AAFF">isSymbol</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">node</span><span style="color: #F07178">)) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">context</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">context</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">helper</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">node</span><span style="color: #F07178">))</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">switch</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">node</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">type</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">case</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">NodeTypes</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">ELEMENT</span><span style="color: #89DDFF">:</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">case</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">NodeTypes</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">IF</span><span style="color: #89DDFF">:</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">case</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">NodeTypes</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">FOR</span><span style="color: #89DDFF">:</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">__DEV__</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&amp;&amp;</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #82AAFF">assert</span><span style="color: #F07178">(</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #A6ACCD">node</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">codegenNode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">null,</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #89DDFF">`</span><span style="color: #C3E88D">Codegen node is missing for element/if/for node. </span><span style="color: #89DDFF">`</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #89DDFF">`</span><span style="color: #C3E88D">Apply appropriate transforms first.</span><span style="color: #89DDFF">`</span></span>
<span class="line"><span style="color: #F07178">        )</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">genNode</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">node</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">codegenNode</span><span style="color: #89DDFF">!,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">context</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">break</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">...</span></span></code></pre>
</div><p>可以看到，在 Vue3 中，生成代码时，v-if 的优先级高于 v-for。</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #89DDFF; font-style: italic">export</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">genElement</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">el</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">ASTElement</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">state</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">CodegenState</span><span style="color: #89DDFF">):</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">string</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">el</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">parent</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">el</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">pre</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">el</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">pre</span><span style="color: #F07178"> </span><span style="color: #89DDFF">||</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">el</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">parent</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">pre</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">el</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">staticRoot</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">el</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">staticProcessed</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #82AAFF">genStatic</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">el</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">state</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">el</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">once</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">el</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">onceProcessed</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #82AAFF">genOnce</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">el</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">state</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">el</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">for</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">el</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">forProcessed</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #82AAFF">genFor</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">el</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">state</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">el</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">if</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">el</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">ifProcessed</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #82AAFF">genIf</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">el</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">state</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">el</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">tag</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">template</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">el</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">slotTarget</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">state</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">pre</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #82AAFF">genChildren</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">el</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">state</span><span style="color: #F07178">) </span><span style="color: #89DDFF">||</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">void 0</span><span style="color: #89DDFF">&#39;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">el</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">tag</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">slot</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #82AAFF">genSlot</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">el</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">state</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">...</span></span></code></pre>
</div><p>Vue2 中，v-for 的优先级高于 v-if。</p>
<h2 id="同时使用" tabindex="-1">同时使用 <a class="header-anchor" href="#同时使用" aria-label="Permalink to &quot;同时使用&quot;">&ZeroWidthSpace;</a></h2>
<p>在 Vue3 中，当二者同时使用时，渲染函数如下：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #A6ACCD">ƒ </span><span style="color: #82AAFF">anonymous</span><span style="color: #A6ACCD">(</span></span>
<span class="line"><span style="color: #A6ACCD">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF; font-style: italic">with</span><span style="color: #F07178">(</span><span style="color: #89DDFF">this</span><span style="color: #F07178">)</span><span style="color: #89DDFF">{</span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #82AAFF">_c</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">div</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,{</span><span style="color: #F07178">attrs</span><span style="color: #89DDFF">:{</span><span style="color: #89DDFF">&quot;</span><span style="color: #F07178">id</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">:</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">app</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">}},</span><span style="color: #82AAFF">_l</span><span style="color: #F07178">((</span><span style="color: #A6ACCD">items</span><span style="color: #F07178">)</span><span style="color: #89DDFF">,</span><span style="color: #C792EA">function</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">item</span><span style="color: #89DDFF">){</span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">item</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">isActive</span><span style="color: #F07178">)</span><span style="color: #89DDFF">?</span><span style="color: #82AAFF">_c</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">div</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,{</span><span style="color: #F07178">key</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD">item</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">id</span><span style="color: #89DDFF">},</span><span style="color: #F07178">[</span><span style="color: #82AAFF">_v</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #A6ACCD">\n</span><span style="color: #C3E88D">      </span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">+</span><span style="color: #82AAFF">_s</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">item</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">name</span><span style="color: #F07178">)</span><span style="color: #89DDFF">+</span><span style="color: #89DDFF">&quot;</span><span style="color: #A6ACCD">\n</span><span style="color: #C3E88D">    </span><span style="color: #89DDFF">&quot;</span><span style="color: #F07178">)])</span><span style="color: #89DDFF">:</span><span style="color: #82AAFF">_e</span><span style="color: #F07178">()</span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">,</span><span style="color: #F78C6C">0</span><span style="color: #F07178">)</span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>由于 v-if 的优先级高于 v-for，会先进行 v-if 的判断，也即会先获取 item.isActive，此时并未执行 v-for，所以将会报错。</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[css 手写题]]></title>
            <link>https://desain7.top/coding/css/css 手写题.html</link>
            <guid>https://desain7.top/coding/css/css 手写题.html</guid>
            <pubDate>Tue, 07 Nov 2023 16:00:00 GMT</pubDate>
            <description><![CDATA[ 选择器选择到第1第2个div，倒数第1倒数第2个div
使用选择器去选择 div 中的 div,不知道内层有多少个 div，尽可能多种方法实现，让选择器选择到第 1、第 2 个div，倒数第 1、倒]]></description>
            <content:encoded><![CDATA[<h1 id="css-手写题" tabindex="-1">css 手写题 <a class="header-anchor" href="#css-手写题" aria-label="Permalink to &quot;css 手写题&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="选择器选择到第1第2个div-倒数第1倒数第2个div" tabindex="-1">选择器选择到第1第2个div，倒数第1倒数第2个div <a class="header-anchor" href="#选择器选择到第1第2个div-倒数第1倒数第2个div" aria-label="Permalink to &quot;选择器选择到第1第2个div，倒数第1倒数第2个div&quot;">&ZeroWidthSpace;</a></h2>
<p>使用选择器去选择 div 中的 div,不知道内层有多少个 div，尽可能多种方法实现，让选择器选择到第 1、第 2 个div，倒数第 1、倒数第 2 个div</p>
<div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">div</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">class</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">container</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">&gt;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">div</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">class</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">cell</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">&gt;&lt;/</span><span style="color: #F07178">div</span><span style="color: #89DDFF">&gt;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">div</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">class</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">cell</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">&gt;&lt;/</span><span style="color: #F07178">div</span><span style="color: #89DDFF">&gt;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">div</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">class</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">cell</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">&gt;&lt;/</span><span style="color: #F07178">div</span><span style="color: #89DDFF">&gt;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">div</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">class</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">cell</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">&gt;&lt;/</span><span style="color: #F07178">div</span><span style="color: #89DDFF">&gt;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">div</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">class</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">cell</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">&gt;&lt;/</span><span style="color: #F07178">div</span><span style="color: #89DDFF">&gt;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">div</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">class</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">cell</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">&gt;&lt;/</span><span style="color: #F07178">div</span><span style="color: #89DDFF">&gt;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">div</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">class</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">cell</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">&gt;&lt;/</span><span style="color: #F07178">div</span><span style="color: #89DDFF">&gt;</span></span>
<span class="line"><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">div</span><span style="color: #89DDFF">&gt;</span></span></code></pre>
</div><h3 id="css-实现" tabindex="-1">CSS 实现 <a class="header-anchor" href="#css-实现" aria-label="Permalink to &quot;CSS 实现&quot;">&ZeroWidthSpace;</a></h3>
<div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">/*法一 :nth-child() */</span></span>
<span class="line"><span style="color: #89DDFF">.</span><span style="color: #FFCB6B">cell</span><span style="color: #89DDFF">:</span><span style="color: #C792EA">nth-child</span><span style="color: #89DDFF">(</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">),</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">.</span><span style="color: #FFCB6B">cell</span><span style="color: #89DDFF">:</span><span style="color: #C792EA">nth-child</span><span style="color: #89DDFF">(</span><span style="color: #F78C6C">2</span><span style="color: #89DDFF">),</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">.</span><span style="color: #FFCB6B">cell</span><span style="color: #89DDFF">:</span><span style="color: #C792EA">nth-last-child</span><span style="color: #89DDFF">(</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">),</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">.</span><span style="color: #FFCB6B">cell</span><span style="color: #89DDFF">:</span><span style="color: #C792EA">nth-last-child</span><span style="color: #89DDFF">(</span><span style="color: #F78C6C">2</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">background-color</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">#</span><span style="color: #A6ACCD">0af</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">/*法二 :nth-of-type() */</span></span>
<span class="line"><span style="color: #89DDFF">.</span><span style="color: #FFCB6B">cell</span><span style="color: #89DDFF">:</span><span style="color: #C792EA">nth-of-type</span><span style="color: #89DDFF">(</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">),</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">.</span><span style="color: #FFCB6B">cell</span><span style="color: #89DDFF">:</span><span style="color: #C792EA">nth-of-type</span><span style="color: #89DDFF">(</span><span style="color: #F78C6C">2</span><span style="color: #89DDFF">),</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">.</span><span style="color: #FFCB6B">cell</span><span style="color: #89DDFF">:</span><span style="color: #C792EA">nth-last-of-type</span><span style="color: #89DDFF">(</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">),</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">.</span><span style="color: #FFCB6B">cell</span><span style="color: #89DDFF">:</span><span style="color: #C792EA">nth-last-of-type</span><span style="color: #89DDFF">(</span><span style="color: #F78C6C">2</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">background-color</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">#</span><span style="color: #A6ACCD">bfa</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">.</span><span style="color: #FFCB6B">bg</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">background-color</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> pink</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">.</span><span style="color: #FFCB6B">cell</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">width</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">100px</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">height</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">100px</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">margin</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">10px</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">border</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">1px</span><span style="color: #A6ACCD"> solid black</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h3 id="js-实现" tabindex="-1">JS 实现 <a class="header-anchor" href="#js-实现" aria-label="Permalink to &quot;JS 实现&quot;">&ZeroWidthSpace;</a></h3>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// 法三: js 实现</span></span>
<span class="line"><span style="color: #C792EA">let</span><span style="color: #A6ACCD"> elements </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> document</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">querySelectorAll</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">.cell</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">elements[</span><span style="color: #F78C6C">0</span><span style="color: #A6ACCD">]</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">style</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">backgroundColor </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">pink</span><span style="color: #89DDFF">&#39;</span></span>
<span class="line"><span style="color: #A6ACCD">elements[</span><span style="color: #F78C6C">1</span><span style="color: #A6ACCD">]</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">style</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">backgroundColor </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">pink</span><span style="color: #89DDFF">&#39;</span></span>
<span class="line"><span style="color: #A6ACCD">elements[elements</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length </span><span style="color: #89DDFF">-</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">1</span><span style="color: #A6ACCD">]</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">style</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">backgroundColor </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">pink</span><span style="color: #89DDFF">&#39;</span></span>
<span class="line"><span style="color: #A6ACCD">elements[elements</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length  </span><span style="color: #89DDFF">-</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">2</span><span style="color: #A6ACCD">]</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">style</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">backgroundColor </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">pink</span><span style="color: #89DDFF">&#39;</span></span></code></pre>
</div><h2 id="宽高比-4-3-的长方形" tabindex="-1">宽高比 4:3 的长方形 <a class="header-anchor" href="#宽高比-4-3-的长方形" aria-label="Permalink to &quot;宽高比 4:3 的长方形&quot;">&ZeroWidthSpace;</a></h2>
<p>下面的div，需要长方形，宽高比是4：3，同时左右两边距离屏幕左右两边的间距都是50px。</p>
<div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">div</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">class</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">container</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">&gt;</span></span>
<span class="line"><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">div</span><span style="color: #89DDFF">&gt;</span></span></code></pre>
</div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[JS 常考手写题]]></title>
            <link>https://desain7.top/coding/js/JS常考手写题.html</link>
            <guid>https://desain7.top/coding/js/JS常考手写题.html</guid>
            <pubDate>Sat, 28 Oct 2023 16:00:00 GMT</pubDate>
            <description><![CDATA[ 产生一个不重复的随机数组
利用 Math.random() 生成随机数，hash 记录随机数
```js
/**
 *
 * @param {number} len 数组长度
 * @param {]]></description>
            <content:encoded><![CDATA[<h1 id="js-常考手写题" tabindex="-1">JS 常考手写题 <a class="header-anchor" href="#js-常考手写题" aria-label="Permalink to &quot;JS 常考手写题&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="产生一个不重复的随机数组" tabindex="-1">产生一个不重复的随机数组 <a class="header-anchor" href="#产生一个不重复的随机数组" aria-label="Permalink to &quot;产生一个不重复的随机数组&quot;">&ZeroWidthSpace;</a></h2>
<p>利用 Math.random() 生成随机数，hash 记录随机数</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">/**</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> *</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">number</span><span style="color: #89DDFF; font-style: italic">}</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">len</span><span style="color: #676E95; font-style: italic"> 数组长度</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">number</span><span style="color: #89DDFF; font-style: italic">}</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">min</span><span style="color: #676E95; font-style: italic"> 最小值</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">number</span><span style="color: #89DDFF; font-style: italic">}</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">max</span><span style="color: #676E95; font-style: italic"> 最大值</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">returns</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> */</span></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">getNumber</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">len</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">min</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">max</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">res</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> []</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">hash</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178"> (</span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">len</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">++</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">num</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">Math</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">floor</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">Math</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">random</span><span style="color: #F07178">() </span><span style="color: #89DDFF">*</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">max</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">min</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #F07178">))</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">while</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">hash</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">num</span><span style="color: #F07178">]) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">num</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">Math</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">floor</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">Math</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">random</span><span style="color: #F07178">() </span><span style="color: #89DDFF">*</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">max</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">min</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #F07178">))</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">hash</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">num</span><span style="color: #F07178">] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">true</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">res</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">num</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">res</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="递归实现-1-到-100-的累加" tabindex="-1">递归实现 1 到 100 的累加 <a class="header-anchor" href="#递归实现-1-到-100-的累加" aria-label="Permalink to &quot;递归实现 1 到 100 的累加&quot;">&ZeroWidthSpace;</a></h2>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">addNum</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">i</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #F07178">) </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #82AAFF">addNum</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #82AAFF">addNum</span><span style="color: #A6ACCD">(</span><span style="color: #F78C6C">100</span><span style="color: #A6ACCD">)</span></span></code></pre>
</div><h2 id="打印出-1-到-10000-以内的对称数" tabindex="-1">打印出 1 到 10000 以内的对称数 <a class="header-anchor" href="#打印出-1-到-10000-以内的对称数" aria-label="Permalink to &quot;打印出 1 到 10000 以内的对称数&quot;">&ZeroWidthSpace;</a></h2>
<p>利用字符串和数组的方法，判断反转前后的字符串是否相等。</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">dcNumber</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">min</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">max</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">res</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> []</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178"> (</span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">min</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">max</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">++</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">str</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">String</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">str</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">split</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;&#39;</span><span style="color: #F07178">)</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">reverse</span><span style="color: #F07178">()</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">join</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;&#39;</span><span style="color: #F07178">) </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">str</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">res</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">res</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="手写字符串的-indexof-方法" tabindex="-1">手写字符串的 IndexOf 方法 <a class="header-anchor" href="#手写字符串的-indexof-方法" aria-label="Permalink to &quot;手写字符串的 IndexOf 方法&quot;">&ZeroWidthSpace;</a></h2>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #FFCB6B">String</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">prototype</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">_indexOf</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">str</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">str</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">length</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">throw</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">Error</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">str is too long</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">firstChar</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">str</span><span style="color: #F07178">[</span><span style="color: #F78C6C">0</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178"> (</span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">length</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">++</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">left</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">this</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">] </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">firstChar</span><span style="color: #F07178"> </span><span style="color: #89DDFF">?</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">this.</span><span style="color: #82AAFF">substring</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">left</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">left</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">str</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #F07178">) </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">str</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">left</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F78C6C">1</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="请实现一个模块-math-支持链式调用math-add-2-4-minus-3-times-2" tabindex="-1">请实现一个模块 math，支持链式调用math.add(2,4).minus(3).times(2) <a class="header-anchor" href="#请实现一个模块-math-支持链式调用math-add-2-4-minus-3-times-2" aria-label="Permalink to &quot;请实现一个模块 math，支持链式调用math.add(2,4).minus(3).times(2)&quot;">&ZeroWidthSpace;</a></h2>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">class</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">Math</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #C792EA">constructor</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">initVal</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">val</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">initVal</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">add</span><span style="color: #89DDFF">(...</span><span style="color: #A6ACCD; font-style: italic">args</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">val</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">args</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">reduce</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">pre</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">cur</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">pre</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">cur</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">},</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">this</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">minus</span><span style="color: #89DDFF">(...</span><span style="color: #A6ACCD; font-style: italic">args</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">val</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">args</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">reduce</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">pre</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">cur</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">pre</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">cur</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">},</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">this</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">times</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">arg</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">val</span><span style="color: #F07178"> </span><span style="color: #89DDFF">*=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arg</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">this</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">getVal</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">val</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="手写用-proxy-实现-arr-1-的访问" tabindex="-1">手写用 Proxy 实现 arr[-1] 的访问 <a class="header-anchor" href="#手写用-proxy-实现-arr-1-的访问" aria-label="Permalink to &quot;手写用 Proxy 实现 arr[-1] 的访问&quot;">&ZeroWidthSpace;</a></h2>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> arr </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> [</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">2</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">3</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">4</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">5</span><span style="color: #A6ACCD">]</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> proxyArr </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">new</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">Proxy</span><span style="color: #A6ACCD">(arr</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">get</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">target</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">key</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// 由于默认情况下 key 都会被转换为字符串，所以需要进行一个转换</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">parseInt</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">target</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">target</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">key</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">target</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span></span></code></pre>
</div><h2 id="有一堆整数-请把他们分成三份-确保每一份和尽量相等" tabindex="-1">有一堆整数，请把他们分成三份，确保每一份和尽量相等 <a class="header-anchor" href="#有一堆整数-请把他们分成三份-确保每一份和尽量相等" aria-label="Permalink to &quot;有一堆整数，请把他们分成三份，确保每一份和尽量相等&quot;">&ZeroWidthSpace;</a></h2>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">sum</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">arr</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">res</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> [</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">{</span><span style="color: #F07178"> sum</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> arr</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> [] </span><span style="color: #89DDFF">},</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">{</span><span style="color: #F07178"> sum</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> arr</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> [] </span><span style="color: #89DDFF">},</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">{</span><span style="color: #F07178"> sum</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> arr</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> [] </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  ]</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">nums</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">sort</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">a</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">b</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">b</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">a</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">nums</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">forEach</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">i</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">add</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">res</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">sort</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">a</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">b</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">a</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">sum</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">b</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">sum</span><span style="color: #F07178">)[</span><span style="color: #F78C6C">0</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">add</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">sum</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">add</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">arr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">res</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="判断一个字符串是否为驼峰字符串-judge-bytedance-bd-true-judge-bytedance-bd-false" tabindex="-1">判断一个字符串是否为驼峰字符串， judge('ByteDance','BD') -&gt; true judge('Bytedance','BD') -&gt; false <a class="header-anchor" href="#判断一个字符串是否为驼峰字符串-judge-bytedance-bd-true-judge-bytedance-bd-false" aria-label="Permalink to &quot;判断一个字符串是否为驼峰字符串， judge('ByteDance','BD') -&gt; true judge('Bytedance','BD') -&gt; false&quot;">&ZeroWidthSpace;</a></h2>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> judge </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">str</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">jdg</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">j</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178"> (</span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">c</span><span style="color: #F07178"> </span><span style="color: #89DDFF">of</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">str</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">c</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">jdg</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">j</span><span style="color: #F07178">]) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">j</span><span style="color: #89DDFF">++</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">j</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">jdg</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">true</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">false</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="压缩字符串" tabindex="-1">压缩字符串 <a class="header-anchor" href="#压缩字符串" aria-label="Permalink to &quot;压缩字符串&quot;">&ZeroWidthSpace;</a></h2>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> minifyStr </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">str</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">res</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;&#39;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">cur</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">str</span><span style="color: #F07178">[</span><span style="color: #F78C6C">0</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">count</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">c</span><span style="color: #F07178"> </span><span style="color: #89DDFF">of</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">str</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">c</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!==</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">cur</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">res</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">`${</span><span style="color: #A6ACCD">cur</span><span style="color: #89DDFF">}${</span><span style="color: #A6ACCD">count</span><span style="color: #89DDFF">}`</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">cur</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">c</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">count</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">count</span><span style="color: #89DDFF">++</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">res</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">`${</span><span style="color: #A6ACCD">cur</span><span style="color: #89DDFF">}${</span><span style="color: #A6ACCD">count</span><span style="color: #89DDFF">}`</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">res</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="输入50a6we8y20x-输出50个a-6个we-8个y-20个x" tabindex="-1">输入50a6we8y20x 输出50个a，6个we，8个y，20个x <a class="header-anchor" href="#输入50a6we8y20x-输出50个a-6个we-8个y-20个x" aria-label="Permalink to &quot;输入50a6we8y20x 输出50个a，6个we，8个y，20个x&quot;">&ZeroWidthSpace;</a></h2>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">print</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">str</span><span style="color: #89DDFF">){</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #82AAFF">String</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">str</span><span style="color: #F07178">)</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">replace</span><span style="color: #F07178">(</span><span style="color: #89DDFF">/(</span><span style="color: #C3E88D">\d</span><span style="color: #89DDFF">+)([</span><span style="color: #C3E88D">a-zA-Z</span><span style="color: #89DDFF">]+)/</span><span style="color: #F78C6C">g</span><span style="color: #89DDFF">,</span><span style="color: #C792EA">function</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">_</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">number</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">string</span><span style="color: #89DDFF">){</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">string</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">repeat</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">number</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="用一行代码-将数组中的字符串和字符串对象-new-string-123-直接判定出来" tabindex="-1">用一行代码，将数组中的字符串和字符串对象(new String(123))直接判定出来 <a class="header-anchor" href="#用一行代码-将数组中的字符串和字符串对象-new-string-123-直接判定出来" aria-label="Permalink to &quot;用一行代码，将数组中的字符串和字符串对象(new String(123))直接判定出来&quot;">&ZeroWidthSpace;</a></h2>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> judge </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> arr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">filter</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">i</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">typeof</span><span style="color: #A6ACCD"> i </span><span style="color: #89DDFF">===</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">string</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">||</span><span style="color: #A6ACCD"> i </span><span style="color: #89DDFF">instanceof</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">String</span><span style="color: #A6ACCD">)</span></span></code></pre>
</div><h2 id="before" tabindex="-1">before <a class="header-anchor" href="#before" aria-label="Permalink to &quot;before&quot;">&ZeroWidthSpace;</a></h2>
<p>before(num,fn)接受两个参数，第一个参数是数字，第二个参数是函数，调用before函数num次数以内，返回与fn执行相同的结果，超过num次数返回最后一次fn的执行结果。</p>
<p>利用闭包保存当前调用次数和最后一次调用的结果。</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">before</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">num</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">fn</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">count</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">res</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">(...</span><span style="color: #A6ACCD; font-style: italic">args</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">count</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">num</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">res</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">fn</span><span style="color: #F07178">(</span><span style="color: #89DDFF">...</span><span style="color: #A6ACCD">args</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">count</span><span style="color: #89DDFF">++</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">res</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="将十进制数字转为二进制数字字符串" tabindex="-1">将十进制数字转为二进制数字字符串 <a class="header-anchor" href="#将十进制数字转为二进制数字字符串" aria-label="Permalink to &quot;将十进制数字转为二进制数字字符串&quot;">&ZeroWidthSpace;</a></h2>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// 内置方法</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> num </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">10</span></span>
<span class="line"><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #A6ACCD">(num</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">toString</span><span style="color: #A6ACCD">(</span><span style="color: #F78C6C">2</span><span style="color: #A6ACCD">))</span></span>
<span class="line"></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 位运算符手写</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> two </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">num</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">res</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;&#39;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">while</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">num</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">c</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">num</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&amp;</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #F07178"> </span><span style="color: #89DDFF">?</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #F07178"> </span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">res</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">c</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">num</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&gt;&gt;=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">res</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">split</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;&#39;</span><span style="color: #F07178">)</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">reverse</span><span style="color: #F07178">()</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">join</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;&#39;</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="使用多种方法构造一个包含-10-个-1-的数组" tabindex="-1">使用多种方法构造一个包含 10 个 1 的数组 <a class="header-anchor" href="#使用多种方法构造一个包含-10-个-1-的数组" aria-label="Permalink to &quot;使用多种方法构造一个包含 10 个 1 的数组&quot;">&ZeroWidthSpace;</a></h2>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// 字面量构造</span></span>
<span class="line"><span style="color: #C792EA">let</span><span style="color: #A6ACCD"> nums </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> [</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">1</span><span style="color: #A6ACCD">]</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 构造函数+填充数组</span></span>
<span class="line"><span style="color: #C792EA">let</span><span style="color: #A6ACCD"> nums </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">new</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">Array</span><span style="color: #A6ACCD">(</span><span style="color: #F78C6C">10</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">nums</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">fill</span><span style="color: #A6ACCD">(</span><span style="color: #F78C6C">1</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span><span style="color: #A6ACCD"> </span></span>
<span class="line"><span style="color: #676E95; font-style: italic">// ES6: Array.of(),将参数依次转化为数组项</span></span>
<span class="line"><span style="color: #C792EA">let</span><span style="color: #A6ACCD"> nums </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> Array</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">of</span><span style="color: #A6ACCD">(</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">1</span><span style="color: #A6ACCD">) </span></span>
<span class="line"><span style="color: #676E95; font-style: italic">// ES6: Array.from(),基于可迭代对象创建新数组</span></span>
<span class="line"><span style="color: #C792EA">let</span><span style="color: #A6ACCD"> str </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">1111111111</span><span style="color: #89DDFF">&#39;</span></span>
<span class="line"><span style="color: #C792EA">let</span><span style="color: #A6ACCD"> nums </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> Array</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">from</span><span style="color: #A6ACCD">(str</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">val</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">parseInt</span><span style="color: #A6ACCD">(val))</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">// for 循环</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> nums </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> []</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #A6ACCD">(</span><span style="color: #C792EA">let</span><span style="color: #A6ACCD"> i </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span><span style="color: #A6ACCD"> i </span><span style="color: #89DDFF">&lt;</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">10</span><span style="color: #89DDFF">;</span><span style="color: #A6ACCD"> i</span><span style="color: #89DDFF">++</span><span style="color: #A6ACCD">) arr2[i] </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">;</span></span></code></pre>
</div><h2 id="移除对象中的空属性" tabindex="-1">移除对象中的空属性 <a class="header-anchor" href="#移除对象中的空属性" aria-label="Permalink to &quot;移除对象中的空属性&quot;">&ZeroWidthSpace;</a></h2>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> obj </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">a</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">null,</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">b</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">哈哈哈</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">c</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">d</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">undefined</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #A6ACCD"> (</span><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> key </span><span style="color: #89DDFF">in</span><span style="color: #A6ACCD"> obj) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">obj</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">] </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;&#39;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">||</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">obj</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">] </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #89DDFF">null</span><span style="color: #F07178"> </span><span style="color: #89DDFF">||</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">obj</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">] </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #89DDFF">undefined</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">Reflect</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">deleteProperty</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">obj</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">key</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #A6ACCD">(obj)</span></span></code></pre>
</div><h2 id="寻找页面中出现次数最多的三个标签" tabindex="-1">寻找页面中出现次数最多的三个标签 <a class="header-anchor" href="#寻找页面中出现次数最多的三个标签" aria-label="Permalink to &quot;寻找页面中出现次数最多的三个标签&quot;">&ZeroWidthSpace;</a></h2>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> getTop3 </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 获取页面中所有元素</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">domList</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">Array</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">from</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">document</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">querySelectorAll</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">*</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">))</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 计数</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">domMap</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">Map</span><span style="color: #F07178">()</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">domList</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">forEach</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">dom</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">domMap</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">set</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">dom</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">tagName</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">domMap</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">get</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">dom</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">tagName</span><span style="color: #F07178">) </span><span style="color: #89DDFF">??</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #F07178">) </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 输出前三</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">Array</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">from</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">domMap</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">arr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">sort</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">a</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">b</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">b</span><span style="color: #F07178">[</span><span style="color: #F78C6C">1</span><span style="color: #F07178">] </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">a</span><span style="color: #F07178">[</span><span style="color: #F78C6C">1</span><span style="color: #F07178">])</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">slice</span><span style="color: #F07178">(</span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #F78C6C">3</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="解析-url-params-为对象-hot" tabindex="-1">解析 URL Params 为对象(hot) <a class="header-anchor" href="#解析-url-params-为对象-hot" aria-label="Permalink to &quot;解析 URL Params 为对象(hot)&quot;">&ZeroWidthSpace;</a></h2>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> url </span><span style="color: #89DDFF">=</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">https://translate.google.com.hk/?pli=1&amp;sl=en&amp;tl=zh-CN&amp;text=elint&amp;op=translate</span><span style="color: #89DDFF">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">getUrlParams</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">url</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">index</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">url</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">indexOf</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">?</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">params</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">url</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">slice</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">index</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">obj</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">params</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">split</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">&amp;</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">arr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">forEach</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">item</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #89DDFF">[</span><span style="color: #A6ACCD">key</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">val</span><span style="color: #89DDFF">]</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">item</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">split</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">=</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">decodeURIComponent</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">val</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">decodeURIComponent</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">val</span><span style="color: #F07178">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">obj</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">]) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">Array</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">isArray</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">obj</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">])) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #A6ACCD">obj</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">]</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">val</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #A6ACCD">obj</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> [</span><span style="color: #A6ACCD">obj</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">]</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">val</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">obj</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">val</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">obj</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="颜色生成" tabindex="-1">颜色生成 <a class="header-anchor" href="#颜色生成" aria-label="Permalink to &quot;颜色生成&quot;">&ZeroWidthSpace;</a></h2>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">color1</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">`</span><span style="color: #C3E88D">#</span><span style="color: #89DDFF">${</span><span style="color: #A6ACCD">Math</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">floor</span><span style="color: #A6ACCD">(Math</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">random</span><span style="color: #A6ACCD">() </span><span style="color: #89DDFF">*</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">0xffffff</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">toString</span><span style="color: #A6ACCD">(</span><span style="color: #F78C6C">16</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">slice</span><span style="color: #A6ACCD">(</span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">7</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">}`</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">color2</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">r</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">Math</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">floor</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">Math</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">random</span><span style="color: #F07178">() </span><span style="color: #89DDFF">*</span><span style="color: #F07178"> </span><span style="color: #F78C6C">256</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">g</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">Math</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">floor</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">Math</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">random</span><span style="color: #F07178">() </span><span style="color: #89DDFF">*</span><span style="color: #F07178"> </span><span style="color: #F78C6C">256</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">b</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">Math</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">floor</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">Math</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">random</span><span style="color: #F07178">() </span><span style="color: #89DDFF">*</span><span style="color: #F07178"> </span><span style="color: #F78C6C">256</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">`</span><span style="color: #C3E88D">rgb(</span><span style="color: #89DDFF">${</span><span style="color: #A6ACCD">r</span><span style="color: #89DDFF">}</span><span style="color: #C3E88D">, </span><span style="color: #89DDFF">${</span><span style="color: #A6ACCD">g</span><span style="color: #89DDFF">}</span><span style="color: #C3E88D">, </span><span style="color: #89DDFF">${</span><span style="color: #A6ACCD">b</span><span style="color: #89DDFF">}</span><span style="color: #C3E88D">)</span><span style="color: #89DDFF">`</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="判断a、b数组的包含关系-值和数量-a属于b返回1-b属于a返回2-两者相等返回0-其他返回-1" tabindex="-1">判断A、B数组的包含关系（值和数量），A属于B返回1，B属于A返回2，两者相等返回0，其他返回-1 <a class="header-anchor" href="#判断a、b数组的包含关系-值和数量-a属于b返回1-b属于a返回2-两者相等返回0-其他返回-1" aria-label="Permalink to &quot;判断A、B数组的包含关系（值和数量），A属于B返回1，B属于A返回2，两者相等返回0，其他返回-1&quot;">&ZeroWidthSpace;</a></h2>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">judge</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">arr1</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">arr2</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">str1</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr1</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">sort</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">a</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">b</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">a</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">b</span><span style="color: #F07178">)</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">join</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;&#39;</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">str2</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr2</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">sort</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">a</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">b</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">a</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">b</span><span style="color: #F07178">)</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">join</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;&#39;</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">str1</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">str2</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">str1</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">includes</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">str2</span><span style="color: #F07178">)) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #F78C6C">2</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">str2</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">includes</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">str1</span><span style="color: #F07178">)) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F78C6C">1</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="对象的合并" tabindex="-1">对象的合并 <a class="header-anchor" href="#对象的合并" aria-label="Permalink to &quot;对象的合并&quot;">&ZeroWidthSpace;</a></h2>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// 判断是否是对象</span></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">isObj</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">obj</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Object</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">prototype</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">toString</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">call</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">obj</span><span style="color: #F07178">) </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">[object Object]</span><span style="color: #89DDFF">&#39;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 合并对象</span></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">myAssign</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">obj1</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">obj2</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">res</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span><span style="color: #F07178"> </span><span style="color: #89DDFF">...</span><span style="color: #A6ACCD">obj1</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178"> (</span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">in</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">obj2</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #82AAFF">isObj</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">res</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">]) </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #F07178"> </span><span style="color: #82AAFF">isObj</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">obj2</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">])) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">res</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">myAssign</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">res</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">]</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">obj2</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">])</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">res</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">obj2</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">res</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="多行字符串转二维数组" tabindex="-1">多行字符串转二维数组 <a class="header-anchor" href="#多行字符串转二维数组" aria-label="Permalink to &quot;多行字符串转二维数组&quot;">&ZeroWidthSpace;</a></h2>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> str </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">`</span><span style="color: #C3E88D"> 1 21    3</span></span>
<span class="line"><span style="color: #C3E88D">4 5  6</span></span>
<span class="line"><span style="color: #C3E88D">7   8 9 </span><span style="color: #89DDFF">`</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">toArr</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">str</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">str</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">split</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD">\n</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">map</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">item</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">item</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">trim</span><span style="color: #F07178">()</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">split</span><span style="color: #F07178">(</span><span style="color: #89DDFF">/</span><span style="color: #C3E88D">\s</span><span style="color: #89DDFF">+/</span><span style="color: #F78C6C">g</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="数组合并" tabindex="-1">数组合并 <a class="header-anchor" href="#数组合并" aria-label="Permalink to &quot;数组合并&quot;">&ZeroWidthSpace;</a></h2>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> arr1 </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> [</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">A1</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">A2</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">B1</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">B2</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">C1</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">C2</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD">]</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> arr2 </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> [</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">A</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">B</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">C</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD">]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #676E95; font-style: italic">// Set 实现</span></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">mergeArr1</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">arr1</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">arr2</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> [</span><span style="color: #89DDFF">...new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">Set</span><span style="color: #F07178">([</span><span style="color: #89DDFF">...</span><span style="color: #A6ACCD">arr1</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #89DDFF">...</span><span style="color: #A6ACCD">arr2</span><span style="color: #F07178">])]</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">// Filter 实现</span></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">mergeArr2</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">arr1</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">arr2</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> [</span><span style="color: #89DDFF">...</span><span style="color: #A6ACCD">arr1</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #89DDFF">...</span><span style="color: #A6ACCD">arr2</span><span style="color: #F07178">]</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">filter</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">item</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">index</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">arr</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">indexOf</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">item</span><span style="color: #F07178">) </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">index</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">&ZeroWidthSpace;</a></h2>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> getType </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">target</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">typeof</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">target</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!==</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">object</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 基础数据类型直接返回</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">typeof</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">target</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 引用类型获取具体类型</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Object</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">prototype</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">toString</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">call</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">target</span><span style="color: #F07178">)</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">slice</span><span style="color: #F07178">(</span><span style="color: #F78C6C">8</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F78C6C">1</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Promise 周边场景题]]></title>
            <link>https://desain7.top/coding/js/Promise 周边场景题.html</link>
            <guid>https://desain7.top/coding/js/Promise 周边场景题.html</guid>
            <pubDate>Fri, 27 Oct 2023 16:00:00 GMT</pubDate>
            <description><![CDATA[ 使用 setInterval 实现 setTimeout
```js
const timer = setInterval(() =
  console.log('settimeout')
  cle]]></description>
            <content:encoded><![CDATA[<h1 id="promise-周边场景题" tabindex="-1">Promise 周边场景题 <a class="header-anchor" href="#promise-周边场景题" aria-label="Permalink to &quot;Promise 周边场景题&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="使用-setinterval-实现-settimeout" tabindex="-1">使用 setInterval 实现 setTimeout <a class="header-anchor" href="#使用-setinterval-实现-settimeout" aria-label="Permalink to &quot;使用 setInterval 实现 setTimeout&quot;">&ZeroWidthSpace;</a></h2>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> timer </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">setInterval</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">settimeout</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #82AAFF">clearInterval</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">timer</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">},</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">3000</span><span style="color: #A6ACCD">)</span></span></code></pre>
</div><h2 id="repeat-console-log-5-1000" tabindex="-1">repeat(console.log, 5, 1000); <a class="header-anchor" href="#repeat-console-log-5-1000" aria-label="Permalink to &quot;repeat(console.log, 5, 1000);&quot;">&ZeroWidthSpace;</a></h2>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> repeat </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">callback</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">timer</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">times</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">inter</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">setInterval</span><span style="color: #F07178">(</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">callback</span><span style="color: #F07178">()</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">times</span><span style="color: #89DDFF">--</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">times</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">clearInterval</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">inter</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">},</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">timer</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="封装一个工具函数输入一个promisea返回一个promiseb如果超过1s没返回则抛出异常如果正常则输出正确的值。" tabindex="-1">封装一个工具函数输入一个promiseA返回一个promiseB如果超过1s没返回则抛出异常如果正常则输出正确的值。 <a class="header-anchor" href="#封装一个工具函数输入一个promisea返回一个promiseb如果超过1s没返回则抛出异常如果正常则输出正确的值。" aria-label="Permalink to &quot;封装一个工具函数输入一个promiseA返回一个promiseB如果超过1s没返回则抛出异常如果正常则输出正确的值。&quot;">&ZeroWidthSpace;</a></h2>
<p>利用 Promise.race()</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">promiseUtils</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">promise</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Promise</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">race</span><span style="color: #F07178">([</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">promise</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Promise</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">resolve</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">reject</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">setTimeout</span><span style="color: #F07178">(</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #82AAFF">reject</span><span style="color: #F07178">(</span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">Error</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">timeout</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">))</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">},</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1000</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  ])</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="实现一个-sleep-函数" tabindex="-1">实现一个 sleep 函数 <a class="header-anchor" href="#实现一个-sleep-函数" aria-label="Permalink to &quot;实现一个 sleep 函数&quot;">&ZeroWidthSpace;</a></h2>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">sleep</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">time</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Promise</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">resolve</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">setTimeout</span><span style="color: #F07178">(</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #82AAFF">resolve</span><span style="color: #F07178">(</span><span style="color: #F78C6C">123</span><span style="color: #F07178">)</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">time</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="实现图片异步加载" tabindex="-1">实现图片异步加载 <a class="header-anchor" href="#实现图片异步加载" aria-label="Permalink to &quot;实现图片异步加载&quot;">&ZeroWidthSpace;</a></h2>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">asyncLoadImg</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">url</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Promise</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">resolve</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">reject</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 图片实例对象</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">img</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">Image</span><span style="color: #F07178">()</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 监听加载事件</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">img</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">onload</span><span style="color: #F07178">(</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">resolve</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">img</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 监听失败事件</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">img</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">onerror</span><span style="color: #F07178">(</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">reject</span><span style="color: #F07178">(</span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">Error</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">图片加载失败</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">))</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 加载图片</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">img</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">src</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">url</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="使用-promise-封装-ajax-请求" tabindex="-1">使用 Promise 封装 ajax 请求 <a class="header-anchor" href="#使用-promise-封装-ajax-请求" aria-label="Permalink to &quot;使用 Promise 封装 ajax 请求&quot;">&ZeroWidthSpace;</a></h2>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">ajaxPro</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">method</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">url</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Promise</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">resolve</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">reject</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 新建 xhr 实例</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">xhr</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">XMLHttpRequest</span><span style="color: #F07178">()</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">xhr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">open</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">method</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">url</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">xhr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">send</span><span style="color: #F07178">(</span><span style="color: #89DDFF">null</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">xhr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">onreadystatechange</span><span style="color: #F07178">(</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">xhr</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">readyState</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #F78C6C">4</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">xhr</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">status</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #F78C6C">200</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #82AAFF">resolve</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">xhr</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">response</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #82AAFF">reject</span><span style="color: #F07178">(</span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">Error</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">请求失败</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">))</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="依次发送三个网络请求-拿到服务器数据" tabindex="-1">依次发送三个网络请求，拿到服务器数据 <a class="header-anchor" href="#依次发送三个网络请求-拿到服务器数据" aria-label="Permalink to &quot;依次发送三个网络请求，拿到服务器数据&quot;">&ZeroWidthSpace;</a></h2>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">data1</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Promise</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">resolve</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">setTimeout</span><span style="color: #F07178">(</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">resolve</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">result1</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">},</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1000</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">data2</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Promise</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">resolve</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">setTimeout</span><span style="color: #F07178">(</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">resolve</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">result2</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">},</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1000</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">data3</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Promise</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">resolve</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">setTimeout</span><span style="color: #F07178">(</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">resolve</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">result3</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">},</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1000</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">async</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">sendRequest</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">r1</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">await</span><span style="color: #F07178"> </span><span style="color: #82AAFF">data1</span><span style="color: #F07178">()</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">r2</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">await</span><span style="color: #F07178"> </span><span style="color: #82AAFF">data2</span><span style="color: #F07178">()</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">r3</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">await</span><span style="color: #F07178"> </span><span style="color: #82AAFF">data3</span><span style="color: #F07178">()</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">r1</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">r2</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">r3</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="promise-中断请求" tabindex="-1">Promise 中断请求 <a class="header-anchor" href="#promise-中断请求" aria-label="Permalink to &quot;Promise 中断请求&quot;">&ZeroWidthSpace;</a></h2>
<p>promise 本身并没有提供中断请求的方法，可以通过一个标识变量来借助实现。</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">let</span><span style="color: #A6ACCD"> abort </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">false</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">sendRequest</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Promise</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">resolve</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">reject</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">abort</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">reject</span><span style="color: #F07178">()</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 发送异步请求</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">setTimeout</span><span style="color: #F07178">(</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">resolve</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">result</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">},</span><span style="color: #F07178"> </span><span style="color: #F78C6C">2000</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #82AAFF">setTimeout</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 中断请求</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">abort</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">true</span></span>
<span class="line"><span style="color: #89DDFF">},</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">1000</span><span style="color: #A6ACCD">)</span></span></code></pre>
</div><h2 id="给定一系列的api-测量上传速度-实现的时候用的get请求-并选择一个加载时间最短的api" tabindex="-1">给定一系列的api，测量上传速度（实现的时候用的GET请求）并选择一个加载时间最短的api <a class="header-anchor" href="#给定一系列的api-测量上传速度-实现的时候用的get请求-并选择一个加载时间最短的api" aria-label="Permalink to &quot;给定一系列的api，测量上传速度（实现的时候用的GET请求）并选择一个加载时间最短的api&quot;">&ZeroWidthSpace;</a></h2>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> sendRequest </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">url</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Promise</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">resolve</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">reject</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">fetch</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">url</span><span style="color: #F07178">)</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">res</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">resolve</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">url</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> getFastApi </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">async</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">apis</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">res</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">await</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Promise</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">race</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">apis</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">map</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">url</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #82AAFF">sendRequest</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">url</span><span style="color: #F07178">)))</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">res</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="settimeout-系统补偿时间-概念模糊" tabindex="-1">setTimeout 系统补偿时间（概念模糊） <a class="header-anchor" href="#settimeout-系统补偿时间-概念模糊" aria-label="Permalink to &quot;setTimeout 系统补偿时间（概念模糊）&quot;">&ZeroWidthSpace;</a></h2>
<h2 id="settimeout-准时-同上" tabindex="-1">setTimeout 准时（同上） <a class="header-anchor" href="#settimeout-准时-同上" aria-label="Permalink to &quot;setTimeout 准时（同上）&quot;">&ZeroWidthSpace;</a></h2>
<h2 id="promise-串行执行" tabindex="-1">Promise 串行执行 <a class="header-anchor" href="#promise-串行执行" aria-label="Permalink to &quot;Promise 串行执行&quot;">&ZeroWidthSpace;</a></h2>
<p>让多个 Promise 依据给定的顺序执行，只有前一个 Promise 执行完毕（settle），后一个才会执行。</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> delay </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">ms</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">new</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">Promise</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">resolve</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">setTimeout</span><span style="color: #A6ACCD">(resolve</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> ms))</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> promiseArr </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> [</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #82AAFF">delay</span><span style="color: #A6ACCD">(</span><span style="color: #F78C6C">2000</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">res1</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #82AAFF">delay</span><span style="color: #A6ACCD">(</span><span style="color: #F78C6C">1000</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">res2</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #82AAFF">delay</span><span style="color: #A6ACCD">(</span><span style="color: #F78C6C">3000</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">res3</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">]</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">/**</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * 串行执行，等待当前 promise 执行完毕后，再执行下一个</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> */</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> serialPromise </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">async</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178"> (</span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">promise</span><span style="color: #F07178"> </span><span style="color: #89DDFF">of</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">promiseArr</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">await</span><span style="color: #F07178"> </span><span style="color: #82AAFF">promise</span><span style="color: #F07178">()</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="设计一个简单的任务队列-要求分别在-1-3-4-秒后打印出-1-2-3" tabindex="-1">设计一个简单的任务队列，要求分别在 1,3,4 秒后打印出 &quot;1&quot;, &quot;2&quot;, &quot;3&quot; <a class="header-anchor" href="#设计一个简单的任务队列-要求分别在-1-3-4-秒后打印出-1-2-3" aria-label="Permalink to &quot;设计一个简单的任务队列，要求分别在 1,3,4 秒后打印出 &quot;1&quot;, &quot;2&quot;, &quot;3&quot;&quot;">&ZeroWidthSpace;</a></h2>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">Queue</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">queue</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> []</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">this.</span><span style="color: #82AAFF">add</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #C792EA">function</span><span style="color: #F07178"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">timer</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">callback</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">p</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Promise</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">resolve</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">reject</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #82AAFF">setTimeout</span><span style="color: #F07178">(</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #82AAFF">resolve</span><span style="color: #F07178">(</span><span style="color: #82AAFF">callback</span><span style="color: #F07178">())</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">},</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">timer</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">queue</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">p</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">this</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">this.</span><span style="color: #82AAFF">start</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #C792EA">async</span><span style="color: #F07178"> </span><span style="color: #C792EA">function</span><span style="color: #F07178"> </span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">while</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">queue</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">await</span><span style="color: #F07178"> </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">queue</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">shift</span><span style="color: #F07178">()()</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">res</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{}</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">new</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">Queue</span><span style="color: #A6ACCD">()</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">add</span><span style="color: #A6ACCD">(</span><span style="color: #F78C6C">1000</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #F78C6C">1</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">add</span><span style="color: #A6ACCD">(</span><span style="color: #F78C6C">2000</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #F78C6C">2</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">add</span><span style="color: #A6ACCD">(</span><span style="color: #F78C6C">1000</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #F78C6C">3</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">start</span><span style="color: #A6ACCD">()</span></span></code></pre>
</div><h2 id="每隔三秒输出时间" tabindex="-1">每隔三秒输出时间 <a class="header-anchor" href="#每隔三秒输出时间" aria-label="Permalink to &quot;每隔三秒输出时间&quot;">&ZeroWidthSpace;</a></h2>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> time </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Promise</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">resolve</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">reject</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">setTimeout</span><span style="color: #F07178">(</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">Date</span><span style="color: #F07178">())</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">resolve</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">time</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">},</span><span style="color: #F07178"> </span><span style="color: #F78C6C">3000</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> outputTime </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">async</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">await</span><span style="color: #F07178"> </span><span style="color: #82AAFF">time</span><span style="color: #F07178">()</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #82AAFF">outputTime</span><span style="color: #F07178">()</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #82AAFF">outputTime</span><span style="color: #A6ACCD">()</span></span></code></pre>
</div><h2 id="promise-retry" tabindex="-1">Promise.retry() <a class="header-anchor" href="#promise-retry" aria-label="Permalink to &quot;Promise.retry()&quot;">&ZeroWidthSpace;</a></h2>
<p>Promise.retry 超时重新请求，并在重试一定次数依然失败时输出缓存内容。</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">/**</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> *</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">*</span><span style="color: #89DDFF; font-style: italic">}</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">fn</span><span style="color: #676E95; font-style: italic"> 回调函数</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">*</span><span style="color: #89DDFF; font-style: italic">}</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">times</span><span style="color: #676E95; font-style: italic"> 重试次数</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">*</span><span style="color: #89DDFF; font-style: italic">}</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">timeout</span><span style="color: #676E95; font-style: italic"> 超时时间</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">*</span><span style="color: #89DDFF; font-style: italic">}</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">cache</span><span style="color: #676E95; font-style: italic"> 缓存内容</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> */</span></span>
<span class="line"><span style="color: #FFCB6B">Promise</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">retry</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">fn</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">times</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">timeout</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">cache</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">null)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Promise</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">resolve</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">reject</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">retry</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">fn</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">res</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #82AAFF">resolve</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">res</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">catch</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">reason</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">times</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&gt;</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #A6ACCD">times</span><span style="color: #89DDFF">--</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #82AAFF">setTimeout</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">retry</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">timeout</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #82AAFF">resolve</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">cache</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[JS 常考题]]></title>
            <link>https://desain7.top/coding/js/常考题.html</link>
            <guid>https://desain7.top/coding/js/常考题.html</guid>
            <pubDate>Thu, 26 Oct 2023 16:00:00 GMT</pubDate>
            <description><![CDATA[ 实现 Render 函数(JSON2DOM)
```js
const domObj = {
  tag: 'DIV',
  attrs:{
  id:'app'
  },
  children: []]></description>
            <content:encoded><![CDATA[<h1 id="js-常考题" tabindex="-1">JS 常考题 <a class="header-anchor" href="#js-常考题" aria-label="Permalink to &quot;JS 常考题&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="实现-render-函数-json2dom" tabindex="-1">实现 Render 函数(JSON2DOM) <a class="header-anchor" href="#实现-render-函数-json2dom" aria-label="Permalink to &quot;实现 Render 函数(JSON2DOM)&quot;">&ZeroWidthSpace;</a></h2>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> domObj </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">tag</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">DIV</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">attrs</span><span style="color: #89DDFF">:{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">id</span><span style="color: #89DDFF">:</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">app</span><span style="color: #89DDFF">&#39;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">},</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">children</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> [</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #F07178">tag</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">SPAN</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #F07178">children</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> [</span></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">tag</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">A</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">children</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> [] </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #A6ACCD">      ]</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #89DDFF">},</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #F07178">tag</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">SPAN</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #F07178">children</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> [</span></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">tag</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">A</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">children</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> [] </span><span style="color: #89DDFF">},</span></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">tag</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">A</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">children</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> [] </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #A6ACCD">      ]</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #A6ACCD">  ]</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 把上诉虚拟Dom转化成下方真实Dom</span></span>
<span class="line"><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">div</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">id</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">app</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">&gt;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">span</span><span style="color: #89DDFF">&gt;</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">a</span><span style="color: #89DDFF">&gt;&lt;/</span><span style="color: #F07178">a</span><span style="color: #89DDFF">&gt;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">span</span><span style="color: #89DDFF">&gt;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">span</span><span style="color: #89DDFF">&gt;</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">a</span><span style="color: #89DDFF">&gt;&lt;/</span><span style="color: #F07178">a</span><span style="color: #89DDFF">&gt;</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">a</span><span style="color: #89DDFF">&gt;&lt;/</span><span style="color: #F07178">a</span><span style="color: #89DDFF">&gt;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">span</span><span style="color: #89DDFF">&gt;</span></span>
<span class="line"><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">div</span><span style="color: #89DDFF">&gt;</span></span></code></pre>
</div><p><strong>Render 函数:</strong></p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> _render </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">vnode</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 数字转为文本类型</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">typeof</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">vnode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">number</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">vnode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">String</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">vnode</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 文本节点直接创建</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">typeof</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">vnode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">string</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">vnode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">document</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">createTextNode</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">vnode</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 创建 Dom 节点</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">dom</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">document</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">createElement</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">vnode</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 为 Dom 节点添加属性</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">vnode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">attrs</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">Object</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">keys</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">vnode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">attrs</span><span style="color: #F07178">)</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">forEach</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">key</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">val</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">vnode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">attrs</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">dom</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">setAttribute</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">key</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">val</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 递归遍历子节点</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">vnode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">children</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">forEach</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">child</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">childDom</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">_render</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">child</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">dom</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">appendChild</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">childDom</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">dom</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="树形结构转列表" tabindex="-1">树形结构转列表 <a class="header-anchor" href="#树形结构转列表" aria-label="Permalink to &quot;树形结构转列表&quot;">&ZeroWidthSpace;</a></h2>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> data </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> [</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #F07178">id</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #F07178">text</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">节点1</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #F07178">parentId</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #F07178">children</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> [</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #F07178">id</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">2</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #F07178">text</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">节点1_1</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #F07178">parentId</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">1</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #A6ACCD">    ]</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #A6ACCD">]</span></span></code></pre>
</div><p>将上面的属性结构转化成列表结构</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> treeToList </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">tree</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">res</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> []</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 递归遍历所有子节点</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">dfs</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">tree</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">tree</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">forEach</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">item</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">res</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">item</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">item</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">children</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #82AAFF">dfs</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">item</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">children</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">delete</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">item</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">children</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #82AAFF">dfs</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">tree</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">res</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="列表转树形结构" tabindex="-1">列表转树形结构 <a class="header-anchor" href="#列表转树形结构" aria-label="Permalink to &quot;列表转树形结构&quot;">&ZeroWidthSpace;</a></h2>
<p>将下面的列表转化为树形结构：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">let</span><span style="color: #A6ACCD"> arr </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> [</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">id</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">name</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">部门1</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">pid</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">0</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">},</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">id</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">2</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">name</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">部门2</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">pid</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">1</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">},</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">id</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">3</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">name</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">部门3</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">pid</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">1</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">},</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">id</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">4</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">name</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">部门4</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">pid</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">3</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">},</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">id</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">5</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">name</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">部门5</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">pid</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">4</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">},</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">id</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">6</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">name</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">部门6</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">pid</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">0</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">},</span></span>
<span class="line"><span style="color: #A6ACCD">]</span></span></code></pre>
</div><p><strong>解法一（时间复杂度：O(n2)）:</strong></p>
<p>双重 for 循环</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">get_tree_On2</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">arr</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">list</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> []</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 遍历所有节点</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">arr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">forEach</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">element</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 再次遍历所有节点，找到该节点的所有子节点</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">chiildren_arr</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">filter</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">ele</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">element</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">id</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">ele</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">pid</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">chiildren_arr</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&gt;</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">element</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">chiildren</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">chiildren_arr</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">element</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">pid</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">list</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">element</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">list</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><p><strong>解法二（时间复杂度：O(n)）:</strong></p>
<p>使用 hash 优化</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> get_tree_On </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">arr</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">list</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> []</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">hashmap</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178"> (</span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">++</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 存储每个 id 下的子元素</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">pid</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">id</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 用 hash 表为列表中的每一个节点做记录</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">hashmap</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">id</span><span style="color: #F07178">]) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">hashmap</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">id</span><span style="color: #F07178">] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span><span style="color: #F07178"> children</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> [] </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 存储每个 id 下的子元素，因为该节点可能已经被它的子节点建立了 hash 记录</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">hashmap</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">id</span><span style="color: #F07178">] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span><span style="color: #F07178"> </span><span style="color: #89DDFF">...</span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">]</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> children</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">hashmap</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">id</span><span style="color: #F07178">]</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">children</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">pid</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// pid 等于 0，说明没有父节点，直接 push</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">list</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">hashmap</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">id</span><span style="color: #F07178">])</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">hashmap</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">pid</span><span style="color: #F07178">]) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">// hash 中没有父节点，则加入父节点的记录</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #A6ACCD">hashmap</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">pid</span><span style="color: #F07178">] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">          children</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> []</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// 将该节点 push 到父节点的 children 中</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">hashmap</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">pid</span><span style="color: #F07178">]</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">children</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">hashmap</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">id</span><span style="color: #F07178">])</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">list</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="实现-array-flat" tabindex="-1">实现 Array.flat() <a class="header-anchor" href="#实现-array-flat" aria-label="Permalink to &quot;实现 Array.flat()&quot;">&ZeroWidthSpace;</a></h2>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #FFCB6B">Array</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">prototype</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">_flat</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">deep</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">res</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> []</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">deep</span><span style="color: #89DDFF">--</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178"> (</span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">of</span><span style="color: #F07178"> </span><span style="color: #89DDFF">this</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">Array</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">isArray</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">) </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">deep</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&gt;</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">res</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">res</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">concat</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">flat</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">deep</span><span style="color: #F07178">))</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">res</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">res</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">concat</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">) </span><span style="color: #676E95; font-style: italic">// res.push(i)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">res</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="手写-instanceof" tabindex="-1">手写 instanceOf <a class="header-anchor" href="#手写-instanceof" aria-label="Permalink to &quot;手写 instanceOf&quot;">&ZeroWidthSpace;</a></h2>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">myInstanceOf</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">left</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">right</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 获取对象的原型</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">proto</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">Object</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getPrototypeOf</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">left</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 获取构造函数的 prototype</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">prototype</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">right</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 判断构造函数的 prototype 是否在对象的原型链上</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">while</span><span style="color: #F07178"> (</span><span style="color: #FF9CAC">true</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// proto 为 null，说明未找到，直接返回 false</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">proto</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">false</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">proto</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">prototype</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">true</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">proto</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">Object</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getPrototypeOf</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">proto</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="手写-arr-map" tabindex="-1">手写 arr.map() <a class="header-anchor" href="#手写-arr-map" aria-label="Permalink to &quot;手写 arr.map()&quot;">&ZeroWidthSpace;</a></h2>
<p>arr.map() 方法返回一个新数组,其结果是该数组中的每个元素执行一个提供的函数后的返回值。</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #FFCB6B">Array</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">prototype</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">_map</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">fn</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">res</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> []</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178"> (</span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">length</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">++</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">res</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push</span><span style="color: #F07178">(</span><span style="color: #82AAFF">fn</span><span style="color: #F07178">(</span><span style="color: #89DDFF">this</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">]</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #89DDFF">this</span><span style="color: #F07178">))</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">res</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="实现-lodash-get" tabindex="-1">实现 lodash.get() <a class="header-anchor" href="#实现-lodash-get" aria-label="Permalink to &quot;实现 lodash.get()&quot;">&ZeroWidthSpace;</a></h2>
<p>要求：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> obj </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #F07178">a</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #F07178">b</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">123</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #89DDFF">},</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #F07178">arr</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> [</span></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">            </span><span style="color: #F07178">demo</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">demo</span><span style="color: #89DDFF">&#39;</span></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #A6ACCD">    ]</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">getKey</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">obj</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">str</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">   </span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #A6ACCD">(</span><span style="color: #82AAFF">getKey</span><span style="color: #A6ACCD">(obj</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">a.b</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD">))</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #A6ACCD">(</span><span style="color: #82AAFF">getKey</span><span style="color: #A6ACCD">(obj</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">arr[0].demo</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD">))</span><span style="color: #89DDFF">;</span></span></code></pre>
</div><p><strong>实现：</strong></p>
<p>思路：传来的 key 可能有多种格式，包括 []、.等，首先要进行一个格式转换。</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">_get</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">obj</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">path</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">defaultValue</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">undefined)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 首先进行格式的统一</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newPath</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> []</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 判断 path 是否为数组</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">Array</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">isArray</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">path</span><span style="color: #F07178">)) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">newPath</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">path</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">newPath</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">path</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">replace</span><span style="color: #F07178">(</span><span style="color: #89DDFF">/</span><span style="color: #A6ACCD">\[</span><span style="color: #89DDFF">/</span><span style="color: #F78C6C">g</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">.</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">replace</span><span style="color: #F07178">(</span><span style="color: #89DDFF">/</span><span style="color: #A6ACCD">\]</span><span style="color: #89DDFF">/</span><span style="color: #F78C6C">g</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;&#39;</span><span style="color: #F07178">)</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">split</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">.</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 获取路径后使用 [] 的格式逐个调用，这里可以使用 reduce</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> (</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">newPath</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">reduce</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">pre</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">cur</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">pre</span><span style="color: #F07178"> </span><span style="color: #89DDFF">||</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{}</span><span style="color: #F07178">)[</span><span style="color: #A6ACCD">cur</span><span style="color: #F07178">] </span><span style="color: #676E95; font-style: italic">// 这里要用一个空对象，防止 pre 为 undefined 的情况报错</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">},</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">obj</span><span style="color: #F07178">) </span><span style="color: #89DDFF">||</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">defaultValue</span></span>
<span class="line"><span style="color: #F07178">  )</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> object </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">a</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> [</span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">b</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">c</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">3</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">] </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #A6ACCD"> </span></span>
<span class="line"><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #A6ACCD">(</span><span style="color: #82AAFF">_get</span><span style="color: #A6ACCD">(object</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">a[0].b.c</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD">))</span></span></code></pre>
</div><h2 id="深拷贝的实现" tabindex="-1">深拷贝的实现 <a class="header-anchor" href="#深拷贝的实现" aria-label="Permalink to &quot;深拷贝的实现&quot;">&ZeroWidthSpace;</a></h2>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// 方法一</span></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">_deepCopy_1</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">obj</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">JSON</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">parse</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">JSON</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">stringify</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">obj</span><span style="color: #F07178">))</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 方法二</span></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">_deepCopy_2</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">obj</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 当传入的参数不为 Object 类型时,直接返回</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">obj</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #89DDFF">null</span><span style="color: #F07178"> </span><span style="color: #89DDFF">||</span><span style="color: #F07178"> </span><span style="color: #89DDFF">typeof</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">obj</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!==</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">object</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">obj</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newObj</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 判断 obj 的类型，是数组还是对象</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">Array</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">isArray</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">obj</span><span style="color: #F07178">)) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">newObj</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> []</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">newObj</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178"> (</span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">in</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">obj</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">newObj</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">_deepCopy_2</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">obj</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">])</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newObj</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="正则表达式模板字符串" tabindex="-1">正则表达式模板字符串 <a class="header-anchor" href="#正则表达式模板字符串" aria-label="Permalink to &quot;正则表达式模板字符串&quot;">&ZeroWidthSpace;</a></h2>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #FFCB6B">String</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">prototype</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">render</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">data</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">this.</span><span style="color: #82AAFF">replace</span><span style="color: #F07178">(</span><span style="color: #89DDFF">/</span><span style="color: #C3E88D">{{</span><span style="color: #89DDFF">[</span><span style="color: #C3E88D">.\s\S</span><span style="color: #89DDFF">]*?</span><span style="color: #C3E88D">}}</span><span style="color: #89DDFF">/</span><span style="color: #F78C6C">g</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">match</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 匹配到的占位符</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> ((</span><span style="color: #A6ACCD">match</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">match</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">substring</span><span style="color: #F07178">(</span><span style="color: #F78C6C">2</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">match</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #F78C6C">2</span><span style="color: #F07178">)</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">trim</span><span style="color: #F07178">()) </span><span style="color: #89DDFF">==</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&quot;&quot;</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// 如果占位符为空，则返回空字符串</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&quot;&quot;</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">match</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">startsWith</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">#</span><span style="color: #89DDFF">&quot;</span><span style="color: #F07178">)) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// 如果占位符以&quot;#&quot;开头，则执行占位符内的表达式，并返回结果</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #82AAFF">eval</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">match</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">substr</span><span style="color: #F07178">(</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">match</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #F07178">))</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// 否则，从提供的数据对象中获取占位符对应的值，并返回</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">data</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">match</span><span style="color: #F07178">] </span><span style="color: #89DDFF">?</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">data</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">match</span><span style="color: #F07178">] </span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&quot;&quot;</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">};</span></span></code></pre>
</div><h2 id="实现发布订阅模式" tabindex="-1">实现发布订阅模式 <a class="header-anchor" href="#实现发布订阅模式" aria-label="Permalink to &quot;实现发布订阅模式&quot;">&ZeroWidthSpace;</a></h2>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">class</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">EventEmitter</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #C792EA">constructor</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">events</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">on</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">name</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">callback</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">!this.</span><span style="color: #A6ACCD">events</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">name</span><span style="color: #F07178">]) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">events</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">name</span><span style="color: #F07178">] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> []</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">events</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">name</span><span style="color: #F07178">]</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">callback</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">off</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">name</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">callback</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">events</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">name</span><span style="color: #F07178">]</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">filter</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">element</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">element</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!==</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">callback</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">once</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">name</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">callback</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">fn</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">(...</span><span style="color: #A6ACCD; font-style: italic">args</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">callback</span><span style="color: #F07178">(</span><span style="color: #89DDFF">...</span><span style="color: #A6ACCD">args</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">this.</span><span style="color: #82AAFF">off</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">name</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">fn</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">this.</span><span style="color: #82AAFF">on</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">name</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">fn</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="实现寄生组合式继承" tabindex="-1">实现寄生组合式继承 <a class="header-anchor" href="#实现寄生组合式继承" aria-label="Permalink to &quot;实现寄生组合式继承&quot;">&ZeroWidthSpace;</a></h2>
<p>寄生组合式继承的具体实现步骤如下：</p>
<ol>
<li>定义父类的构造函数</li>
<li>定义子类的构造函数</li>
<li>在子类的构造函数中调用父类的构造函数，以继承父类的实例属性；</li>
<li>使用 Object.create() 方法创建一个以父类原型对象为原型的新对象，并将其赋值给子类的原型对象</li>
<li>在子类的原型对象上添加子类特有的方法。</li>
</ol>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// 父类构造函数</span></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">Parent</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">name</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">age</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">name</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">name</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">age</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">age</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 子类构造函数</span></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">Son</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">name</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">age</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">skills</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 子类构造函数中调用父类构造函数，以继承父类的实例属性</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">Parent</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">call</span><span style="color: #F07178">(</span><span style="color: #89DDFF">this,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">name</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">age</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">skills</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">skills</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 使用 Object.create() 方法创建一个以父类原型对象为原型的新对象，并将其赋值给子类的原型对象</span></span>
<span class="line"><span style="color: #FFCB6B">Son</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">prototype </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> Object</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">create</span><span style="color: #A6ACCD">(</span><span style="color: #FFCB6B">Parent</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">prototype)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 将子类原型对象的 constructor 属性指向子类构造函数 Son，以确保原型链上的构造函数引用正确。</span></span>
<span class="line"><span style="color: #FFCB6B">Son</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">prototype</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">constructor </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> Son</span><span style="color: #89DDFF">;</span></span></code></pre>
</div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[服务器部署前端项目]]></title>
            <link>https://desain7.top/frontend/exp/服务器部署前端项目.html</link>
            <guid>https://desain7.top/frontend/exp/服务器部署前端项目.html</guid>
            <pubDate>Sun, 15 Oct 2023 16:00:00 GMT</pubDate>
            <description><![CDATA[ 安装 Nginx
1. 购买云服务器ECS
首先，我们需要登录阿里云或腾讯云官网，进行云服务器ECS的选购。
在购买过程中，我们需要选择操作系统，建议选择Linux操作系统，如CentOS、Uban]]></description>
            <content:encoded><![CDATA[<h1 id="服务器部署前端项目" tabindex="-1">服务器部署前端项目 <a class="header-anchor" href="#服务器部署前端项目" aria-label="Permalink to &quot;服务器部署前端项目&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="安装-nginx" tabindex="-1">安装 Nginx <a class="header-anchor" href="#安装-nginx" aria-label="Permalink to &quot;安装 Nginx&quot;">&ZeroWidthSpace;</a></h2>
<ol>
<li>购买云服务器ECS
首先，我们需要登录阿里云或腾讯云官网，进行云服务器ECS的选购。</li>
</ol>
<p>在购买过程中，我们需要选择操作系统，建议选择Linux操作系统，如CentOS、Ubantu等。</p>
<p>此外，还需要选择地域、实例规格、配置网络等，根据实际需求进行选择。</p>
<ol start="2">
<li>
<p>登录服务器
购买成功后，可以通过远程连接工具（如 Xshell）连接到刚刚购买的云服务器ECS。</p>
</li>
<li>
<p>安装nginx
在登录到服务器后，首先需要安装 nginx。根据操作系统的不同，安装方法也略有不同。</p>
</li>
</ol>
<p>这里以CentOS为例：</p>
<div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #FFCB6B">sudo</span><span style="color: #A6ACCD"> </span><span style="color: #C3E88D">yum</span><span style="color: #A6ACCD"> </span><span style="color: #C3E88D">install</span><span style="color: #A6ACCD"> </span><span style="color: #C3E88D">nginx</span></span></code></pre>
</div><p>安装完 nginx 后，可以通过以下命令验证 nginx 是否已经正确安装：</p>
<div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #FFCB6B">nginx</span><span style="color: #A6ACCD"> </span><span style="color: #C3E88D">-v</span></span></code></pre>
</div><p>如果能够显示 nginx 的版本信息，则说明已经安装成功。</p>
<p>可以使用下面的的命令启动 nginx 的服务。</p>
<div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #FFCB6B">service</span><span style="color: #A6ACCD"> </span><span style="color: #C3E88D">nginx</span><span style="color: #A6ACCD"> </span><span style="color: #C3E88D">start</span></span></code></pre>
</div><p>此时访问服务器的公网 IP 就可以看到 nginx 的默认页面。</p>
<h2 id="配置-nginx" tabindex="-1">配置 nginx <a class="header-anchor" href="#配置-nginx" aria-label="Permalink to &quot;配置 nginx&quot;">&ZeroWidthSpace;</a></h2>
<p>在安装完 nginx 后，还需要进行一些配置。</p>
<ol>
<li>修改配置文件</li>
</ol>
<p>nginx 的配置文件通常位于 <code>/etc/nginx</code> 目录下，文件名为 <code>nginx.conf</code>。可以使用 Xftp 打开该文件进行编辑。根据自己的需求，对配置文件进行相应的修改。</p>
<p>自定义的配置文件放在/etc/nginx/nginx.conf（配置vue项目的地方）</p>
<p>项目文件存放在/usr/share/nginx/任意项目名/ (存放vue项目的地方)</p>
<p>日志文件存放在/var/log/nginx/</p>
<p>还有一些其他的安装文件都在/etc/nginx</p>
<p><strong>以下是常见的配置项：</strong></p>
<div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #A6ACCD">user nginx;：指定NGINX进程的运行用户。在这个例子中，NGINX将以nginx用户的身份运行。</span></span>
<span class="line"><span style="color: #A6ACCD"></span></span>
<span class="line"><span style="color: #A6ACCD">worker_processes auto;：指定NGINX启动的工作进程数。auto表示根据系统的CPU核心数自动确定进程数。</span></span>
<span class="line"><span style="color: #A6ACCD"></span></span>
<span class="line"><span style="color: #A6ACCD">error_log /var/log/nginx/error.log;：指定NGINX错误日志的路径和文件名。</span></span>
<span class="line"><span style="color: #A6ACCD"></span></span>
<span class="line"><span style="color: #A6ACCD">pid /run/nginx.pid;：指定NGINX进程ID文件的路径和文件名。</span></span>
<span class="line"><span style="color: #A6ACCD"></span></span>
<span class="line"><span style="color: #A6ACCD">include /usr/share/nginx/modules/*.conf;：加载动态模块的配置文件。</span></span>
<span class="line"><span style="color: #A6ACCD"></span></span>
<span class="line"><span style="color: #A6ACCD">events { ... }：定义NGINX的事件模块配置。在这个例子中，设置了最大的并发连接数为1024。</span></span>
<span class="line"><span style="color: #A6ACCD"></span></span>
<span class="line"><span style="color: #A6ACCD">http { ... }：定义NGINX的HTTP模块配置。</span></span>
<span class="line"><span style="color: #A6ACCD"></span></span>
<span class="line"><span style="color: #A6ACCD">log_format main ...：定义了日志格式，其中包含了请求的各种信息，如远程地址、请求时间、请求内容等。</span></span>
<span class="line"><span style="color: #A6ACCD"></span></span>
<span class="line"><span style="color: #A6ACCD">access_log /var/log/nginx/access.log main;：指定访问日志的路径和文件名，并使用上面定义的main格式进行记录。</span></span>
<span class="line"><span style="color: #A6ACCD"></span></span>
<span class="line"><span style="color: #A6ACCD">sendfile on;：启用文件传输优化，提高文件传输效率。</span></span>
<span class="line"><span style="color: #A6ACCD"></span></span>
<span class="line"><span style="color: #A6ACCD">tcp_nopush on;：启用TCP nopush模式，减少网络传输延迟。</span></span>
<span class="line"><span style="color: #A6ACCD"></span></span>
<span class="line"><span style="color: #A6ACCD">tcp_nodelay on;：启用TCP nodelay模式，减少网络传输延迟。</span></span>
<span class="line"><span style="color: #A6ACCD"></span></span>
<span class="line"><span style="color: #A6ACCD">keepalive_timeout 65;：设置HTTP keep-alive连接的超时时间。</span></span>
<span class="line"><span style="color: #A6ACCD"></span></span>
<span class="line"><span style="color: #A6ACCD">types_hash_max_size 2048;：设置MIME类型哈希表的最大大小。</span></span>
<span class="line"><span style="color: #A6ACCD"></span></span>
<span class="line"><span style="color: #A6ACCD">include /etc/nginx/mime.types;：加载MIME类型配置文件。</span></span>
<span class="line"><span style="color: #A6ACCD"></span></span>
<span class="line"><span style="color: #A6ACCD">default_type application/octet-stream;：设置默认的MIME类型。</span></span>
<span class="line"><span style="color: #A6ACCD"></span></span>
<span class="line"><span style="color: #A6ACCD">include /etc/nginx/conf.d/*.conf;：从/etc/nginx/conf.d目录中加载模块化的配置文件。</span></span>
<span class="line"><span style="color: #A6ACCD"></span></span>
<span class="line"><span style="color: #A6ACCD">server { ... }：定义一个服务器块，用于处理特定的监听端口和域名。</span></span>
<span class="line"><span style="color: #A6ACCD"></span></span>
<span class="line"><span style="color: #A6ACCD">listen 7890;：监听的端口号。</span></span>
<span class="line"><span style="color: #A6ACCD"></span></span>
<span class="line"><span style="color: #A6ACCD">server_name _;：指定服务器的名称，这里使用下划线表示匹配任意域名。</span></span>
<span class="line"><span style="color: #A6ACCD"></span></span>
<span class="line"><span style="color: #A6ACCD">root /usr/share/nginx/terminal-index;：指定服务器的根目录。</span></span>
<span class="line"><span style="color: #A6ACCD"></span></span>
<span class="line"><span style="color: #A6ACCD">include /etc/nginx/default.d/*.conf;：加载默认服务器块的配置文件。</span></span>
<span class="line"><span style="color: #A6ACCD"></span></span>
<span class="line"><span style="color: #A6ACCD">location / { ... }：处理根路径的请求。</span></span>
<span class="line"><span style="color: #A6ACCD"></span></span>
<span class="line"><span style="color: #A6ACCD">error_page 404 /404.html;：指定404错误页面的路径。</span></span>
<span class="line"><span style="color: #A6ACCD"></span></span>
<span class="line"><span style="color: #A6ACCD">location = /40x.html { ... }：处理特定的错误页面。</span></span>
<span class="line"><span style="color: #A6ACCD"></span></span>
<span class="line"><span style="color: #A6ACCD">error_page 500 502 503 504 /50x.html;：指定500、502、503和504错误页面的路径。</span></span>
<span class="line"><span style="color: #A6ACCD"></span></span>
<span class="line"><span style="color: #A6ACCD">location = /50x.html { ... }：# 处理特定的错误页面。</span></span></code></pre>
</div><ol start="2">
<li>配置虚拟主机
虚拟主机是指在一台服务器上运行多个网站，每个网站有独立的域名和内容。在 nginx 中，可以通过配置虚拟主机来实现这一功能。</li>
</ol>
<p>在 <code>nginx.conf</code> 文件中，可以使用 <code>server</code> 块配置虚拟主机。每个 <code>server</code> 块包含一个域名和相应的配置。</p>
<p>例如，配置一个名为www.example.com的虚拟主机，可以添加以下代码：</p>
<div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #A6ACCD">server {</span></span>
<span class="line"><span style="color: #A6ACCD">  listen       端口;</span></span>
<span class="line"><span style="color: #A6ACCD">  server_name  访问域名;</span></span>
<span class="line"><span style="color: #A6ACCD"></span></span>
<span class="line"><span style="color: #A6ACCD">  location / {</span></span>
<span class="line"><span style="color: #A6ACCD">      root   线上静态路径; //示例 /usr/share/nginx/html </span></span>
<span class="line"><span style="color: #A6ACCD">      index  index.html index.htm;</span></span>
<span class="line"><span style="color: #A6ACCD">      try_files $uri $uri/ /index.html;  //解决子页面适配，刷新404问题</span></span>
<span class="line"><span style="color: #A6ACCD">  }</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
</div><p>其中，<code>listen</code> 指定监听的端口，<code>server_name</code> 指定域名，<code>root</code>指定网站的根目录，<code>…</code>代表其他配置项。</p>
<p>然后将项目打包后生成的 dist 目录中的文件放到 root 指定的路径中。</p>
<p>如果配置文件后执行出错，可以使用 <code>nginx -t</code> 检查报错原因。</p>
<ol start="3">
<li>重启 nginx
在配置完 nginx 后，为了使配置生效，需要重启nginx。可以使用以下命令重启：</li>
</ol>
<div class="language-SHELL"><button title="Copy Code" class="copy"></button><span class="lang">SHELL</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #FFCB6B">sudo</span><span style="color: #A6ACCD"> </span><span style="color: #C3E88D">service</span><span style="color: #A6ACCD"> </span><span style="color: #C3E88D">nginx</span><span style="color: #A6ACCD"> </span><span style="color: #C3E88D">restart</span></span></code></pre>
</div><ol start="4">
<li>访问网站</li>
</ol>
<p>在配置完 nginx 并重启后，还需要去对应服务器实例的防火墙查看是否放行了监听的端口。</p>
<p>之后就可以通过浏览器访问配置的网站，验证配置是否成功。</p>
<p>在浏览器地址栏中输入配置的域名，如果成功访问到网站的首页，则表明配置成功。</p>
<ol start="5">
<li>添加 SSL 证书</li>
</ol>
<p>如果网站需要加入 SSL 证书，可以在 nginx 配置中添加以下代码：</p>
<div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #A6ACCD">listen       443 ssl http2 default_server;</span></span>
<span class="line"><span style="color: #A6ACCD">  server_name  _;</span></span>
<span class="line"><span style="color: #A6ACCD">  root         /usr/share/nginx/html;</span></span>
<span class="line"><span style="color: #A6ACCD"></span></span>
<span class="line"><span style="color: #A6ACCD">  ssl_certificate &quot;/etc/pki/nginx/server.pem&quot;;</span></span>
<span class="line"><span style="color: #A6ACCD">  ssl_certificate_key &quot;/etc/pki/nginx/private/server.key&quot;;</span></span>
<span class="line"><span style="color: #A6ACCD">  ssl_session_cache shared:SSL:1m;</span></span>
<span class="line"><span style="color: #A6ACCD">  ssl_session_timeout  10m;</span></span>
<span class="line"><span style="color: #A6ACCD">  ssl_ciphers PROFILE=SYSTEM;</span></span>
<span class="line"><span style="color: #A6ACCD">  ssl_prefer_server_ciphers on;</span></span></code></pre>
</div><p>然后将域名的证书添加到上方路径的文件夹中，重启 nginx 服务，就可以将网站的协议改为 https 了。</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[大文件上传有哪些策略？]]></title>
            <link>https://desain7.top/frontend/node/大文件上传有哪些策略.html</link>
            <guid>https://desain7.top/frontend/node/大文件上传有哪些策略.html</guid>
            <pubDate>Sun, 15 Oct 2023 16:00:00 GMT</pubDate>
            <description><![CDATA[前端部分
 检测文件是否上传
- 文件已上传就直接返回文件的访问 url（秒传）
- 文件未上传，就上传它的所有分片（分片上传）
- 若已经上传了部分分片，就返回已经上传的文件分片名，然后再上传未上传]]></description>
            <content:encoded><![CDATA[<h1 id="大文件上传有哪些策略" tabindex="-1">大文件上传有哪些策略？ <a class="header-anchor" href="#大文件上传有哪些策略" aria-label="Permalink to &quot;大文件上传有哪些策略？&quot;">&ZeroWidthSpace;</a></h1>
<p><strong>前端部分</strong></p>
<h2 id="检测文件是否上传" tabindex="-1">检测文件是否上传 <a class="header-anchor" href="#检测文件是否上传" aria-label="Permalink to &quot;检测文件是否上传&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li>文件已上传就直接返回文件的访问 url（秒传）</li>
<li>文件未上传，就上传它的所有分片（分片上传）</li>
<li>若已经上传了部分分片，就返回已经上传的文件分片名，然后再上传未上传的分片（断点续传）</li>
</ul>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">/**</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * 校验文件是否已上传</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">md5</span><span style="color: #676E95; font-style: italic"> </span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">chunks</span><span style="color: #676E95; font-style: italic"> </span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> */</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> verifyFile </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">md5</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">string</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">chunks</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">Blob</span><span style="color: #A6ACCD">[]</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">file</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">File</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">chunsNames</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> [] </span><span style="color: #89DDFF; font-style: italic">as</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">string</span><span style="color: #F07178">[]</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">chunks</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">forEach</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">item</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">index</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">chunsNames</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">md5</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">separator</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">index</span><span style="color: #F07178">))</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #82AAFF">$fetch</span><span style="color: #F07178">(</span><span style="color: #89DDFF">`${</span><span style="color: #A6ACCD">config</span><span style="color: #89DDFF">?.</span><span style="color: #A6ACCD">baseUrl</span><span style="color: #89DDFF">}</span><span style="color: #C3E88D">/upload/verifyFile</span><span style="color: #89DDFF">`</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      method</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">POST</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">      query</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        chunksObj</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span><span style="color: #F07178"> name</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">md5</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">chunsNames</span><span style="color: #F07178"> </span><span style="color: #89DDFF">},</span></span>
<span class="line"><span style="color: #F07178">        extName</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">file</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">name</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">split</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">.</span><span style="color: #89DDFF">&quot;</span><span style="color: #F07178">)</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">slice</span><span style="color: #F07178">(</span><span style="color: #89DDFF">-</span><span style="color: #F78C6C">1</span><span style="color: #F07178">)[</span><span style="color: #F78C6C">0</span><span style="color: #F07178">]</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">        fileName</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">md5</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">.</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">file</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">name</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">split</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">.</span><span style="color: #89DDFF">&quot;</span><span style="color: #F07178">)</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">slice</span><span style="color: #F07178">(</span><span style="color: #89DDFF">-</span><span style="color: #F78C6C">1</span><span style="color: #F07178">)[</span><span style="color: #F78C6C">0</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="文件分片" tabindex="-1">文件分片 <a class="header-anchor" href="#文件分片" aria-label="Permalink to &quot;文件分片&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li>
<p>分片策略
有两种， 根据文件大小拆分成<code>几等份</code>，或者每片<code>固定分片大小</code>去切。</p>
</li>
<li>
<p>File 对象
File 对象表示用户选择的文件，它包含文件的元数据（例如文件名、大小、类型、日期等）。</p>
</li>
</ul>
<p>通过读取文件的二进制内容，可以生成 Blob 对象，进而对文件进行分片。</p>
<ul>
<li>Blob 对象
Blob（Binary Large Object）是表示二进制数据的对象。它可以包含文件的一部分或全部内容。</li>
</ul>
<p>通过切割 Blob 对象，可以得到文件的分片。</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">/**</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">* 文件分片</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">* </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">file</span><span style="color: #676E95; font-style: italic"> 文件对象</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">* </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">chunksize</span><span style="color: #676E95; font-style: italic"> 分片大小</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">*/</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> createChunks </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">file</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">File</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">chunksize</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">number</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178"> </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">chunks</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> []</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178"> (</span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">file</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">size</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">chunksize</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">   </span><span style="color: #A6ACCD">chunks</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">file</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">slice</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">chunksize</span><span style="color: #F07178">))</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">chunks</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">};</span></span></code></pre>
</div><h2 id="创建-md5-加密串" tabindex="-1">创建 MD5 加密串 <a class="header-anchor" href="#创建-md5-加密串" aria-label="Permalink to &quot;创建 MD5 加密串&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="使用-spark-md5-进行加密" tabindex="-1">使用 spark-md5 进行加密 <a class="header-anchor" href="#使用-spark-md5-进行加密" aria-label="Permalink to &quot;使用 spark-md5 进行加密&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li>可以根据分片数组对象，使用 spark-md5 来生成文件加密串。</li>
<li>这个加密串就可以作为文件的唯一标识，除非更改文件内容，否则不会发生改变。</li>
</ul>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">/**</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * 创建MD5 加密串</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">chunks</span><span style="color: #676E95; font-style: italic"> </span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> */</span></span>
<span class="line"><span style="color: #89DDFF; font-style: italic">import</span><span style="color: #A6ACCD"> SparkMD5 </span><span style="color: #89DDFF; font-style: italic">from</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">spark-md5</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> createMd5 </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">chunks</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">Blob</span><span style="color: #A6ACCD">[]</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">spark</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">SparkMD5</span><span style="color: #F07178">()</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Promise</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">reslove</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">function</span><span style="color: #F07178"> </span><span style="color: #82AAFF">_read</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">i</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">number</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&gt;=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">chunks</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">md5</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">spark</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">end</span><span style="color: #F07178">()</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #82AAFF">reslove</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">md5</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">blob</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">chunks</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">]</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">reader</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">FileReader</span><span style="color: #F07178">()</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">reader</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">onload</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">e</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">bytes</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">e</span><span style="color: #89DDFF">?.</span><span style="color: #A6ACCD">target</span><span style="color: #89DDFF">?.</span><span style="color: #A6ACCD">result</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #A6ACCD">spark</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">append</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">bytes</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #82AAFF">_read</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">};</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">reader</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">readAsArrayBuffer</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">blob</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">_read</span><span style="color: #F07178">(</span><span style="color: #F78C6C">0</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">};</span></span></code></pre>
</div><h3 id="使用-webworker-进行加密" tabindex="-1">使用 webWorker 进行加密 <a class="header-anchor" href="#使用-webworker-进行加密" aria-label="Permalink to &quot;使用 webWorker 进行加密&quot;">&ZeroWidthSpace;</a></h3>
<p>需要引入park-md5.js库</p>
<p>主要流程：</p>
<ul>
<li>创建worker.js 文件</li>
<li>引入并使用 new Worker('worker.js')</li>
<li>接收消息：通过监听message事件</li>
<li>发送消息：通过发送postMessage</li>
</ul>
<div class="tip custom-block"><p class="custom-block-title">TIP</p>
<p>由于 Worker 是独立于主线程的子线程，不能访问 dom</p>
</div>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// md5Worker.js</span></span>
<span class="line"><span style="color: #A6ACCD">self</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">importScripts</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">park-md5.js</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">self</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">addEventListener</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">message</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">async</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">event</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">chunks</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">event</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">data</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">md5</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">await</span><span style="color: #F07178"> </span><span style="color: #82AAFF">createMd5</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">chunks</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">self</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">postMessage</span><span style="color: #F07178">( </span><span style="color: #A6ACCD">md5</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> createMd5 </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">chunks</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">spark</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">self</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">SparkMD5</span><span style="color: #F07178">()</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Promise</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">resolve</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">function</span><span style="color: #F07178"> </span><span style="color: #82AAFF">_read</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">i</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&gt;=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">chunks</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">md5</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">spark</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">end</span><span style="color: #F07178">()</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #82AAFF">resolve</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">md5</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">blob</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">chunks</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">]</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">reader</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">FileReader</span><span style="color: #F07178">()</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">reader</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">onload</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">e</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">bytes</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">e</span><span style="color: #89DDFF">?.</span><span style="color: #A6ACCD">target</span><span style="color: #89DDFF">?.</span><span style="color: #A6ACCD">result</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #A6ACCD">spark</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">append</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">bytes</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #82AAFF">_read</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">};</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">reader</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">readAsArrayBuffer</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">blob</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">_read</span><span style="color: #F07178">(</span><span style="color: #F78C6C">0</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">};</span></span></code></pre>
</div><p>主程序中使用:</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// 在主线程中创建 Web Worker</span></span>
<span class="line"><span style="color: #89DDFF">import</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">./md5Worker?worker</span><span style="color: #89DDFF">&quot;</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">worker</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">md5Worker</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">worker</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">default</span><span style="color: #F07178">()</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 发送消息</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">md5Worker</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">postMessage</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">发送的消息</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 报错监听</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">md5Worker</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">onerror</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">err</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 接收消息</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">md5Worker</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">onmessage</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #C792EA">function</span><span style="color: #F07178"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">e</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{}</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 关闭联系</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">md5Worker</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">terminate</span><span style="color: #F07178">()</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #676E95; font-style: italic">// ----------------------或者-----------------------</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> worker </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">new</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">Worker</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">worker-script.js</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">worker</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">postMessage</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">Hello from main thread</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">worker</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">onmessage</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">event</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">Main thread received message from Worker:</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">event</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">data</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">};</span></span></code></pre>
</div><h2 id="上传分片" tabindex="-1">上传分片 <a class="header-anchor" href="#上传分片" aria-label="Permalink to &quot;上传分片&quot;">&ZeroWidthSpace;</a></h2>
<p>分片上传能够加快文件上传速度。文件上传失败后，再次上传时，不需要重新上传整个文件，只需要上传未上传的分片。</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">/**</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * 上传chunk</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">item</span><span style="color: #676E95; font-style: italic"> chunks</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">md5</span><span style="color: #676E95; font-style: italic"> 加密串</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">fileName</span><span style="color: #676E95; font-style: italic"> 文件名</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">index</span><span style="color: #676E95; font-style: italic"> 下标：失败辅助标识</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> */</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> uploadLargeFile </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">item</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">md5</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">fileName</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">index</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">-</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">formData</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">FormData</span><span style="color: #F07178">()</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">formData</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">append</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">file</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">item</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #82AAFF">useFetch</span><span style="color: #F07178">(</span><span style="color: #89DDFF">`${</span><span style="color: #A6ACCD">config</span><span style="color: #89DDFF">?.</span><span style="color: #A6ACCD">baseUrl</span><span style="color: #89DDFF">}</span><span style="color: #C3E88D">/upload/largeFile</span><span style="color: #89DDFF">`</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    method</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">POST</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">    headers</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      authorization</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">authorization-text</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">},</span></span>
<span class="line"><span style="color: #F07178">    body</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">formData</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">    query</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      filename</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">md5</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">separator</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">index</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">      name</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">md5</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">fileName</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">index</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">},</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #676E95; font-style: italic">/**</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * 循环上传chunks</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">chunks</span><span style="color: #676E95; font-style: italic"> </span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">md5</span><span style="color: #676E95; font-style: italic"> 加密串</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">fileName</span><span style="color: #676E95; font-style: italic"> 文件名</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> */</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> uploadChunks </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">chunks</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> []</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">md5</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">fileName</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;&#39;</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">allRequest</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">chunks</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">map</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">item</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">index</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #82AAFF">uploadLargeFile</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">item</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">md5</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">fileName</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">index</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">allRequest</span><span style="color: #F07178"> </span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="合并分片" tabindex="-1">合并分片 <a class="header-anchor" href="#合并分片" aria-label="Permalink to &quot;合并分片&quot;">&ZeroWidthSpace;</a></h2>
<p>当所有的分片都上传完成后，告知服务端整合各个分片并返回文件的访问 url。</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">/**</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * 合并chunks</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">md5</span><span style="color: #676E95; font-style: italic"> </span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">file</span><span style="color: #676E95; font-style: italic"> </span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> */</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> mergeFile </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">async</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">md5</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">file</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">File</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">url</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&quot;&quot;</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">fileType</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&quot;&quot;</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">    fileName</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">_fileName</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">await</span><span style="color: #F07178"> </span><span style="color: #82AAFF">$fetch</span><span style="color: #F07178">(</span><span style="color: #89DDFF">`${</span><span style="color: #A6ACCD">config</span><span style="color: #89DDFF">?.</span><span style="color: #A6ACCD">baseUrl</span><span style="color: #89DDFF">}</span><span style="color: #C3E88D">/upload/mergeFile</span><span style="color: #89DDFF">`</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    method</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">POST</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">    query</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      fileName</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">md5</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">      filename</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">file</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">name</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">      extName</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">file</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">name</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">split</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">.</span><span style="color: #89DDFF">&quot;</span><span style="color: #F07178">)</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">slice</span><span style="color: #F07178">(</span><span style="color: #89DDFF">-</span><span style="color: #F78C6C">1</span><span style="color: #F07178">)[</span><span style="color: #F78C6C">0</span><span style="color: #F07178">]</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">},</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><p><strong>后端部分</strong></p>
<h2 id="创建-server-js" tabindex="-1">创建 server.js <a class="header-anchor" href="#创建-server-js" aria-label="Permalink to &quot;创建 server.js&quot;">&ZeroWidthSpace;</a></h2>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// server.js</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> express </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">require</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">express</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> app </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">express</span><span style="color: #A6ACCD">()</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> cors </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">require</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">cors</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span><span style="color: #A6ACCD"> </span><span style="color: #676E95; font-style: italic">// 导入 cors 中间件</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> uploadRoutes </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">require</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">./routes/upload.js</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">app</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">use</span><span style="color: #A6ACCD">(express</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">json</span><span style="color: #A6ACCD">())</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 托管静态文件</span></span>
<span class="line"><span style="color: #A6ACCD">app</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">use</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">/static</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD">express</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">static</span><span style="color: #A6ACCD">(path</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">join</span><span style="color: #A6ACCD">(__dirname</span><span style="color: #89DDFF">,</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">./public</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">	</span><span style="color: #F07178">maxAge</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">1000</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">*</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">60</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">*</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">60</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">*</span><span style="color: #F78C6C">24</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">*</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">7</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">))</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 跨域</span></span>
<span class="line"><span style="color: #A6ACCD">app</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">use</span><span style="color: #A6ACCD">(</span><span style="color: #82AAFF">cors</span><span style="color: #A6ACCD">())</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 上传路由</span></span>
<span class="line"><span style="color: #A6ACCD">app</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">use</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">/upload</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> uploadRoutes)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 启动服务器</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> PORT </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> process</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">env</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">PORT </span><span style="color: #89DDFF">||</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">3000</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">server</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">listen</span><span style="color: #A6ACCD">(PORT</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">	</span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #89DDFF">`</span><span style="color: #C3E88D">服务器正在运行，端口：</span><span style="color: #89DDFF">${</span><span style="color: #A6ACCD">PORT</span><span style="color: #89DDFF">}`</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span></code></pre>
</div><h2 id="文件校验接口" tabindex="-1">文件校验接口 <a class="header-anchor" href="#文件校验接口" aria-label="Permalink to &quot;文件校验接口&quot;">&ZeroWidthSpace;</a></h2>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> express </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">require</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">express</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> path </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">require</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">path</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> fs </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">require</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">fs</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> router </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> express</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">Router</span><span style="color: #A6ACCD">()</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">/**</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * 校验文件是否已上传</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * 1. 静态服务上是否存在该文件 存在=》返回url</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * 2. 不存在该文件</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> *    1）是否存在已上传的部分chunks 存在，返回还未上传的chunks 名列表</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> */</span></span>
<span class="line"><span style="color: #A6ACCD">router</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">post</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">/verifyFile</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">async</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">req</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">res</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">fileName</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">extName</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">chunksObj</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&#39;&#39;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">req</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">query</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">JSON</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">parse</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">chunksObj</span><span style="color: #F07178">))</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">name</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;&#39;</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">chunsNames</span><span style="color: #89DDFF">=</span><span style="color: #F07178"> [] </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">JSON</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">parse</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">chunksObj</span><span style="color: #F07178"> </span><span style="color: #89DDFF">||</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">{}</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">) </span><span style="color: #89DDFF">||</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">notUploadedChunks</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> [] </span><span style="color: #676E95; font-style: italic">// 未上传的chunks名列表</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">chunksFiles</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> []</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 校验文件是否已存在</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">isSave</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">checkFileExistsInFolder</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">fileName</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 文件不存在 接着检查是否存在已上传的chunks</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">isSave</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">name</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">chunksFiles</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">getFilesInFolder</span><span style="color: #F07178">(</span><span style="color: #89DDFF">`</span><span style="color: #C3E88D">../public/file/thunk/</span><span style="color: #89DDFF">${</span><span style="color: #A6ACCD">name</span><span style="color: #89DDFF">}`</span><span style="color: #F07178">) </span><span style="color: #89DDFF">||</span><span style="color: #F07178"> []</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">chunksFiles</span><span style="color: #89DDFF">?.</span><span style="color: #A6ACCD">length</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">chunsNames</span><span style="color: #89DDFF">?.</span><span style="color: #A6ACCD">length</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">notUploadedChunks</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">chunsNames</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">filter</span><span style="color: #F07178">(</span><span style="color: #A6ACCD; font-style: italic">item</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">chunksFiles</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">includes</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">item</span><span style="color: #F07178">))</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">url</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">isSave</span><span style="color: #F07178"> </span><span style="color: #89DDFF">?</span><span style="color: #F07178">  </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">/static/file/</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">fileName</span><span style="color: #F07178"> </span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;&#39;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">res</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">status</span><span style="color: #F07178">(</span><span style="color: #F78C6C">200</span><span style="color: #F07178">)</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">send</span><span style="color: #F07178">(</span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    code</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">fileType</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">fileName</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">notUploadedChunks</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">    uploadedChunks</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">chunksFiles</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">url</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #676E95; font-style: italic">/**</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * 查看是否已包含某个文件</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">*</span><span style="color: #89DDFF; font-style: italic">}</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">targetFileName</span><span style="color: #676E95; font-style: italic"> 查找的目标文件名</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">*</span><span style="color: #89DDFF; font-style: italic">}</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">folderPath</span><span style="color: #676E95; font-style: italic"> 文件夹路径 默认 /public/file/</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">returns</span><span style="color: #676E95; font-style: italic"> </span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> */</span></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">checkFileExistsInFolder</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">targetFileName</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">folderPath</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">../public/file/</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">folderPath</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">path</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">join</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">__dirname</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">folderPath</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">filesInFolder</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">fs</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">readdirSync</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">folderPath</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">isUpoaded</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">filesInFolder</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">includes</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">targetFileName</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">文件是否已存在</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">isUpoaded</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">isUpoaded</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #676E95; font-style: italic">/**</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * 检查某个文件夹是否存在</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">*</span><span style="color: #89DDFF; font-style: italic">}</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">folderPath</span><span style="color: #676E95; font-style: italic"> 文件夹路径</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">returns</span><span style="color: #676E95; font-style: italic"> 文件夹内的所有文件</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> */</span></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">getFilesInFolder</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">folderPath</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">folderPath</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">path</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">join</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">__dirname</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">folderPath</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">fs</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">existsSync</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">folderPath</span><span style="color: #F07178">)) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #89DDFF">`</span><span style="color: #C3E88D">Folder &#39;</span><span style="color: #89DDFF">${</span><span style="color: #A6ACCD">folderPath</span><span style="color: #89DDFF">}</span><span style="color: #C3E88D">&#39; does not exist.</span><span style="color: #89DDFF">`</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> []</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">filesInFolder</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">fs</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">readdirSync</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">folderPath</span><span style="color: #F07178">) </span><span style="color: #89DDFF">||</span><span style="color: #F07178"> []</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">filesInFolder</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="分片上传接口" tabindex="-1">分片上传接口 <a class="header-anchor" href="#分片上传接口" aria-label="Permalink to &quot;分片上传接口&quot;">&ZeroWidthSpace;</a></h2>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> express </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">require</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">express</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> Busboy </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">require</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">busboy</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> path </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">require</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">path</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> fs </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">require</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">fs</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> router </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> express</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">Router</span><span style="color: #A6ACCD">()</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">/**</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * 大文件上传： 分片</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> */</span></span>
<span class="line"><span style="color: #A6ACCD">router</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">post</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">/largeFile</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">req</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">res</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">busboy</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">Busboy</span><span style="color: #F07178">(</span><span style="color: #89DDFF">{</span><span style="color: #F07178"> headers</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">req</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">headers</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">filename</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">name</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">index</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">req</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">query</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">busboy</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">on</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">file</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">req</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">err</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">file</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">filds</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">encoding</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">mimetype</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">try</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">dir</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">`</span><span style="color: #C3E88D">../public/file/thunk/</span><span style="color: #89DDFF">${</span><span style="color: #A6ACCD">name</span><span style="color: #89DDFF">}`</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">mkdirFolder</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">dir</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">saveTo</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">path</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">join</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">__dirname</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">dir</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">filename</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">file</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">pipe</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">fs</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">createWriteStream</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">saveTo</span><span style="color: #F07178">))</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">catch</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">error</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">error</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">err*---------</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">resObj</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        msg</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">分片上传失败</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">        code</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">        err</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">error</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #A6ACCD">index</span><span style="color: #F07178"> </span><span style="color: #676E95; font-style: italic">// 返回报错的是那个chunks</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">res</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">send</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">resObj</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178">))</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">busboy</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">on</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">finish</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #C792EA">function</span><span style="color: #F07178"> </span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">resObj</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      msg</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">分片上传成功</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">      code</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">index</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">res</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">send</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">resObj</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">req</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">pipe</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">busboy</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span></span></code></pre>
</div><h2 id="合并分片接口" tabindex="-1">合并分片接口 <a class="header-anchor" href="#合并分片接口" aria-label="Permalink to &quot;合并分片接口&quot;">&ZeroWidthSpace;</a></h2>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> express </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">require</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">express</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> router </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> express</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">Router</span><span style="color: #A6ACCD">()</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> fs </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">require</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">fs</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> path </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">require</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">path</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">/**</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * 合并分片</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> */</span></span>
<span class="line"><span style="color: #A6ACCD">router</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">post</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">/mergeFile</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">async</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">req</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">res</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">fileName</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">extName</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">filename</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">req</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">query</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #82AAFF">thunkStreamMerge</span><span style="color: #F07178">(</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">../public/file/thunk/</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">fileName</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">../public/file/</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">fileName</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">.</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">extName</span></span>
<span class="line"><span style="color: #F07178">  )</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">fileType</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">extName</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">imageFormats</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">includes</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">extName</span><span style="color: #F07178">)) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">fileType</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">img</span><span style="color: #89DDFF">&#39;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">videoFormats</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">includes</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">extName</span><span style="color: #F07178">)) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">fileType</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">video</span><span style="color: #89DDFF">&#39;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">res</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">json</span><span style="color: #F07178">(</span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    code</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">    url</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">/static/file/</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">fileName</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">fileType</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">fileName</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #676E95; font-style: italic">/**</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * 文件合并</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">string</span><span style="color: #89DDFF; font-style: italic">}</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">sourceFiles</span><span style="color: #676E95; font-style: italic"> 源文件目录</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">string</span><span style="color: #89DDFF; font-style: italic">}</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">targetFile</span><span style="color: #676E95; font-style: italic"> 目标文件路径</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> */</span></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">thunkStreamMerge</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">sourceFiles</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">targetFile</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">sourceFilesDir</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">path</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">join</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">__dirname</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">sourceFiles</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">targetFile</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">path</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">join</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">__dirname</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">targetFile</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">fileList</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">fs</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">readdirSync</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">sourceFilesDir</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">filter</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">file</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">fs</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">lstatSync</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">path</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">join</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">sourceFilesDir</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">file</span><span style="color: #F07178">))</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">isFile</span><span style="color: #F07178">())</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">sort</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">a</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">b</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #82AAFF">parseInt</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">a</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">split</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">@</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)[</span><span style="color: #F78C6C">1</span><span style="color: #F07178">]) </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #82AAFF">parseInt</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">b</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">split</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">@</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)[</span><span style="color: #F78C6C">1</span><span style="color: #F07178">]))</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">map</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">name</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">name</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">      filePath</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">path</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">join</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">sourceFilesDir</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">name</span><span style="color: #F07178">)</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178">))</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">fileWriteStream</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">fs</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">createWriteStream</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">targetFile</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #82AAFF">thunkStreamMergeProgress</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">fileList</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">fileWriteStream</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">sourceFilesDir</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #676E95; font-style: italic">/**</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * 合并每一个切片</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">Array</span><span style="color: #89DDFF; font-style: italic">}</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">fileList</span><span style="color: #676E95; font-style: italic"> 文件数据列表</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">WritableStream</span><span style="color: #89DDFF; font-style: italic">}</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">fileWriteStream</span><span style="color: #676E95; font-style: italic"> 最终的写入结果流</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">string</span><span style="color: #89DDFF; font-style: italic">}</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">sourceFilesDir</span><span style="color: #676E95; font-style: italic"> 源文件目录</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> */</span></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">thunkStreamMergeProgress</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">fileList</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">fileWriteStream</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">sourceFilesDir</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">fileList</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">fileWriteStream</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">end</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">完成了</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 删除临时目录</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">fs</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">rmdirSync</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">sourceFilesDir</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span><span style="color: #F07178"> recursive</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">true</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> force</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">true</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span><span style="color: #F07178"> filePath</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">chunkFilePath</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">fileList</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">shift</span><span style="color: #F07178">()</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">currentReadStream</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">fs</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">createReadStream</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">chunkFilePath</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 把结果往最终的生成文件上进行拼接</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">currentReadStream</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">pipe</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">fileWriteStream</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span><span style="color: #F07178"> end</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">false</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">currentReadStream</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">on</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">end</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 拼接完之后进入下一次循环</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">thunkStreamMergeProgress</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">fileList</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">fileWriteStream</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">sourceFilesDir</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[怎么实现 WebSocket 长连接？]]></title>
            <link>https://desain7.top/frontend/node/怎么实现 WebSocket长连接？.html</link>
            <guid>https://desain7.top/frontend/node/怎么实现 WebSocket长连接？.html</guid>
            <pubDate>Sun, 15 Oct 2023 16:00:00 GMT</pubDate>
            <description><![CDATA[ 建立 WebSocket 连接
在前端，可以使用 JS 的 WebSocket 对象来建立 WebSocket 连接。通过指定 WebSocket 服务器的地址，可以创建一个 WebSocket 实]]></description>
            <content:encoded><![CDATA[<h1 id="怎么实现-websocket-长连接" tabindex="-1">怎么实现 WebSocket 长连接？ <a class="header-anchor" href="#怎么实现-websocket-长连接" aria-label="Permalink to &quot;怎么实现 WebSocket 长连接？&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="建立-websocket-连接" tabindex="-1">建立 WebSocket 连接 <a class="header-anchor" href="#建立-websocket-连接" aria-label="Permalink to &quot;建立 WebSocket 连接&quot;">&ZeroWidthSpace;</a></h2>
<p>在前端，可以使用 JS 的 WebSocket 对象来建立 WebSocket 连接。通过指定 WebSocket 服务器的地址，可以创建一个 WebSocket 实例。</p>
<p>如下：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> socket </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">new</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">WebSocket</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">ws://your-websocket-server-url</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span></code></pre>
</div><p>在 Nodejs 中，可以使用 ws 模块来创建一个 WebSocket 服务器。</p>
<p>如下：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> WebSocket </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">require</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">ws</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> wss </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">new</span><span style="color: #A6ACCD"> WebSocket</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">Server</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">port</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">8080</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">wss</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">on</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">connection</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">ws</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 处理连接事件</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span></code></pre>
</div><h2 id="处理连接事件" tabindex="-1">处理连接事件 <a class="header-anchor" href="#处理连接事件" aria-label="Permalink to &quot;处理连接事件&quot;">&ZeroWidthSpace;</a></h2>
<p>前端部分，可以为 WebSocket 实例添加事件处理程序来处理不同的连接事件，例如 open、close、error 和 message。</p>
<p>如下：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #A6ACCD">socket</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">addEventListener</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">open</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">event</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">WebSocket 连接已建立</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">socket</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">addEventListener</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">close</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">event</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">WebSocket 连接已关闭</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">socket</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">addEventListener</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">error</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">event</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">error</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">WebSocket 错误:</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">event</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">error</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">socket</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">addEventListener</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">message</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">event</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">message</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">event</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">data</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">接收到消息:</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">message</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span></code></pre>
</div><p>后端部分，则可以使用 ws 模块中的事件处理程序来处理连接事件。</p>
<p>如下：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #A6ACCD">wss</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">on</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">connection</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">ws</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">WebSocket 连接已建立</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">ws</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">on</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">message</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">message</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">接收到消息:</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">message</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 处理接收到的消息</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 发送消息给客户端</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">ws</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">send</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">服务器发送的消息</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">ws</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">on</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">close</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">WebSocket 连接已关闭</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span></code></pre>
</div><h2 id="保持连接活跃" tabindex="-1">保持连接活跃 <a class="header-anchor" href="#保持连接活跃" aria-label="Permalink to &quot;保持连接活跃&quot;">&ZeroWidthSpace;</a></h2>
<p>如果 WebSocket 连接在一段时间内没有被使用，那么该连接将被关闭。我们需要让 WebSocket 保持活跃状态，以便持续收发数据。</p>
<p>我们可以使用心跳机制来保持 WebSocket 连接的活跃状态。</p>
<p>在前端，可以定期发送心跳消息给后端，以保持连接。</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// 定期发送心跳消息</span></span>
<span class="line"><span style="color: #82AAFF">setInterval</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">socket</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">readyState</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">WebSocket</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">OPEN</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">socket</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">send</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">心跳消息</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">},</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">5000</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span><span style="color: #A6ACCD"> </span><span style="color: #676E95; font-style: italic">// 5 秒发送一次心跳消息</span></span></code></pre>
</div><p>后端则可以通过监听客户端的活动来保持连接活跃。在收到客户端的消息时，可以更新一个时间戳来表示最近的活动。</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #A6ACCD">wss</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">on</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">connection</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">ws</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">lastActivity</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">Date</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">now</span><span style="color: #F07178">()</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">ws</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">on</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">message</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">message</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">lastActivity</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">Date</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">now</span><span style="color: #F07178">()</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 处理接收到的消息</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 检查连接活跃状态</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #82AAFF">setInterval</span><span style="color: #F07178">(</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">now</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">Date</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">now</span><span style="color: #F07178">()</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">now</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">lastActivity</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&gt;</span><span style="color: #F07178"> </span><span style="color: #F78C6C">15000</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span><span style="color: #F07178"> </span><span style="color: #676E95; font-style: italic">// 15 秒无活动则关闭连接</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">ws</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">terminate</span><span style="color: #F07178">()</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">},</span><span style="color: #F07178"> </span><span style="color: #F78C6C">5000</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #676E95; font-style: italic">// 每 5 秒检查一次</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span></code></pre>
</div><h2 id="处理接收和发送数据" tabindex="-1">处理接收和发送数据 <a class="header-anchor" href="#处理接收和发送数据" aria-label="Permalink to &quot;处理接收和发送数据&quot;">&ZeroWidthSpace;</a></h2>
<p>在前端和后端，都可以使用 send() 方法来发送数据，使用事件处理程序来接收数据。</p>
<p>前端部分：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// 发送消息给服务器</span></span>
<span class="line"><span style="color: #A6ACCD">socket</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">send</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">要发送的消息</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 接收服务器发送的消息</span></span>
<span class="line"><span style="color: #A6ACCD">socket</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">addEventListener</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">message</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">event</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">message</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">event</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">data</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">接收到消息:</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">message</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span></code></pre>
</div><p>后端部分:</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #A6ACCD">wss</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">on</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">connection</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,(</span><span style="color: #A6ACCD; font-style: italic">ws</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">ws</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">on</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">message</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">message</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">接收到消息:</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">message</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 处理接收到的消息</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 发送消息给客户端</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">ws</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">send</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">服务器发送的消息</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span></code></pre>
</div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[怎么实现用户身份鉴权？]]></title>
            <link>https://desain7.top/frontend/node/怎么实现用户鉴权？.html</link>
            <guid>https://desain7.top/frontend/node/怎么实现用户鉴权？.html</guid>
            <pubDate>Sun, 15 Oct 2023 16:00:00 GMT</pubDate>
            <description><![CDATA[ Session
这里用到了一个中间件（express-session）
1. 设置会话
使用 express-session 中间件来设置会话相关配置项。
```js
const express =]]></description>
            <content:encoded><![CDATA[<h1 id="怎么实现用户身份鉴权" tabindex="-1">怎么实现用户身份鉴权？ <a class="header-anchor" href="#怎么实现用户身份鉴权" aria-label="Permalink to &quot;怎么实现用户身份鉴权？&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="session" tabindex="-1">Session <a class="header-anchor" href="#session" aria-label="Permalink to &quot;Session&quot;">&ZeroWidthSpace;</a></h2>
<p>这里用到了一个中间件（express-session）</p>
<ol>
<li>设置会话</li>
</ol>
<p>使用 express-session 中间件来设置会话相关配置项。</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> express </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">require</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">express</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> session </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">require</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">express-session</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> app </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">express</span><span style="color: #A6ACCD">()</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">app</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">use</span><span style="color: #A6ACCD">(</span><span style="color: #82AAFF">session</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">secret</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">Desain7</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #676E95; font-style: italic">// 密钥，用于签署和验证会话ID</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">resave</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">false</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">saveUninitialized</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">false</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">))</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #676E95; font-style: italic">// ...其他的中间件和路由设置</span></span></code></pre>
</div><ol start="2">
<li>创建会话</li>
</ol>
<p>用户登录成功后，将用户信息存储在会话对象中，并为会话生成一个唯一的会话ID。将 sessionId 与其他信息一起返回给前端。</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #A6ACCD">app</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">post</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">/login</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">req</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">res</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 验证用户名和密码逻辑...</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">username</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">password</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">req</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">body</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 假设验证成功，将用户信息存储在会话对象中</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">req</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">session</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">user</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    username</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">username</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 其他用户信息...</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">};</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 将会话ID返回给前端</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">res</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">send</span><span style="color: #F07178">(</span><span style="color: #89DDFF">{</span><span style="color: #F07178"> sessionId</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">req</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">session</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">id</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span></code></pre>
</div><ol start="3">
<li>发起会话</li>
</ol>
<p>在后续的请求中，若本地存在 sessionId， 则将它添加到请求头中发送给后端进行鉴权。</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #89DDFF; font-style: italic">import</span><span style="color: #A6ACCD"> axios </span><span style="color: #89DDFF; font-style: italic">from</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">axios</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 假设已经登录并保存了会话ID</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> sessionId </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> localStorage</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getItem</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">sessionId</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">axios</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">get</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">/protected</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">headers</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">Authorization</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> sessionId</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">},</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">response</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 处理受保护内容的逻辑</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">catch</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">error</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 处理鉴权失败的逻辑</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span></code></pre>
</div><ol start="4">
<li>验证会话</li>
</ol>
<p>后端创建一个中间件来验证会话的有效性。</p>
<p>在需要进行鉴权的路由上使用这个中间件。</p>
<div class="tip custom-block"><p class="custom-block-title">TIP</p>
<p>express-session 中间件会自动处理由 sessionId 到 session 的这个过程。</p>
</div>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// 验证会话的中间件函数</span></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">authenticateSession</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">req</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">res</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">next</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">req</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">session</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">user</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 会话有效，继续执行下一个中间件或路由处理函数</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">next</span><span style="color: #F07178">()</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 会话无效，返回鉴权失败的响应</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">res</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">status</span><span style="color: #F07178">(</span><span style="color: #F78C6C">401</span><span style="color: #F07178">)</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">send</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">Unauthorized</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 使用会话验证中间件的受保护路由</span></span>
<span class="line"><span style="color: #A6ACCD">app</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">get</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">/protected</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> authenticateSession</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">req</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">res</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 执行受保护的操作</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">res</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">send</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">Protected content</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span></code></pre>
</div><h2 id="jwt-json-web-token-鉴权" tabindex="-1">JWT（JSON Web Token） 鉴权 <a class="header-anchor" href="#jwt-json-web-token-鉴权" aria-label="Permalink to &quot;JWT（JSON Web Token） 鉴权&quot;">&ZeroWidthSpace;</a></h2>
<p>这里可以使用一个库来实现（jsonwebtoken 库）</p>
<ol>
<li>生成 JWT</li>
</ol>
<p>用户登陆成功后，可以根据用户信息生成 JWT</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> payload </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">id</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> user</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">id </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD"> </span><span style="color: #676E95; font-style: italic">// 用户信息载荷</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> secret </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">Desain7</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD"> </span><span style="color: #676E95; font-style: italic">// JWT 加密的密钥</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> options </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">expiresIn</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">7d</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD"> </span><span style="color: #676E95; font-style: italic">// JWT的配置项，这里配置了过期事件</span></span>
<span class="line"></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 生成 JWT</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> token </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> jwt</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">sign</span><span style="color: #A6ACCD">(payload</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> secret</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> options)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 登录成功</span></span>
<span class="line"><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">user</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> user</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">token</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">`</span><span style="color: #C3E88D">Bearer </span><span style="color: #89DDFF">${</span><span style="color: #A6ACCD">token</span><span style="color: #89DDFF">}`</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><ol start="2">
<li>存储 JWT</li>
</ol>
<p>在得到 JWT 之后，后端将 token 与前端需要的其他信息一并返回给前端。</p>
<p>前端得到 token 之后，可以将它缓存到本地（sessionStorage 或 localStorage 中）。</p>
<ol start="3">
<li>发送 JWT</li>
</ol>
<p>在请求拦截器中，在每次请求发送前检测本地是否存在 token，若存在，则将 token 添加到 Header 中。</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #A6ACCD">myAxios</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">interceptors</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">request</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">use</span><span style="color: #A6ACCD">(</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">config</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 添加请求头中的身份验证信息</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">user</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">config</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">headers</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">Authorization</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">user</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">jwtToken</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">config</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">},</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">error</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Promise</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">reject</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">error</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #A6ACCD">)</span></span></code></pre>
</div><ol start="4">
<li>验证 JWT</li>
</ol>
<p>后端编写一个验证 JWT 的中间件，在每次接收到前端传来的请求时验证 JWT 是否有效。</p>
<p>若当前页面不需要用户授权，则可以直接放行。</p>
<p>若 JWT 失效且当前页面需要用户授权，则返回 401 状态码，告诉用户当前身份认证失败。</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> jwt </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">require</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">jsonwebtoken</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> secret </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">Desain7</span><span style="color: #89DDFF">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">verifyToken</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">req</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">res</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">next</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">token</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">req</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">headers</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">authorization</span><span style="color: #89DDFF">?.</span><span style="color: #82AAFF">split</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)[</span><span style="color: #F78C6C">1</span><span style="color: #F07178">]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">token</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">req</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">path</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">endsWith</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">Code</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">res</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">status</span><span style="color: #F07178">(</span><span style="color: #F78C6C">401</span><span style="color: #F07178">)</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">json</span><span style="color: #F07178">(</span><span style="color: #89DDFF">{</span><span style="color: #F07178"> message</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">Authorization header not found</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">token</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">try</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">decoded</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">jwt</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">verify</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">token</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">secret</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">req</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">user</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">decoded</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">catch</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">err</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">res</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">status</span><span style="color: #F07178">(</span><span style="color: #F78C6C">401</span><span style="color: #F07178">)</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">json</span><span style="color: #F07178">(</span><span style="color: #89DDFF">{</span><span style="color: #F07178"> message</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">Authorization is expired</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #82AAFF">next</span><span style="color: #F07178">()</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="oauth" tabindex="-1">Oauth <a class="header-anchor" href="#oauth" aria-label="Permalink to &quot;Oauth&quot;">&ZeroWidthSpace;</a></h2>
<div class="info custom-block"><p class="custom-block-title">INFO</p>
<p>待补充</p>
</div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[什么是 WebSocket？]]></title>
            <link>https://desain7.top/interview/计算机网络/什么是WebSocket？.html</link>
            <guid>https://desain7.top/interview/计算机网络/什么是WebSocket？.html</guid>
            <pubDate>Tue, 26 Sep 2023 16:00:00 GMT</pubDate>
            <description><![CDATA[ WebSocket 概述
WebSocket 是 HTML5 提供的一种浏览器与服务器进行全双工通讯的网络技术，属于应用层协议。
它基于TCP传输协议，并复用HTTP的握手通道。浏览器和服务器只需要]]></description>
            <content:encoded><![CDATA[<h1 id="什么是-websocket" tabindex="-1">什么是 WebSocket？ <a class="header-anchor" href="#什么是-websocket" aria-label="Permalink to &quot;什么是 WebSocket？&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="websocket-概述" tabindex="-1">WebSocket 概述 <a class="header-anchor" href="#websocket-概述" aria-label="Permalink to &quot;WebSocket 概述&quot;">&ZeroWidthSpace;</a></h2>
<p><strong>WebSocket</strong> 是 HTML5 提供的一种浏览器与服务器进行全双工通讯的网络技术，属于应用层协议。</p>
<p>它基于TCP传输协议，并复用HTTP的握手通道。浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。</p>
<p>WebSocket 的出现解决了半双工通信的弊端。它最大的特点是：<strong>服务器可以向客户端主动推动消息，客户端也可以主动向服务器推送消息。</strong></p>
<p>相比传统的HTTP请求-响应模式，WebSocket 提供了实时、高效和双向的通信能力。</p>
<h2 id="websocket-的特点" tabindex="-1">WebSocket 的特点 <a class="header-anchor" href="#websocket-的特点" aria-label="Permalink to &quot;WebSocket 的特点&quot;">&ZeroWidthSpace;</a></h2>
<ol>
<li>双向通信</li>
</ol>
<p>WebSocket 提供了全双工通信，允许客户端和服务器之间同时发送和接收数据。</p>
<p>这使得实时性应用程序（如聊天应用、实时协作工具等）的开发更加简单和高效。</p>
<ol start="2">
<li>持久连接</li>
</ol>
<p>WebSocket 建立一次连接后，会保持连接状态，直到客户端或服务器主动关闭连接。</p>
<p>有效减少了通信的开销，提升了性能和效率。</p>
<ol start="3">
<li>低延迟</li>
</ol>
<p>由于 WebSocket 的持久连接和双向通信特性，它可以实现低延迟的实时数据传输。</p>
<p>相比传统的HTTP请求-响应模式，减少了通信的延迟和开销。</p>
<ol start="4">
<li>支持跨域</li>
</ol>
<p>WebSocket 不同于传统的 AJAX 请求，它支持跨域通信。服务器和客户端可以在不同的域之间建立 WebSocket 连接。</p>
<ol start="5">
<li>安全性</li>
</ol>
<p>WebSocket 支持加密和身份验证，可以通过安全的 WebSocket 连接（wss://）进行通信，确保数据的安全性和完整性。</p>
<h2 id="websocket-的工作原理" tabindex="-1">WebSocket 的工作原理 <a class="header-anchor" href="#websocket-的工作原理" aria-label="Permalink to &quot;WebSocket 的工作原理&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="建立连接" tabindex="-1">建立连接 <a class="header-anchor" href="#建立连接" aria-label="Permalink to &quot;建立连接&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li>
<p>客户端通过普通的HTTP请求发送一个特殊的Upgrade头部，指示将连接升级为 WebSocket 协议。</p>
</li>
<li>
<p>服务器收到请求后，验证并确认升级协议为 WebSocket，返回状态码101 Switching Protocols 的响应。</p>
</li>
<li>
<p>连接建立后，客户端和服务器之间建立了一个持久化的双向通信通道。</p>
</li>
</ul>
<h3 id="websocket-协议格式" tabindex="-1">WebSocket 协议格式 <a class="header-anchor" href="#websocket-协议格式" aria-label="Permalink to &quot;WebSocket 协议格式&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li>WebSocket 协议使用帧（Frame）的格式进行消息的封装和传输。帧包含了一些必要的控制信息和负载数据，用于描述和传递消息。</li>
</ul>
<h3 id="数据传输" tabindex="-1">数据传输 <a class="header-anchor" href="#数据传输" aria-label="Permalink to &quot;数据传输&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li>
<p>客户端和服务器可以通过发送帧来进行双向通信。</p>
</li>
<li>
<p>客户端和服务器可以随时发送帧给对方，无需等待请求-响应的模式。</p>
</li>
<li>
<p>帧可以是文本类型（包含Unicode字符）或二进制类型（原始字节数据）。并支持进行分片传输，一个消息可以被分成多个帧进行传输。</p>
</li>
</ul>
<h3 id="心跳机制" tabindex="-1">心跳机制 <a class="header-anchor" href="#心跳机制" aria-label="Permalink to &quot;心跳机制&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li>
<p>WebSocket 连接是持久化的，为了保持连接的活跃状态，客户端和服务器可以定期发送心跳消息。</p>
</li>
<li>
<p>心跳消息是一个特殊的帧，用于确认连接的存活性。</p>
</li>
</ul>
<h3 id="关闭连接" tabindex="-1">关闭连接 <a class="header-anchor" href="#关闭连接" aria-label="Permalink to &quot;关闭连接&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li>
<p>客户端或服务器可以发送一个特殊的关闭帧来关闭连接。关闭帧包含关闭码和关闭原因，用于描述关闭的原因。</p>
</li>
<li>
<p>接收到关闭帧后，另一方也会发送关闭帧以确认关闭。</p>
</li>
</ul>
<h2 id="websocket-的使用" tabindex="-1">WebSocket 的使用 <a class="header-anchor" href="#websocket-的使用" aria-label="Permalink to &quot;WebSocket 的使用&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="客户端" tabindex="-1">客户端 <a class="header-anchor" href="#客户端" aria-label="Permalink to &quot;客户端&quot;">&ZeroWidthSpace;</a></h3>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// 在index.html中直接写WebSocket，设置服务端的端口号为 9999</span></span>
<span class="line"><span style="color: #C792EA">let</span><span style="color: #A6ACCD"> ws </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">new</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">WebSocket</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">ws://localhost:8080</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 在客户端与服务端建立连接后触发</span></span>
<span class="line"><span style="color: #A6ACCD">ws</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">onopen</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">Connection open.</span><span style="color: #89DDFF">&quot;</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">ws</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">send</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">hello</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">};</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 在服务端给客户端发来消息的时候触发</span></span>
<span class="line"><span style="color: #A6ACCD">ws</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">onmessage</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">res</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">res</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span><span style="color: #F07178">       </span><span style="color: #676E95; font-style: italic">// 打印的是MessageEvent对象</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">res</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">data</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span><span style="color: #F07178">  </span><span style="color: #676E95; font-style: italic">// 打印的是收到的消息</span></span>
<span class="line"><span style="color: #89DDFF">};</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 在客户端与服务端建立关闭后触发</span></span>
<span class="line"><span style="color: #A6ACCD">ws</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">onclose</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">evt</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">Connection closed.</span><span style="color: #89DDFF">&quot;</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">};</span></span></code></pre>
</div><h3 id="服务端" tabindex="-1">服务端 <a class="header-anchor" href="#服务端" aria-label="Permalink to &quot;服务端&quot;">&ZeroWidthSpace;</a></h3>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> WebSocket </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">require</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">ws</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> wss </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">new</span><span style="color: #A6ACCD"> WebSocket</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">Server</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">port</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">8080</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span><span style="color: #A6ACCD"> </span><span style="color: #676E95; font-style: italic">// 创建WebSocket服务器实例，指定监听的端口</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">wss</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">on</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">connection</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">ws</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #F07178">  </span><span style="color: #676E95; font-style: italic">// 当有客户端连接时触发connection事件</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">Client connected</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 处理客户端消息</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">ws</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">on</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">message</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">message</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">Received message:</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">message</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 在这里可以对收到的消息进行处理</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 向客户端发送消息</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">ws</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">send</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">Server message: Hello!</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 处理客户端断开连接</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">ws</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">on</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">close</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">Client disconnected</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span></code></pre>
</div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[css 常见布局的实现]]></title>
            <link>https://desain7.top/interview/css/css 常见布局的实现.html</link>
            <guid>https://desain7.top/interview/css/css 常见布局的实现.html</guid>
            <pubDate>Sat, 23 Sep 2023 16:00:00 GMT</pubDate>
            <description><![CDATA[ 单行、多行文本溢出隐藏
单行文本溢出 
```css
.single {
  overflow: hidden;            // 溢出隐藏
  text-overflow: ellips]]></description>
            <content:encoded><![CDATA[<h1 id="css-常见布局的实现" tabindex="-1">css 常见布局的实现 <a class="header-anchor" href="#css-常见布局的实现" aria-label="Permalink to &quot;css 常见布局的实现&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="单行、多行文本溢出隐藏" tabindex="-1">单行、多行文本溢出隐藏 <a class="header-anchor" href="#单行、多行文本溢出隐藏" aria-label="Permalink to &quot;单行、多行文本溢出隐藏&quot;">&ZeroWidthSpace;</a></h2>
<p><strong>单行文本溢出</strong></p>
<div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #89DDFF">.</span><span style="color: #FFCB6B">single</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">overflow</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> hidden</span><span style="color: #89DDFF">;</span><span style="color: #A6ACCD">            // 溢出隐藏</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">text-overflow</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> ellipsis</span><span style="color: #89DDFF">;</span><span style="color: #A6ACCD">      // 溢出用省略号显示</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">white-space</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> nowrap</span><span style="color: #89DDFF">;</span><span style="color: #A6ACCD">         // 规定段落中的文本不进行换行</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><p><strong>多行文本溢出</strong></p>
<div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #89DDFF">.</span><span style="color: #FFCB6B">multi</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">overflow</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> hidden</span><span style="color: #89DDFF">;</span><span style="color: #A6ACCD">            // 溢出隐藏</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">text-overflow</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> ellipsis</span><span style="color: #89DDFF">;</span><span style="color: #A6ACCD">     // 溢出用省略号显示</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">display</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD">-webkit-box</span><span style="color: #89DDFF">;</span><span style="color: #A6ACCD">         // 作为弹性伸缩盒子模型显示。</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #FFCB6B">-webkit-box-orient</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD">vertical</span><span style="color: #89DDFF">;</span><span style="color: #A6ACCD"> // 设置伸缩盒子的子元素排列方式：从上到下垂直排列</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #FFCB6B">-webkit-line-clamp</span><span style="color: #89DDFF">:</span><span style="color: #F78C6C">3</span><span style="color: #89DDFF">;</span><span style="color: #A6ACCD">        // 显示的行数</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="两栏布局的实现" tabindex="-1">两栏布局的实现 <a class="header-anchor" href="#两栏布局的实现" aria-label="Permalink to &quot;两栏布局的实现&quot;">&ZeroWidthSpace;</a></h2>
<blockquote>
<p>页面中共两栏，左边一栏宽度固定，右边一栏宽度自适应。</p>
</blockquote>
<ol>
<li>浮动 + margin</li>
</ol>
<ul>
<li>左侧元素给定一个宽度，并设置向左浮动。</li>
<li>右侧元素 margin-left 设置为左侧元素的宽度。</li>
</ul>
<div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #89DDFF">.</span><span style="color: #FFCB6B">outer</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">height</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">100px</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">.</span><span style="color: #FFCB6B">left</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">float</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> left</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">width</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">200px</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">background</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> tomato</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">.</span><span style="color: #FFCB6B">right</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">margin-left</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">200px</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">width</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> auto</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">background</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> gold</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><ol start="2">
<li>浮动 + BFC</li>
</ol>
<ul>
<li>左侧元素左浮动</li>
<li>右侧元素开启 BFC</li>
</ul>
<div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #89DDFF">.</span><span style="color: #FFCB6B">left</span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">width</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">100px</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">height</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">200px</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">background</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> red</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">float</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> left</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">.</span><span style="color: #FFCB6B">right</span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">height</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">300px</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">background</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> blue</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">overflow</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> hidden</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span></span></code></pre>
</div><ol start="3">
<li>flex 布局</li>
</ol>
<ul>
<li>父元素开启 flex 布局</li>
<li>左侧元素固定宽度</li>
<li>右侧元素设置 flex 为 1</li>
</ul>
<div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #89DDFF">.</span><span style="color: #FFCB6B">outer</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">display</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> flex</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">height</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">100px</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">.</span><span style="color: #FFCB6B">left</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">width</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">200px</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">background</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> tomato</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">.</span><span style="color: #FFCB6B">right</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">flex</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">background</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> gold</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><ol start="4">
<li>绝对定位 + margin</li>
</ol>
<ul>
<li>父元素设置相对定位</li>
<li>左侧元素设置绝对定位，给定宽度</li>
<li>右侧元素 margin-left 设置为左侧元素宽度</li>
</ul>
<div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #89DDFF">.</span><span style="color: #FFCB6B">outer</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">position</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> relative</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">height</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">100px</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">.</span><span style="color: #FFCB6B">left</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">position</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> absolute</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">width</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">200px</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">background</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> tomato</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">.</span><span style="color: #FFCB6B">right</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">margin-left</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">200px</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">background</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> gold</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><ol start="5">
<li>绝对定位</li>
</ol>
<ul>
<li>父元素设置相对定位</li>
<li>左侧元素给定宽度</li>
<li>右侧元素设置绝对定位，left 为左侧元素宽度，其余方向设置为 0</li>
</ul>
<h2 id="三栏布局的实现" tabindex="-1">三栏布局的实现 <a class="header-anchor" href="#三栏布局的实现" aria-label="Permalink to &quot;三栏布局的实现&quot;">&ZeroWidthSpace;</a></h2>
<blockquote>
<p>页面中共有三栏，左右两栏宽度固定，中间一栏自适应</p>
</blockquote>
<ol>
<li>绝对定位 + margin</li>
</ol>
<ul>
<li>左右两栏设置为绝对定位，给定宽度</li>
<li>中间栏 margin 设置为对应方向的宽度</li>
</ul>
<div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #89DDFF">.</span><span style="color: #FFCB6B">outer</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">position</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> relative</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">height</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">100px</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">.</span><span style="color: #FFCB6B">left</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">position</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> absolute</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">width</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">100px</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">height</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">100px</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">background</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> tomato</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">.</span><span style="color: #FFCB6B">right</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">position</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> absolute</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">top</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">right</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">width</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">200px</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">height</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">100px</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">background</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> gold</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">.</span><span style="color: #FFCB6B">center</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">margin-left</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">100px</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">margin-right</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">200px</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">height</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">100px</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">background</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> lightgreen</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><ol start="2">
<li>flex 布局</li>
</ol>
<ul>
<li>父级元素开启 flex 布局</li>
<li>左右元素固定大小</li>
<li>中间元素 flex 设置为 1</li>
</ul>
<div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #89DDFF">.</span><span style="color: #FFCB6B">outer</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">display</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> flex</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">height</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">100px</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">.</span><span style="color: #FFCB6B">left</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">width</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">100px</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">background</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> tomato</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">.</span><span style="color: #FFCB6B">right</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">width</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">100px</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">background</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> gold</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">.</span><span style="color: #FFCB6B">center</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">flex</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">background</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> lightgreen</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><ol start="3">
<li>浮动 + margin</li>
</ol>
<ul>
<li>左右两栏给定宽度，并设置对应方向的浮动</li>
<li>中间栏 margin 设置为对应方向的宽度</li>
<li><strong>中间栏必须放在最后</strong></li>
</ul>
<ol start="4">
<li>圣杯布局（浮动 + 定位 + 负边距）</li>
</ol>
<ul>
<li>父元素设置左右的 padding，使中间内容元素不受左右影响</li>
<li>三栏均向左浮动</li>
<li>中间栏宽度设置为父元素的宽度，此时其他栏会被挤到下一行</li>
<li>为左右两栏设置 margin 负值，将它们移动到上一行，并利用相对定位将它们定位到两边</li>
</ul>
<div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">div</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">class</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">container</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">&gt;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">div</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">class</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">content</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">&gt;&lt;/</span><span style="color: #F07178">div</span><span style="color: #89DDFF">&gt;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">div</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">class</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">left-sidebar</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">&gt;&lt;/</span><span style="color: #F07178">div</span><span style="color: #89DDFF">&gt;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">div</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">class</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">right-sidebar</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">&gt;&lt;/</span><span style="color: #F07178">div</span><span style="color: #89DDFF">&gt;</span></span>
<span class="line"><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">div</span><span style="color: #89DDFF">&gt;</span></span></code></pre>
</div><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #89DDFF">.</span><span style="color: #FFCB6B">container</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">padding-left</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">200px</span><span style="color: #89DDFF">;</span><span style="color: #A6ACCD"> </span><span style="color: #676E95; font-style: italic">/* 左侧边栏宽度 */</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">padding-right</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">250px</span><span style="color: #89DDFF">;</span><span style="color: #A6ACCD"> </span><span style="color: #676E95; font-style: italic">/* 右侧边栏宽度 */</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">height</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">100vh</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">.</span><span style="color: #FFCB6B">left-sidebar</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">.</span><span style="color: #FFCB6B">content</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">.</span><span style="color: #FFCB6B">right-sidebar</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">float</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> left</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">height</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">100vh</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">.</span><span style="color: #FFCB6B">content</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">width</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">100%</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">background-color</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">#</span><span style="color: #A6ACCD">0af</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">.</span><span style="color: #FFCB6B">left-sidebar</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">width</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">200px</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">margin-left</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">-100%</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">position</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> relative</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">left</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">-200px</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">background-color</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">#</span><span style="color: #A6ACCD">0fa</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">.</span><span style="color: #FFCB6B">right-sidebar</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">width</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">250px</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">margin-left</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">-250px</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">position</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> relative</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">right</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">-250px</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">background-color</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">#</span><span style="color: #A6ACCD">fa0</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><ol start="5">
<li>双飞翼布局（浮动 + 定位 + 负边距）</li>
</ol>
<div class="tip custom-block"><p class="custom-block-title">TIP</p>
<p>双飞翼布局与圣杯布局的不同之处在于，双飞翼布局的中间 content 部分多了一个子容器存在，通过控制 content 的子容器的 margin 或者 padding 空出左右两列的宽度。</p>
</div>
<div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">div</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">class</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">container</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">&gt;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">div</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">class</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">content-container</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">&gt;</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">div</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">class</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">content</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">&gt;&lt;/</span><span style="color: #F07178">div</span><span style="color: #89DDFF">&gt;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">div</span><span style="color: #89DDFF">&gt;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">div</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">class</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">left-sidebar</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">&gt;&lt;/</span><span style="color: #F07178">div</span><span style="color: #89DDFF">&gt;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178">div</span><span style="color: #89DDFF"> </span><span style="color: #C792EA">class</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">right-sidebar</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">&gt;&lt;/</span><span style="color: #F07178">div</span><span style="color: #89DDFF">&gt;</span></span>
<span class="line"><span style="color: #89DDFF">&lt;/</span><span style="color: #F07178">div</span><span style="color: #89DDFF">&gt;</span></span></code></pre>
</div><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #89DDFF">.</span><span style="color: #FFCB6B">container</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">height</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">100vh</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">.</span><span style="color: #FFCB6B">left-sidebar</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">.</span><span style="color: #FFCB6B">content</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">.</span><span style="color: #FFCB6B">right-sidebar</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">float</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> left</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">height</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">100vh</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">.</span><span style="color: #FFCB6B">left-sidebar</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">margin-left</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">-100%</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">width</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">250px</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">background</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> tomato</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">.</span><span style="color: #FFCB6B">right-sidebar</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">margin-left</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">-250px</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">width</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">250px</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">background</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> gold</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">.</span><span style="color: #FFCB6B">content-container</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">float</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> left</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">width</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">100%</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">height</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">100vh</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">background</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> lightgreen</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #676E95; font-style: italic">/* 与圣杯布局最大的不同，内容区域两边的内容由其中的子元素空出 */</span></span>
<span class="line"><span style="color: #89DDFF">.</span><span style="color: #FFCB6B">content</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">margin</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">0</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">250px</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">height</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">100vh</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="水平垂直居中的实现" tabindex="-1">水平垂直居中的实现 <a class="header-anchor" href="#水平垂直居中的实现" aria-label="Permalink to &quot;水平垂直居中的实现&quot;">&ZeroWidthSpace;</a></h2>
<ol>
<li>绝对定位 + transform</li>
</ol>
<div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #89DDFF">.</span><span style="color: #FFCB6B">parent</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">position</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> relative</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #A6ACCD"> </span></span>
<span class="line"><span style="color: #89DDFF">.</span><span style="color: #FFCB6B">child</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">position</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> absolute</span><span style="color: #89DDFF">;</span><span style="color: #A6ACCD"> </span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">left</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">50%</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">top</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">50%</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">transform</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">translate</span><span style="color: #89DDFF">(</span><span style="color: #F78C6C">-50%</span><span style="color: #89DDFF">,</span><span style="color: #F78C6C">-50%</span><span style="color: #89DDFF">);</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><ol start="2">
<li>绝对定位 + 方向</li>
</ol>
<blockquote>
<p>适用于盒子有宽高的情况</p>
</blockquote>
<ul>
<li>利用绝对定位，设置四个方向的值都为 0，并将margin设置为auto</li>
<li>由于宽高固定，因此对应方向实现平分，可以实现水平和垂直方向上的居中。</li>
</ul>
<div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #89DDFF">.</span><span style="color: #FFCB6B">parent</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">position</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> relative</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #A6ACCD"> </span></span>
<span class="line"><span style="color: #89DDFF">.</span><span style="color: #FFCB6B">child</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">position</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> absolute</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">top</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">bottom</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">left</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">right</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">margin</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> auto</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><ol start="3">
<li>绝对定位 + margin</li>
</ol>
<blockquote>
<p>适用于盒子宽高已知的情况</p>
</blockquote>
<div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #89DDFF">.</span><span style="color: #FFCB6B">parent</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">position</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> relative</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #A6ACCD"> </span></span>
<span class="line"><span style="color: #89DDFF">.</span><span style="color: #FFCB6B">child</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">position</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> absolute</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">top</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">50%</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">left</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">50%</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">margin-top</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">-50px</span><span style="color: #89DDFF">;</span><span style="color: #A6ACCD">     </span><span style="color: #676E95; font-style: italic">/* 自身 height 的一半 */</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #B2CCD6">margin-left</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">-50px</span><span style="color: #89DDFF">;</span><span style="color: #A6ACCD">    </span><span style="color: #676E95; font-style: italic">/* 自身 width 的一半 */</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><ol start="4">
<li>flex 布局</li>
</ol>
<blockquote>
<p>父元素开启 flex 布局后，子元素的 margin 设置为 auto</p>
</blockquote>
<div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #89DDFF">.</span><span style="color: #FFCB6B">parent</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #B2CCD6">display</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> flex</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #B2CCD6">justify-content</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD">center</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #B2CCD6">align-items</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD">center</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[快速 diff 算法]]></title>
            <link>https://desain7.top/interview/vue/快速diff算法.html</link>
            <guid>https://desain7.top/interview/vue/快速diff算法.html</guid>
            <pubDate>Thu, 21 Sep 2023 16:00:00 GMT</pubDate>
            <description><![CDATA[ 相同的前置元素和后置元素
有别于简单 Diff 算法和双端 Diff 算法，快速 Diff 算法包含预处理步骤，这借鉴了纯文本 Diff 算法的思路。
在对两段文本进行 Diff 之前，可以先对它们]]></description>
            <content:encoded><![CDATA[<h1 id="快速-diff-算法" tabindex="-1">快速 diff 算法 <a class="header-anchor" href="#快速-diff-算法" aria-label="Permalink to &quot;快速 diff 算法&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="相同的前置元素和后置元素" tabindex="-1">相同的前置元素和后置元素 <a class="header-anchor" href="#相同的前置元素和后置元素" aria-label="Permalink to &quot;相同的前置元素和后置元素&quot;">&ZeroWidthSpace;</a></h2>
<p>有别于简单 Diff 算法和双端 Diff 算法，快速 Diff 算法包含预处理步骤，这借鉴了纯文本 Diff 算法的思路。</p>
<p>在对两段文本进行 Diff 之前，可以先对它们进行全等比较：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #A6ACCD">(text1 </span><span style="color: #89DDFF">===</span><span style="color: #A6ACCD"> text2) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">true</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>如果两段文本全等，就不需要进入核心 Diff 算法的步骤了，预处理的过程还会处理两端文本相同的前缀和后缀。</p>
<p>假设有下面两段文本：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #A6ACCD">text1 </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">hello my world</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">text2 </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">hello your world</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">;</span></span></code></pre>
</div><p>对于这两段文本，内容相同的部分，是不需要进行核心 Diff 操作的。因此，对于 text1 和 text2 来说，真正需要进行 Diff 操作的部分是：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #A6ACCD">text1 </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">my</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">text2 </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">your</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">;</span></span></code></pre>
</div><p>这样，在特定的情况下，就可以轻松地判断文本的插入和删除。</p>
<p>快速 Diff 算法正是借鉴了这种预处理的思路。对于下面这组节点：</p>
<p><img src="https://res.weread.qq.com/wrepub/CB_3300028078_image00584.jpeg" alt=""></p>
<p>它们有相同的前置节点 p-1 和相同的后置节点 p-2 和 p-3。</p>
<p>对于相同的部分，由于它们在新旧两组子结点中的相对位置不变，所以不需要移动它们，只需要在它们之间打补丁。</p>
<p>对于前置节点，可以建立索引 j = 0，让它指向两组子节点的开头。
然后在一个 while 循环中，让 j 递增，直到遇到不同的节点。</p>
<p>代码如下：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #F78C6C">01</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">patchKeyedChildren</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">n1</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">n2</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">container</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">02</span><span style="color: #F07178">   </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newChildren</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">n2</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">children</span></span>
<span class="line"><span style="color: #F78C6C">03</span><span style="color: #F07178">   </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldChildren</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">n1</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">children</span></span>
<span class="line"><span style="color: #F78C6C">04</span><span style="color: #F07178">   </span><span style="color: #676E95; font-style: italic">// 处理相同的前置节点</span></span>
<span class="line"><span style="color: #F78C6C">05</span><span style="color: #F07178">   </span><span style="color: #676E95; font-style: italic">// 索引 j 指向新旧两组子节点的开头</span></span>
<span class="line"><span style="color: #F78C6C">06</span><span style="color: #F07178">   </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">j</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span></span>
<span class="line"><span style="color: #F78C6C">07</span><span style="color: #F07178">   </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldVNode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldChildren</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">j</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">08</span><span style="color: #F07178">   </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newVNode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newChildren</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">j</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">09</span><span style="color: #F07178">   </span><span style="color: #676E95; font-style: italic">// while 循环向后遍历，直到遇到拥有不同 key 值的节点为止</span></span>
<span class="line"><span style="color: #F78C6C">10</span><span style="color: #F07178">   </span><span style="color: #89DDFF; font-style: italic">while</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">oldVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">11</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 调用 patch 函数进行更新</span></span>
<span class="line"><span style="color: #F78C6C">12</span><span style="color: #F07178">     </span><span style="color: #82AAFF">patch</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">oldVNode</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newVNode</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">container</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F78C6C">13</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 更新索引 j，让其递增</span></span>
<span class="line"><span style="color: #F78C6C">14</span><span style="color: #F07178">     </span><span style="color: #A6ACCD">j</span><span style="color: #89DDFF">++</span></span>
<span class="line"><span style="color: #F78C6C">15</span><span style="color: #F07178">     </span><span style="color: #A6ACCD">oldVNode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldChildren</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">j</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">16</span><span style="color: #F07178">     </span><span style="color: #A6ACCD">newVNode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newChildren</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">j</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">17</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">18</span></span>
<span class="line"><span style="color: #F78C6C">19</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>使用 while 循环查找所有相同前置节点，并在过程中调用 patch 对它们进行打补丁，直到遇到 key 不同的节点。</p>
<p>处理完相同的前置节点后，就要开始处理相同的后置节点了。由于新旧子节点的数量可能不同，所以需要用两个索引来表示，它们都指向新旧子节点中的最后一个节点。</p>
<p>同样，需要开启一个 while 循环，从后向前遍历这两组子节点，直到遇到 key 不同的节点。</p>
<p>代码如下：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #F78C6C">01</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">patchKeyedChildren</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">n1</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">n2</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">container</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">02</span><span style="color: #F07178">   </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newChildren</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">n2</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">children</span></span>
<span class="line"><span style="color: #F78C6C">03</span><span style="color: #F07178">   </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldChildren</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">n1</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">children</span></span>
<span class="line"><span style="color: #F78C6C">04</span><span style="color: #F07178">   </span><span style="color: #676E95; font-style: italic">// 更新相同的前置节点</span></span>
<span class="line"><span style="color: #F78C6C">05</span><span style="color: #F07178">   </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">j</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span></span>
<span class="line"><span style="color: #F78C6C">06</span><span style="color: #F07178">   </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldVNode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldChildren</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">j</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">07</span><span style="color: #F07178">   </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newVNode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newChildren</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">j</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">08</span><span style="color: #F07178">   </span><span style="color: #89DDFF; font-style: italic">while</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">oldVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">09</span><span style="color: #F07178">     </span><span style="color: #82AAFF">patch</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">oldVNode</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newVNode</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">container</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F78C6C">10</span><span style="color: #F07178">     </span><span style="color: #A6ACCD">j</span><span style="color: #89DDFF">++</span></span>
<span class="line"><span style="color: #F78C6C">11</span><span style="color: #F07178">     </span><span style="color: #A6ACCD">oldVNode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldChildren</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">j</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">12</span><span style="color: #F07178">     </span><span style="color: #A6ACCD">newVNode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newChildren</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">j</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">13</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">14</span></span>
<span class="line"><span style="color: #F78C6C">15</span><span style="color: #F07178">   </span><span style="color: #676E95; font-style: italic">// 更新相同的后置节点</span></span>
<span class="line"><span style="color: #F78C6C">16</span><span style="color: #F07178">   </span><span style="color: #676E95; font-style: italic">// 索引 oldEnd 指向旧的一组子节点的最后一个节点</span></span>
<span class="line"><span style="color: #F78C6C">17</span><span style="color: #F07178">   </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldEnd</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldChildren</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span></span>
<span class="line"><span style="color: #F78C6C">18</span><span style="color: #F07178">   </span><span style="color: #676E95; font-style: italic">// 索引 newEnd 指向新的一组子节点的最后一个节点</span></span>
<span class="line"><span style="color: #F78C6C">19</span><span style="color: #F07178">   </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newEnd</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newChildren</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span></span>
<span class="line"><span style="color: #F78C6C">20</span></span>
<span class="line"><span style="color: #F78C6C">21</span><span style="color: #F07178">   </span><span style="color: #A6ACCD">oldVNode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldChildren</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">oldEnd</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">22</span><span style="color: #F07178">   </span><span style="color: #A6ACCD">newVNode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newChildren</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">newEnd</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">23</span></span>
<span class="line"><span style="color: #F78C6C">24</span><span style="color: #F07178">   </span><span style="color: #676E95; font-style: italic">// while 循环从后向前遍历，直到遇到拥有不同 key 值的节点为止</span></span>
<span class="line"><span style="color: #F78C6C">25</span><span style="color: #F07178">   </span><span style="color: #89DDFF; font-style: italic">while</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">oldVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">26</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 调用 patch 函数进行更新</span></span>
<span class="line"><span style="color: #F78C6C">27</span><span style="color: #F07178">     </span><span style="color: #82AAFF">patch</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">oldVNode</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newVNode</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">container</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F78C6C">28</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 递减 oldEnd 和 nextEnd</span></span>
<span class="line"><span style="color: #F78C6C">29</span><span style="color: #F07178">     </span><span style="color: #A6ACCD">oldEnd</span><span style="color: #89DDFF">--</span></span>
<span class="line"><span style="color: #F78C6C">30</span><span style="color: #F07178">     </span><span style="color: #A6ACCD">newEnd</span><span style="color: #89DDFF">--</span></span>
<span class="line"><span style="color: #F78C6C">31</span><span style="color: #F07178">     </span><span style="color: #A6ACCD">oldVNode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldChildren</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">oldEnd</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">32</span><span style="color: #F07178">     </span><span style="color: #A6ACCD">newVNode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newChildren</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">newEnd</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">33</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">34</span></span>
<span class="line"><span style="color: #F78C6C">35</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>此时，新旧节点的状态如下：</p>
<p><img src="https://res.weread.qq.com/wrepub/CB_3300028078_image00588.jpeg" alt=""></p>
<p>在相同的前置和后置节点被处理完毕后，旧的一组子节点全部处理完毕，但在新子节点遗留了一个未被处理的节点 p-4。</p>
<p>如何让程序知道节点 p-4 是一个新增节点呢？</p>
<p>可以通过三个索引 j、newEnd、oldEnd 来得出这个结论：</p>
<ul>
<li>
<p><code>oldEnd &lt; j</code> 成立，说明在预处理的过程中，所有旧子节点都处理完毕了。</p>
</li>
<li>
<p><code>newEnd &gt;= j</code> 成立， 说明预处理结束后，新子节点中，仍有未处理的节点，这些节点将被视作新增节点。</p>
</li>
</ul>
<p>当两个条件同时成立时，说明新子节点中存在遗留节点，且它们都是新增节点，所以需要将它们挂载到正确的位置。</p>
<p>如何挂载到正确的位置呢？首先需要找到正确的锚点元素，观察可得新增的节点应挂载到 p-2 节点对应的真实 DOM 前。所以 p-2 对应的真实 DOM 节点就是挂载的锚点元素。</p>
<p>代码如下：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #F78C6C">01</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">patchKeyedChildren</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">n1</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">n2</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">container</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">02</span><span style="color: #F07178">   </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newChildren</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">n2</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">children</span></span>
<span class="line"><span style="color: #F78C6C">03</span><span style="color: #F07178">   </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldChildren</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">n1</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">children</span></span>
<span class="line"><span style="color: #F78C6C">04</span><span style="color: #F07178">   </span><span style="color: #676E95; font-style: italic">// 更新相同的前置节点</span></span>
<span class="line"><span style="color: #F78C6C">05</span><span style="color: #F07178">   </span><span style="color: #676E95; font-style: italic">// 省略部分代码</span></span>
<span class="line"><span style="color: #F78C6C">06</span></span>
<span class="line"><span style="color: #F78C6C">07</span><span style="color: #F07178">   </span><span style="color: #676E95; font-style: italic">// 更新相同的后置节点</span></span>
<span class="line"><span style="color: #F78C6C">08</span><span style="color: #F07178">   </span><span style="color: #676E95; font-style: italic">// 省略部分代码</span></span>
<span class="line"><span style="color: #F78C6C">09</span></span>
<span class="line"><span style="color: #F78C6C">10</span><span style="color: #F07178">   </span><span style="color: #676E95; font-style: italic">// 预处理完毕后，如果满足如下条件，则说明从 j --&gt; newEnd 之间的节点应作为新节点插入</span></span>
<span class="line"><span style="color: #F78C6C">11</span><span style="color: #F07178">   </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">j</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&gt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldEnd</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">j</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newEnd</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">12</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 锚点的索引</span></span>
<span class="line"><span style="color: #F78C6C">13</span><span style="color: #F07178">     </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">anchorIndex</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newEnd</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span></span>
<span class="line"><span style="color: #F78C6C">14</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 锚点元素</span></span>
<span class="line"><span style="color: #F78C6C">15</span><span style="color: #F07178">     </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">anchor</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">anchorIndex</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newChildren</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #F07178"> </span><span style="color: #89DDFF">?</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newChildren</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">anchorIndex</span><span style="color: #F07178">]</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">el</span><span style="color: #F07178"> </span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #89DDFF">null</span></span>
<span class="line"><span style="color: #F78C6C">16</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 采用 while 循环，调用 patch 函数逐个挂载新增节点</span></span>
<span class="line"><span style="color: #F78C6C">17</span><span style="color: #F07178">     </span><span style="color: #89DDFF; font-style: italic">while</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">j</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newEnd</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">18</span><span style="color: #F07178">       </span><span style="color: #82AAFF">patch</span><span style="color: #F07178">(</span><span style="color: #89DDFF">null,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newChildren</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">j</span><span style="color: #89DDFF">++</span><span style="color: #F07178">]</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">container</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">anchor</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F78C6C">19</span><span style="color: #F07178">     </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">20</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">21</span></span>
<span class="line"><span style="color: #F78C6C">22</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>若索引值大于新子节点的数量，则说明索引 newEnd 对应的节点已经是尾部节点了，此时不需要再提供锚点元素了。</p>
<p>得到锚点元素后，可以再一个 while 循环中遍历 j 和 newEnd 间的节点，并调用 patch 函数进行挂载。</p>
<p><strong>而对于删除节点的情况：</strong></p>
<p>以下面这组新旧子节点为例：</p>
<p><img src="https://res.weread.qq.com/wrepub/CB_3300028078_image00590.jpeg" alt=""></p>
<p>对相同的前置节点和后置节点进行处理的方式与新增时相同。</p>
<p>处理后的状态如下：</p>
<p><img src="https://res.weread.qq.com/wrepub/CB_3300028078_image00593.jpeg" alt=""></p>
<p>当相同的前置节点和后置节点处理完毕后，新子节点已经全部处理完毕了，而旧子节点中遗留了一个节点 p-2。</p>
<p>这说明，应该对 p-2 执行卸载操作。</p>
<p>当遗留的节点有多个时，我们应该将索引 j 和 索引 oldEnd 间的所有节点卸载。</p>
<p>代码如下：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #F78C6C">01</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">patchKeyedChildren</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">n1</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">n2</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">container</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">02</span><span style="color: #F07178">   </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newChildren</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">n2</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">children</span></span>
<span class="line"><span style="color: #F78C6C">03</span><span style="color: #F07178">   </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldChildren</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">n1</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">children</span></span>
<span class="line"><span style="color: #F78C6C">04</span><span style="color: #F07178">   </span><span style="color: #676E95; font-style: italic">// 更新相同的前置节点</span></span>
<span class="line"><span style="color: #F78C6C">05</span><span style="color: #F07178">   </span><span style="color: #676E95; font-style: italic">// 省略部分代码</span></span>
<span class="line"><span style="color: #F78C6C">06</span></span>
<span class="line"><span style="color: #F78C6C">07</span><span style="color: #F07178">   </span><span style="color: #676E95; font-style: italic">// 更新相同的后置节点</span></span>
<span class="line"><span style="color: #F78C6C">08</span><span style="color: #F07178">   </span><span style="color: #676E95; font-style: italic">// 省略部分代码</span></span>
<span class="line"><span style="color: #F78C6C">09</span></span>
<span class="line"><span style="color: #F78C6C">10</span><span style="color: #F07178">   </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">j</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&gt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldEnd</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">j</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newEnd</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">11</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 省略部分代码</span></span>
<span class="line"><span style="color: #F78C6C">12</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">j</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&gt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newEnd</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">j</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldEnd</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">13</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// j -&gt; oldEnd 之间的节点应该被卸载</span></span>
<span class="line"><span style="color: #F78C6C">14</span><span style="color: #F07178">     </span><span style="color: #89DDFF; font-style: italic">while</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">j</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldEnd</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">15</span><span style="color: #F07178">       </span><span style="color: #82AAFF">unmount</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">oldChildren</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">j</span><span style="color: #89DDFF">++</span><span style="color: #F07178">])</span></span>
<span class="line"><span style="color: #F78C6C">16</span><span style="color: #F07178">     </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">17</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">18</span></span>
<span class="line"><span style="color: #F78C6C">19</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>可以在之前的代码的基础上新增一个 else...if 的分支，当满足 j &gt; newEnd &amp;&amp; j &lt;= oldEnd 的条件时，开启一个 while 循环，并调用 unmount 函数将它们逐个卸载。</p>
<h2 id="判断是否需要进行-dom-移动操作" tabindex="-1">判断是否需要进行 DOM 移动操作 <a class="header-anchor" href="#判断是否需要进行-dom-移动操作" aria-label="Permalink to &quot;判断是否需要进行 DOM 移动操作&quot;">&ZeroWidthSpace;</a></h2>
<p>上面的代码中，当处理完相同的前置节点或后置节点后，新旧两组子节点中总会有一组子节点全部被处理完毕，这是一种理想的情况。</p>
<p>实际情况往往更加复杂，如下：</p>
<p><img src="https://res.weread.qq.com/wrepub/CB_3300028078_image00595.jpeg" alt=""></p>
<p>相同的前置节点只有 p-1，而相同的后置节点只有 p-5。</p>
<p>预处理结束后，新旧节点的状态如下：</p>
<p><img src="https://res.weread.qq.com/wrepub/CB_3300028078_image00597.jpeg" alt=""></p>
<p>新旧子节点中，都存在部分节点未经处理，此时，就需要进一步处理。
与简单 Diff 算法、双端 Diff 算法相同，它们遵循同样的处理规则：</p>
<ul>
<li>判断是否有节点需要移动，该如何对节点进行移动</li>
<li>找出需要被添加或移除的节点</li>
</ul>
<p>在这种非理想情况下，相同的前置、后置节点被处理完毕后，索引 j、newEnd 和 oldEnd 不满足以下条件中的任何一个：</p>
<ul>
<li>j &gt; oldEnd &amp;&amp; j &lt;= newEnd</li>
<li>j &gt; newEnd &amp;&amp; j &lt;= oldEnd</li>
</ul>
<p>所以需要在之前的代码中增加新的 else 分支来处理：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #F78C6C">01</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">patchKeyedChildren</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">n1</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">n2</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">container</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">02</span><span style="color: #F07178">   </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newChildren</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">n2</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">children</span></span>
<span class="line"><span style="color: #F78C6C">03</span><span style="color: #F07178">   </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldChildren</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">n1</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">children</span></span>
<span class="line"><span style="color: #F78C6C">04</span><span style="color: #F07178">   </span><span style="color: #676E95; font-style: italic">// 更新相同的前置节点</span></span>
<span class="line"><span style="color: #F78C6C">05</span><span style="color: #F07178">   </span><span style="color: #676E95; font-style: italic">// 省略部分代码</span></span>
<span class="line"><span style="color: #F78C6C">06</span></span>
<span class="line"><span style="color: #F78C6C">07</span><span style="color: #F07178">   </span><span style="color: #676E95; font-style: italic">// 更新相同的后置节点</span></span>
<span class="line"><span style="color: #F78C6C">08</span><span style="color: #F07178">   </span><span style="color: #676E95; font-style: italic">// 省略部分代码</span></span>
<span class="line"><span style="color: #F78C6C">09</span></span>
<span class="line"><span style="color: #F78C6C">10</span><span style="color: #F07178">   </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">j</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&gt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldEnd</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">j</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newEnd</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">11</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 省略部分代码</span></span>
<span class="line"><span style="color: #F78C6C">12</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">j</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&gt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newEnd</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">j</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldEnd</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">13</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 省略部分代码</span></span>
<span class="line"><span style="color: #F78C6C">14</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">15</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 增加 else 分支来处理非理想情况</span></span>
<span class="line"><span style="color: #F78C6C">16</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">17</span></span>
<span class="line"><span style="color: #F78C6C">18</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>以下是具体的处理思路：</p>
<p>首先，构造一个数组 source，它的长度等于新一组子节点经过预处理后剩余未处理节点的数量，初始值为 -1。</p>
<p><img src="https://res.weread.qq.com/wrepub/CB_3300028078_image00598.jpeg" alt=""></p>
<p>可以通过下面的代码完成 source 数组的构造：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #F78C6C">01</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #A6ACCD"> (j </span><span style="color: #89DDFF">&gt;</span><span style="color: #A6ACCD"> oldEnd </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #A6ACCD"> j </span><span style="color: #89DDFF">&lt;=</span><span style="color: #A6ACCD"> newEnd) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">02</span><span style="color: #F07178">   </span><span style="color: #676E95; font-style: italic">// 省略部分代码</span></span>
<span class="line"><span style="color: #F78C6C">03</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #A6ACCD"> (j </span><span style="color: #89DDFF">&gt;</span><span style="color: #A6ACCD"> newEnd </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #A6ACCD"> j </span><span style="color: #89DDFF">&lt;=</span><span style="color: #A6ACCD"> oldEnd) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">04</span><span style="color: #F07178">   </span><span style="color: #676E95; font-style: italic">// 省略部分代码</span></span>
<span class="line"><span style="color: #F78C6C">05</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">06</span><span style="color: #F07178">   </span><span style="color: #676E95; font-style: italic">// 构造 source 数组</span></span>
<span class="line"><span style="color: #F78C6C">07</span><span style="color: #F07178">   </span><span style="color: #676E95; font-style: italic">// 新的一组子节点中剩余未处理节点的数量</span></span>
<span class="line"><span style="color: #F78C6C">08</span><span style="color: #F07178">   </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">count</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newEnd</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">j</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span></span>
<span class="line"><span style="color: #F78C6C">09</span><span style="color: #F07178">   </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">source</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">Array</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">count</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F78C6C">10</span><span style="color: #F07178">   </span><span style="color: #A6ACCD">source</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">fill</span><span style="color: #F07178">(</span><span style="color: #89DDFF">-</span><span style="color: #F78C6C">1</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F78C6C">11</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>数组 source 中的每一个元素分别对应了新子节点中未被处理的节点。</p>
<p>它将用于存储新的一组子节点中的节点在旧的一组子节点中的位置索引，后面将会使用它计算出一个最长递增子序列，并用于辅助完成 DOM 移动的操作。</p>
<p><img src="https://res.weread.qq.com/wrepub/CB_3300028078_image00599.jpeg" alt=""></p>
<p>对于新旧子节点中都存在的节点，更新 source 中的索引，旧子节点中不存在的节点则保留为 -1。</p>
<p>可以通过两层 for 循环来完成 source 数组的填充工作，外层循环用于遍历旧的一组子节点，内层循环用于遍历新的一组子节点。</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #F78C6C">01</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #A6ACCD"> (j </span><span style="color: #89DDFF">&gt;</span><span style="color: #A6ACCD"> oldEnd </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #A6ACCD"> j </span><span style="color: #89DDFF">&lt;=</span><span style="color: #A6ACCD"> newEnd) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">02</span><span style="color: #F07178">   </span><span style="color: #676E95; font-style: italic">// 省略部分代码</span></span>
<span class="line"><span style="color: #F78C6C">03</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #A6ACCD"> (j </span><span style="color: #89DDFF">&gt;</span><span style="color: #A6ACCD"> newEnd </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #A6ACCD"> j </span><span style="color: #89DDFF">&lt;=</span><span style="color: #A6ACCD"> oldEnd) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">04</span><span style="color: #F07178">   </span><span style="color: #676E95; font-style: italic">// 省略部分代码</span></span>
<span class="line"><span style="color: #F78C6C">05</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">06</span><span style="color: #F07178">   </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">count</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newEnd</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">j</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span></span>
<span class="line"><span style="color: #F78C6C">07</span><span style="color: #F07178">   </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">source</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">Array</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">count</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F78C6C">08</span><span style="color: #F07178">   </span><span style="color: #A6ACCD">source</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">fill</span><span style="color: #F07178">(</span><span style="color: #89DDFF">-</span><span style="color: #F78C6C">1</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F78C6C">09</span></span>
<span class="line"><span style="color: #F78C6C">10</span><span style="color: #F07178">   </span><span style="color: #676E95; font-style: italic">// oldStart 和 newStart 分别为起始索引，即 j</span></span>
<span class="line"><span style="color: #F78C6C">11</span><span style="color: #F07178">   </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldStart</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">j</span></span>
<span class="line"><span style="color: #F78C6C">12</span><span style="color: #F07178">   </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newStart</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">j</span></span>
<span class="line"><span style="color: #F78C6C">13</span><span style="color: #F07178">   </span><span style="color: #676E95; font-style: italic">// 遍历旧的一组子节点</span></span>
<span class="line"><span style="color: #F78C6C">14</span><span style="color: #F07178">   </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178"> (</span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldStart</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldEnd</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">++</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">15</span><span style="color: #F07178">     </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldVNode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldChildren</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">16</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 遍历新的一组子节点</span></span>
<span class="line"><span style="color: #F78C6C">17</span><span style="color: #F07178">     </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178"> (</span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">k</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newStart</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">k</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newEnd</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">k</span><span style="color: #89DDFF">++</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">18</span><span style="color: #F07178">       </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newVNode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newChildren</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">k</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">19</span><span style="color: #F07178">       </span><span style="color: #676E95; font-style: italic">// 找到拥有相同 key 值的可复用节点</span></span>
<span class="line"><span style="color: #F78C6C">20</span><span style="color: #F07178">       </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">oldVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">21</span><span style="color: #F07178">         </span><span style="color: #676E95; font-style: italic">// 调用 patch 进行更新</span></span>
<span class="line"><span style="color: #F78C6C">22</span><span style="color: #F07178">         </span><span style="color: #82AAFF">patch</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">oldVNode</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newVNode</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">container</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F78C6C">23</span><span style="color: #F07178">         </span><span style="color: #676E95; font-style: italic">// 最后填充 source 数组</span></span>
<span class="line"><span style="color: #F78C6C">24</span><span style="color: #F07178">         </span><span style="color: #A6ACCD">source</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">k</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newStart</span><span style="color: #F07178">] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span></span>
<span class="line"><span style="color: #F78C6C">25</span><span style="color: #F07178">       </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">26</span><span style="color: #F07178">     </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">27</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">28</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>由于数组 source 的索引是从 0 开始的，而未处理节点的索引未必从 0 开始，所以在填充数组时需要使用表达式 k -newStart 的值作为数组的索引值。</p>
<p>外层循环的变量 i 就是当前节点在旧的一组子节点中的位置索引，因此直接将变量 i 的值赋给source[k - newStart] 即可。</p>
<p>上面的代码依然存在问题，由于使用了双层 for 循环，在新旧子节点的数量较多时，这会带来性能问题。</p>
<p>可以为新节点构建一张索引表，用于存储节点的 key 和节点位置索引间的映射，从而避免使用双层 for 循环。如下：</p>
<p><img src="https://res.weread.qq.com/wrepub/CB_3300028078_image00600.jpeg" alt=""></p>
<p>通过索引表，可以快速地填充 source 数组。</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #F78C6C">01</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #A6ACCD"> (j </span><span style="color: #89DDFF">&gt;</span><span style="color: #A6ACCD"> oldEnd </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #A6ACCD"> j </span><span style="color: #89DDFF">&lt;=</span><span style="color: #A6ACCD"> newEnd) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">02</span><span style="color: #F07178">   </span><span style="color: #676E95; font-style: italic">// 省略部分代码</span></span>
<span class="line"><span style="color: #F78C6C">03</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #A6ACCD"> (j </span><span style="color: #89DDFF">&gt;</span><span style="color: #A6ACCD"> newEnd </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #A6ACCD"> j </span><span style="color: #89DDFF">&lt;=</span><span style="color: #A6ACCD"> oldEnd) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">04</span><span style="color: #F07178">   </span><span style="color: #676E95; font-style: italic">// 省略部分代码</span></span>
<span class="line"><span style="color: #F78C6C">05</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">06</span><span style="color: #F07178">   </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">count</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newEnd</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">j</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span></span>
<span class="line"><span style="color: #F78C6C">07</span><span style="color: #F07178">   </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">source</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">Array</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">count</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F78C6C">08</span><span style="color: #F07178">   </span><span style="color: #A6ACCD">source</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">fill</span><span style="color: #F07178">(</span><span style="color: #89DDFF">-</span><span style="color: #F78C6C">1</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F78C6C">09</span></span>
<span class="line"><span style="color: #F78C6C">10</span><span style="color: #F07178">   </span><span style="color: #676E95; font-style: italic">// oldStart 和 newStart 分别为起始索引，即 j</span></span>
<span class="line"><span style="color: #F78C6C">11</span><span style="color: #F07178">   </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldStart</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">j</span></span>
<span class="line"><span style="color: #F78C6C">12</span><span style="color: #F07178">   </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newStart</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">j</span></span>
<span class="line"><span style="color: #F78C6C">13</span><span style="color: #F07178">   </span><span style="color: #676E95; font-style: italic">// 构建索引表</span></span>
<span class="line"><span style="color: #F78C6C">14</span><span style="color: #F07178">   </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">keyIndex</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{}</span></span>
<span class="line"><span style="color: #F78C6C">15</span><span style="color: #F07178">   </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178">(</span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newStart</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newEnd</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">++</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">16</span><span style="color: #F07178">     </span><span style="color: #A6ACCD">keyIndex</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">newChildren</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">]</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span></span>
<span class="line"><span style="color: #F78C6C">17</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">18</span><span style="color: #F07178">   </span><span style="color: #676E95; font-style: italic">// 遍历旧的一组子节点中剩余未处理的节点</span></span>
<span class="line"><span style="color: #F78C6C">19</span><span style="color: #F07178">   </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178">(</span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldStart</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldEnd</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">++</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">20</span><span style="color: #F07178">     </span><span style="color: #A6ACCD">oldVNode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldChildren</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">21</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 通过索引表快速找到新的一组子节点中具有相同 key 值的节点位置</span></span>
<span class="line"><span style="color: #F78C6C">22</span><span style="color: #F07178">     </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">k</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">keyIndex</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">oldVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">23</span></span>
<span class="line"><span style="color: #F78C6C">24</span><span style="color: #F07178">     </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">typeof</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">k</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!==</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">undefined</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">25</span><span style="color: #F07178">       </span><span style="color: #A6ACCD">newVNode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newChildren</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">k</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">26</span><span style="color: #F07178">       </span><span style="color: #676E95; font-style: italic">// 调用 patch 函数完成更新</span></span>
<span class="line"><span style="color: #F78C6C">27</span><span style="color: #F07178">       </span><span style="color: #82AAFF">patch</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">oldVNode</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newVNode</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">container</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F78C6C">28</span><span style="color: #F07178">       </span><span style="color: #676E95; font-style: italic">// 填充 source 数组</span></span>
<span class="line"><span style="color: #F78C6C">29</span><span style="color: #F07178">       </span><span style="color: #A6ACCD">source</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">k</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newStart</span><span style="color: #F07178">] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span></span>
<span class="line"><span style="color: #F78C6C">30</span><span style="color: #F07178">     </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">31</span><span style="color: #F07178">       </span><span style="color: #676E95; font-style: italic">// 没找到</span></span>
<span class="line"><span style="color: #F78C6C">32</span><span style="color: #F07178">       </span><span style="color: #82AAFF">unmount</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">oldVNode</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F78C6C">33</span><span style="color: #F07178">     </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">34</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">35</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>source 数组填充完毕后，就应该判断节点是否需要移动了。</p>
<p>快速 Diff 算法判断节点是否需要移动地方法和简单 Diff 算法类似，如下所示：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #F78C6C">01</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #A6ACCD"> (j </span><span style="color: #89DDFF">&gt;</span><span style="color: #A6ACCD"> oldEnd </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #A6ACCD"> j </span><span style="color: #89DDFF">&lt;=</span><span style="color: #A6ACCD"> newEnd) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">02</span><span style="color: #F07178">   </span><span style="color: #676E95; font-style: italic">// 省略部分代码</span></span>
<span class="line"><span style="color: #F78C6C">03</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #A6ACCD"> (j </span><span style="color: #89DDFF">&gt;</span><span style="color: #A6ACCD"> newEnd </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #A6ACCD"> j </span><span style="color: #89DDFF">&lt;=</span><span style="color: #A6ACCD"> oldEnd) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">04</span><span style="color: #F07178">   </span><span style="color: #676E95; font-style: italic">// 省略部分代码</span></span>
<span class="line"><span style="color: #F78C6C">05</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">06</span><span style="color: #F07178">   </span><span style="color: #676E95; font-style: italic">// 构造 source 数组</span></span>
<span class="line"><span style="color: #F78C6C">07</span><span style="color: #F07178">   </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">count</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newEnd</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">j</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #F07178">  </span><span style="color: #676E95; font-style: italic">// 新的一组子节点中剩余未处理节点的数量</span></span>
<span class="line"><span style="color: #F78C6C">08</span><span style="color: #F07178">   </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">source</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">Array</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">count</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F78C6C">09</span><span style="color: #F07178">   </span><span style="color: #A6ACCD">source</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">fill</span><span style="color: #F07178">(</span><span style="color: #89DDFF">-</span><span style="color: #F78C6C">1</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F78C6C">10</span></span>
<span class="line"><span style="color: #F78C6C">11</span><span style="color: #F07178">   </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldStart</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">j</span></span>
<span class="line"><span style="color: #F78C6C">12</span><span style="color: #F07178">   </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newStart</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">j</span></span>
<span class="line"><span style="color: #F78C6C">13</span><span style="color: #F07178">   </span><span style="color: #676E95; font-style: italic">// 新增两个变量，moved 和 pos</span></span>
<span class="line"><span style="color: #F78C6C">14</span><span style="color: #F07178">   </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">moved</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">false</span></span>
<span class="line"><span style="color: #F78C6C">15</span><span style="color: #F07178">   </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">pos</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span></span>
<span class="line"><span style="color: #F78C6C">16</span></span>
<span class="line"><span style="color: #F78C6C">17</span><span style="color: #F07178">   </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">keyIndex</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{}</span></span>
<span class="line"><span style="color: #F78C6C">18</span><span style="color: #F07178">   </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178">(</span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newStart</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newEnd</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">++</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">19</span><span style="color: #F07178">     </span><span style="color: #A6ACCD">keyIndex</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">newChildren</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">]</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span></span>
<span class="line"><span style="color: #F78C6C">20</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">21</span><span style="color: #F07178">   </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178">(</span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldStart</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldEnd</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">++</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">22</span><span style="color: #F07178">     </span><span style="color: #A6ACCD">oldVNode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldChildren</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">23</span><span style="color: #F07178">     </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">k</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">keyIndex</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">oldVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">24</span></span>
<span class="line"><span style="color: #F78C6C">25</span><span style="color: #F07178">     </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">typeof</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">k</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!==</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">undefined</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">26</span><span style="color: #F07178">       </span><span style="color: #A6ACCD">newVNode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newChildren</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">k</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">27</span><span style="color: #F07178">       </span><span style="color: #82AAFF">patch</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">oldVNode</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newVNode</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">container</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F78C6C">28</span><span style="color: #F07178">       </span><span style="color: #A6ACCD">source</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">k</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newStart</span><span style="color: #F07178">] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span></span>
<span class="line"><span style="color: #F78C6C">29</span><span style="color: #F07178">       </span><span style="color: #676E95; font-style: italic">// 判断节点是否需要移动</span></span>
<span class="line"><span style="color: #F78C6C">30</span><span style="color: #F07178">       </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">k</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">pos</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">31</span><span style="color: #F07178">         </span><span style="color: #A6ACCD">moved</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">true</span></span>
<span class="line"><span style="color: #F78C6C">32</span><span style="color: #F07178">       </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">33</span><span style="color: #F07178">         </span><span style="color: #A6ACCD">pos</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">k</span></span>
<span class="line"><span style="color: #F78C6C">34</span><span style="color: #F07178">       </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">35</span><span style="color: #F07178">     </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">36</span><span style="color: #F07178">       </span><span style="color: #82AAFF">unmount</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">oldVNode</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F78C6C">37</span><span style="color: #F07178">     </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">38</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">39</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>在上面这段代码中，新增了两个变量 moved 和 pos。前者的初始值为 false，代表是否需要移动节点，后者的初始值为 0，代表遍历旧的一组子节点的过程中遇到的最大索引值 k。</p>
<p>如果在遍历过程中遇到的索引值呈现递增趋势，则说明不需要移动节点，反之则需要。</p>
<p>所以在第二个 for 循环内，需要通过比较变量 k 与变量 pos 的值来判断是否需要移动节点。</p>
<p>除此之外，还需要一个数量标识，用于表示<strong>已经更新过的节点数量</strong>。这个值应该小于新子节点中需要更新的节点数量。</p>
<p>一旦前者超过后者，则说明有多余的节点，要到将它们卸载。</p>
<p>代码如下：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #F78C6C">01</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #A6ACCD"> (j </span><span style="color: #89DDFF">&gt;</span><span style="color: #A6ACCD"> oldEnd </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #A6ACCD"> j </span><span style="color: #89DDFF">&lt;=</span><span style="color: #A6ACCD"> newEnd) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">02</span><span style="color: #F07178">   </span><span style="color: #676E95; font-style: italic">// 省略部分代码</span></span>
<span class="line"><span style="color: #F78C6C">03</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #A6ACCD"> (j </span><span style="color: #89DDFF">&gt;</span><span style="color: #A6ACCD"> newEnd </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #A6ACCD"> j </span><span style="color: #89DDFF">&lt;=</span><span style="color: #A6ACCD"> oldEnd) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">04</span><span style="color: #F07178">   </span><span style="color: #676E95; font-style: italic">// 省略部分代码</span></span>
<span class="line"><span style="color: #F78C6C">05</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">06</span><span style="color: #F07178">   </span><span style="color: #676E95; font-style: italic">// 构造 source 数组</span></span>
<span class="line"><span style="color: #F78C6C">07</span><span style="color: #F07178">   </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">count</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newEnd</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">j</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span></span>
<span class="line"><span style="color: #F78C6C">08</span><span style="color: #F07178">   </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">source</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">Array</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">count</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F78C6C">09</span><span style="color: #F07178">   </span><span style="color: #A6ACCD">source</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">fill</span><span style="color: #F07178">(</span><span style="color: #89DDFF">-</span><span style="color: #F78C6C">1</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F78C6C">10</span></span>
<span class="line"><span style="color: #F78C6C">11</span><span style="color: #F07178">   </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldStart</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">j</span></span>
<span class="line"><span style="color: #F78C6C">12</span><span style="color: #F07178">   </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newStart</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">j</span></span>
<span class="line"><span style="color: #F78C6C">13</span><span style="color: #F07178">   </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">moved</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">false</span></span>
<span class="line"><span style="color: #F78C6C">14</span><span style="color: #F07178">   </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">pos</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span></span>
<span class="line"><span style="color: #F78C6C">15</span><span style="color: #F07178">   </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">keyIndex</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{}</span></span>
<span class="line"><span style="color: #F78C6C">16</span><span style="color: #F07178">   </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178">(</span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newStart</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newEnd</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">++</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">17</span><span style="color: #F07178">     </span><span style="color: #A6ACCD">keyIndex</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">newChildren</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">]</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span></span>
<span class="line"><span style="color: #F78C6C">18</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">19</span><span style="color: #F07178">   </span><span style="color: #676E95; font-style: italic">// 新增 patched 变量，代表更新过的节点数量</span></span>
<span class="line"><span style="color: #F78C6C">20</span><span style="color: #F07178">   </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">patched</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span></span>
<span class="line"><span style="color: #F78C6C">21</span><span style="color: #F07178">   </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178">(</span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldStart</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldEnd</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">++</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">22</span><span style="color: #F07178">     </span><span style="color: #A6ACCD">oldVNode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldChildren</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">23</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 如果更新过的节点数量小于等于需要更新的节点数量，则执行更新</span></span>
<span class="line"><span style="color: #F78C6C">24</span><span style="color: #F07178">     </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">patched</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">count</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">25</span><span style="color: #F07178">       </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">k</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">keyIndex</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">oldVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">26</span><span style="color: #F07178">       </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">typeof</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">k</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!==</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">undefined</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">27</span><span style="color: #F07178">         </span><span style="color: #A6ACCD">newVNode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newChildren</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">k</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">28</span><span style="color: #F07178">         </span><span style="color: #82AAFF">patch</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">oldVNode</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newVNode</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">container</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F78C6C">29</span><span style="color: #F07178">         </span><span style="color: #676E95; font-style: italic">// 每更新一个节点，都将 patched 变量 +1</span></span>
<span class="line"><span style="color: #F78C6C">30</span><span style="color: #F07178">         </span><span style="color: #A6ACCD">patched</span><span style="color: #89DDFF">++</span></span>
<span class="line"><span style="color: #F78C6C">31</span><span style="color: #F07178">         </span><span style="color: #A6ACCD">source</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">k</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newStart</span><span style="color: #F07178">] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span></span>
<span class="line"><span style="color: #F78C6C">32</span><span style="color: #F07178">         </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">k</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">pos</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">33</span><span style="color: #F07178">           </span><span style="color: #A6ACCD">moved</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">true</span></span>
<span class="line"><span style="color: #F78C6C">34</span><span style="color: #F07178">         </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">35</span><span style="color: #F07178">           </span><span style="color: #A6ACCD">pos</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">k</span></span>
<span class="line"><span style="color: #F78C6C">36</span><span style="color: #F07178">         </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">37</span><span style="color: #F07178">       </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">38</span><span style="color: #F07178">         </span><span style="color: #676E95; font-style: italic">// 没找到</span></span>
<span class="line"><span style="color: #F78C6C">39</span><span style="color: #F07178">         </span><span style="color: #82AAFF">unmount</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">oldVNode</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F78C6C">40</span><span style="color: #F07178">       </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">41</span><span style="color: #F07178">     </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">42</span><span style="color: #F07178">       </span><span style="color: #676E95; font-style: italic">// 如果更新过的节点数量大于需要更新的节点数量，则卸载多余的节点</span></span>
<span class="line"><span style="color: #F78C6C">43</span><span style="color: #F07178">       </span><span style="color: #82AAFF">unmount</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">oldVNode</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F78C6C">44</span><span style="color: #F07178">     </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">45</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">46</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>在上面这段代码中，增加了 patched 变量，其初始值为 0，代表更新过的节点数量。</p>
<p>接着，在第二个 for 循环中增加了判断patched &lt;= count，如果此条件成立，则正常执行更新，并且每次更新后都让变量 patched 自增；否则说明剩余的节点都是多余的，就调用 unmount 函数将它们卸载。</p>
<h2 id="如何移动元素" tabindex="-1">如何移动元素 <a class="header-anchor" href="#如何移动元素" aria-label="Permalink to &quot;如何移动元素&quot;">&ZeroWidthSpace;</a></h2>
<p>现在已经实现了两个目标：</p>
<ul>
<li>判断是否需要进行 DOM 移动操作。当 moved 为 true 时，说明需要进行 DOM 移动操作。</li>
<li>构建 source 数组。该数组的长度等于新的一组子节点去掉相同的前置/后置节点后，剩余未处理节点的数量。</li>
</ul>
<p>接下来，需要进行 DOM 移动操作：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #F78C6C">01</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #A6ACCD"> (j </span><span style="color: #89DDFF">&gt;</span><span style="color: #A6ACCD"> oldEnd </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #A6ACCD"> j </span><span style="color: #89DDFF">&lt;=</span><span style="color: #A6ACCD"> newEnd) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">02</span><span style="color: #F07178">   </span><span style="color: #676E95; font-style: italic">// 省略部分代码</span></span>
<span class="line"><span style="color: #F78C6C">03</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #A6ACCD"> (j </span><span style="color: #89DDFF">&gt;</span><span style="color: #A6ACCD"> newEnd </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #A6ACCD"> j </span><span style="color: #89DDFF">&lt;=</span><span style="color: #A6ACCD"> oldEnd) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">04</span><span style="color: #F07178">   </span><span style="color: #676E95; font-style: italic">// 省略部分代码</span></span>
<span class="line"><span style="color: #F78C6C">05</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">06</span><span style="color: #F07178">   </span><span style="color: #676E95; font-style: italic">// 省略部分代码</span></span>
<span class="line"><span style="color: #F78C6C">07</span><span style="color: #F07178">   </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178">(</span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldStart</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldEnd</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">++</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">08</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 省略部分代码</span></span>
<span class="line"><span style="color: #F78C6C">09</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">10</span></span>
<span class="line"><span style="color: #F78C6C">11</span><span style="color: #F07178">   </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">moved</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">12</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 如果 moved 为 true，则需要进行 DOM 移动操作</span></span>
<span class="line"><span style="color: #F78C6C">13</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">14</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>为了进行 DOM 移动操作，还需要根据 source 数组计算出它的最长递增子序列。</p>
<div class="tip custom-block"><p class="custom-block-title">TIP</p>
<p>简单来说，给定一个数值序列，找到它的一个子序列，并且该子序列中的值是递增的，子序列中的元素在原序列中不一定连续。一个序列可能有很多个递增子序列，其中最长的那一个就称为最长递增子序列。</p>
</div>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #F78C6C">01</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #A6ACCD"> (moved) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">02</span><span style="color: #F07178">   </span><span style="color: #676E95; font-style: italic">// 计算最长递增子序列</span></span>
<span class="line"><span style="color: #F78C6C">03</span><span style="color: #F07178">   </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">seq</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">lis</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">sources</span><span style="color: #F07178">) </span><span style="color: #676E95; font-style: italic">// [ 0, 1 ]</span></span>
<span class="line"><span style="color: #F78C6C">04</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>在上面的代码中，使用 lis 函数计算一个数组的最长递增子序列。lis 函数接收 source 数组作为参数，并返回 source 数组的最长递增子序列之一。</p>
<div class="tip custom-block"><p class="custom-block-title">TIP</p>
<p>lis 函数的返回结果是最长递增子序列中的元素在 source 数组中的位置索引。</p>
</div>
<p>有了最长递增子序列的索引信息后，下一步要重新对节点进行编号，如下：</p>
<p><img src="https://res.weread.qq.com/wrepub/CB_3300028078_image00603.jpeg" alt=""></p>
<p>在编号时，忽略了经过预处理的节点 p-1 和 p-5。所以，索引为 0 的节点是 p-2，而索引为 1 节点是 p-3，以此类推。</p>
<p>重新编号是为了让子序列 seq 与新的索引值产生对应关系。其实，最长递增子序列 seq 拥有一个非常重要的意义。</p>
<p>以上例来说，子序列 seq 的值为 [0, 1]，它的含义是：在新的一组子节点中，重新编号后索引值为 0 和 1 的这两个节点在更新前后顺序没有发生变化。</p>
<p>换句话说，重新编号后，索引值为 0 和 1 的节点不需要移动。</p>
<p>在新的一组子节点中，节点 p-3 的索引为 0，节点 p-4 的索引为1，所以节点 p-3 和 p-4 所对应的真实 DOM 不需要移动。</p>
<p>换句话说，只有节点 p-2 和 p-7 可能需要移动。</p>
<p>为了完成节点的移动，还需要创建两个索引值 i 和 s：</p>
<ul>
<li>用索引 i 指向新的一组子节点中的最后一个节点</li>
<li>用索引 s 指向最长递增子序列中的最后一个元素</li>
</ul>
<p>如下：</p>
<p><img src="https://res.weread.qq.com/wrepub/CB_3300028078_image00604.jpeg" alt=""></p>
<p>然后，开启一个 for 循环，让变量 i 和 s 开始移动，如下：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #F78C6C">01</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #A6ACCD"> (moved) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">02</span><span style="color: #F07178">   </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">seq</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">lis</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">sources</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F78C6C">03</span></span>
<span class="line"><span style="color: #F78C6C">04</span><span style="color: #F07178">   </span><span style="color: #676E95; font-style: italic">// s 指向最长递增子序列的最后一个元素</span></span>
<span class="line"><span style="color: #F78C6C">05</span><span style="color: #F07178">   </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">s</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">seq</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span></span>
<span class="line"><span style="color: #F78C6C">06</span><span style="color: #F07178">   </span><span style="color: #676E95; font-style: italic">// i 指向新的一组子节点的最后一个元素</span></span>
<span class="line"><span style="color: #F78C6C">07</span><span style="color: #F07178">   </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">count</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span></span>
<span class="line"><span style="color: #F78C6C">08</span><span style="color: #F07178">   </span><span style="color: #676E95; font-style: italic">// for 循环使得 i 递减，即按照上图中箭头的方向移动</span></span>
<span class="line"><span style="color: #F78C6C">09</span><span style="color: #F07178">   </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&gt;=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">--</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">10</span><span style="color: #F07178">     </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!==</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">seq</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">s</span><span style="color: #F07178">]) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">11</span><span style="color: #F07178">       </span><span style="color: #676E95; font-style: italic">// 如果节点的索引 i 不等于 seq[s] 的值，说明该节点需要移动</span></span>
<span class="line"><span style="color: #F78C6C">12</span><span style="color: #F07178">     </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">13</span><span style="color: #F07178">       </span><span style="color: #676E95; font-style: italic">// 当 i === seq[s] 时，说明该位置的节点不需要移动</span></span>
<span class="line"><span style="color: #F78C6C">14</span><span style="color: #F07178">       </span><span style="color: #676E95; font-style: italic">// 只需要让 s 指向下一个位置</span></span>
<span class="line"><span style="color: #F78C6C">15</span><span style="color: #F07178">       </span><span style="color: #A6ACCD">s</span><span style="color: #89DDFF">--</span></span>
<span class="line"><span style="color: #F78C6C">16</span><span style="color: #F07178">     </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">17</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">18</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>在 for 循环内，判断条件 i !==seq[s]，如果节点的索引 i 不等于 seq[s] 的值，则说明该节点对应的真实 DOM 需要移动，否则说明当前访问的节点不需要移动，但要让 s 指向下一个位置。</p>
<p>按照上面的思路执行代码，初始时索引 i 指向节点 p-7。由于 p-7 对应的 source 数组中相同位置的元素值为 -1，所以应该将 p-7 作为全新的节点进行挂载。</p>
<p>代码如下：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #F78C6C">01</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #A6ACCD"> (moved) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">02</span><span style="color: #F07178">   </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">seq</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">lis</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">sources</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F78C6C">03</span></span>
<span class="line"><span style="color: #F78C6C">04</span><span style="color: #F07178">   </span><span style="color: #676E95; font-style: italic">// s 指向最长递增子序列的最后一个元素</span></span>
<span class="line"><span style="color: #F78C6C">05</span><span style="color: #F07178">   </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">s</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">seq</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span></span>
<span class="line"><span style="color: #F78C6C">06</span><span style="color: #F07178">   </span><span style="color: #676E95; font-style: italic">// i 指向新的一组子节点的最后一个元素</span></span>
<span class="line"><span style="color: #F78C6C">07</span><span style="color: #F07178">   </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">count</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span></span>
<span class="line"><span style="color: #F78C6C">08</span><span style="color: #F07178">   </span><span style="color: #676E95; font-style: italic">// for 循环使得 i 递减，即按照图 11-24 中箭头的方向移动</span></span>
<span class="line"><span style="color: #F78C6C">09</span><span style="color: #F07178">   </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&gt;=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">--</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">10</span><span style="color: #F07178">     </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">source</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">] </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F78C6C">1</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">11</span><span style="color: #F07178">       </span><span style="color: #676E95; font-style: italic">// 说明索引为 i 的节点是全新的节点，应该将其挂载</span></span>
<span class="line"><span style="color: #F78C6C">12</span><span style="color: #F07178">       </span><span style="color: #676E95; font-style: italic">// 该节点在新 children 中的真实位置索引</span></span>
<span class="line"><span style="color: #F78C6C">13</span><span style="color: #F07178">       </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">pos</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newStart</span></span>
<span class="line"><span style="color: #F78C6C">14</span><span style="color: #F07178">       </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newVNode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newChildren</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">pos</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">15</span><span style="color: #F07178">       </span><span style="color: #676E95; font-style: italic">// 该节点的下一个节点的位置索引</span></span>
<span class="line"><span style="color: #F78C6C">16</span><span style="color: #F07178">       </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">nextPos</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">pos</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span></span>
<span class="line"><span style="color: #F78C6C">17</span><span style="color: #F07178">       </span><span style="color: #676E95; font-style: italic">// 锚点</span></span>
<span class="line"><span style="color: #F78C6C">18</span><span style="color: #F07178">       </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">anchor</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">nextPos</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newChildren</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span></span>
<span class="line"><span style="color: #F78C6C">19</span><span style="color: #F07178">         </span><span style="color: #89DDFF">?</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newChildren</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">nextPos</span><span style="color: #F07178">]</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">el</span></span>
<span class="line"><span style="color: #F78C6C">20</span><span style="color: #F07178">         </span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #89DDFF">null</span></span>
<span class="line"><span style="color: #F78C6C">21</span><span style="color: #F07178">       </span><span style="color: #676E95; font-style: italic">// 挂载</span></span>
<span class="line"><span style="color: #F78C6C">22</span><span style="color: #F07178">       </span><span style="color: #82AAFF">patch</span><span style="color: #F07178">(</span><span style="color: #89DDFF">null,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newVNode</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">container</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">anchor</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F78C6C">23</span><span style="color: #F07178">     </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!==</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">seq</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">s</span><span style="color: #F07178">]) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">24</span><span style="color: #F07178">       </span><span style="color: #676E95; font-style: italic">// 如果节点的索引 i 不等于 seq[s] 的值，说明该节点需要移动</span></span>
<span class="line"><span style="color: #F78C6C">25</span><span style="color: #F07178">     </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">26</span><span style="color: #F07178">       </span><span style="color: #676E95; font-style: italic">// 当 i === seq[s] 时，说明该位置的节点不需要移动</span></span>
<span class="line"><span style="color: #F78C6C">27</span><span style="color: #F07178">       </span><span style="color: #676E95; font-style: italic">// 只需要让 s 指向下一个位置</span></span>
<span class="line"><span style="color: #F78C6C">28</span><span style="color: #F07178">       </span><span style="color: #A6ACCD">s</span><span style="color: #89DDFF">--</span></span>
<span class="line"><span style="color: #F78C6C">29</span><span style="color: #F07178">     </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">30</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">31</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>如果 source[i] 的值为 -1，则说明索引为 i 的节点是全新的节点，于是调用 patch 函数将其挂载到容器中。</p>
<p>这里需要注意的是，由于索引 i 是重新编号后的，因此为了得到真实索引值，需要先计算表达式 i + newStart 的值。</p>
<p>此时 for 循环已经执行了一次，索引 i 向上移动一次，指向节点 p-2。如下：</p>
<p><img src="https://res.weread.qq.com/wrepub/CB_3300028078_image00605.jpeg" alt=""></p>
<p>进入下一轮 for 循环：</p>
<ol>
<li>
<p>判断 source[i] 是否等于 -1？很明显，此时索引 i 的值为 2，source[2] 的值等于 1，因此节点 p-2 不是全新的节点，不需要挂载它，进行下一步的判断。</p>
</li>
<li>
<p>判断 i !== seq[s] 是否成立？此时索引 i 的值为 2，索引 s 的值为 1。因此 2 !== seq[1] 成立，节点 p-2 所对应的真实 DOM 需要移动。</p>
</li>
</ol>
<p>移动 p-2 对应的真实 DOM 的过程如下:</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #F78C6C">01</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #A6ACCD"> (moved) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">02</span><span style="color: #F07178">   </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">seq</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">lis</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">sources</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F78C6C">03</span></span>
<span class="line"><span style="color: #F78C6C">04</span><span style="color: #F07178">   </span><span style="color: #676E95; font-style: italic">// s 指向最长递增子序列的最后一个元素</span></span>
<span class="line"><span style="color: #F78C6C">05</span><span style="color: #F07178">   </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">s</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">seq</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span></span>
<span class="line"><span style="color: #F78C6C">06</span><span style="color: #F07178">   </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">count</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span></span>
<span class="line"><span style="color: #F78C6C">07</span><span style="color: #F07178">   </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&gt;=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">--</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">08</span><span style="color: #F07178">     </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">source</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">] </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F78C6C">1</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">09</span><span style="color: #F07178">       </span><span style="color: #676E95; font-style: italic">// 省略部分代码</span></span>
<span class="line"><span style="color: #F78C6C">10</span><span style="color: #F07178">     </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!==</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">seq</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">s</span><span style="color: #F07178">]) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">11</span><span style="color: #F07178">       </span><span style="color: #676E95; font-style: italic">// 说明该节点需要移动</span></span>
<span class="line"><span style="color: #F78C6C">12</span><span style="color: #F07178">       </span><span style="color: #676E95; font-style: italic">// 该节点在新的一组子节点中的真实位置索引</span></span>
<span class="line"><span style="color: #F78C6C">13</span><span style="color: #F07178">       </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">pos</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newStart</span></span>
<span class="line"><span style="color: #F78C6C">14</span><span style="color: #F07178">       </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newVNode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newChildren</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">pos</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">15</span><span style="color: #F07178">       </span><span style="color: #676E95; font-style: italic">// 该节点的下一个节点的位置索引</span></span>
<span class="line"><span style="color: #F78C6C">16</span><span style="color: #F07178">       </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">nextPos</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">pos</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span></span>
<span class="line"><span style="color: #F78C6C">17</span><span style="color: #F07178">       </span><span style="color: #676E95; font-style: italic">// 锚点</span></span>
<span class="line"><span style="color: #F78C6C">18</span><span style="color: #F07178">       </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">anchor</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">nextPos</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newChildren</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span></span>
<span class="line"><span style="color: #F78C6C">19</span><span style="color: #F07178">         </span><span style="color: #89DDFF">?</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newChildren</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">nextPos</span><span style="color: #F07178">]</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">el</span></span>
<span class="line"><span style="color: #F78C6C">20</span><span style="color: #F07178">         </span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #89DDFF">null</span></span>
<span class="line"><span style="color: #F78C6C">21</span><span style="color: #F07178">       </span><span style="color: #676E95; font-style: italic">// 移动</span></span>
<span class="line"><span style="color: #F78C6C">22</span><span style="color: #F07178">       </span><span style="color: #82AAFF">insert</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">newVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">el</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">container</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">anchor</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F78C6C">23</span><span style="color: #F07178">     </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">24</span><span style="color: #F07178">       </span><span style="color: #676E95; font-style: italic">// 当 i === seq[s] 时，说明该位置的节点不需要移动</span></span>
<span class="line"><span style="color: #F78C6C">25</span><span style="color: #F07178">       </span><span style="color: #676E95; font-style: italic">// 并让 s 指向下一个位置</span></span>
<span class="line"><span style="color: #F78C6C">26</span><span style="color: #F07178">       </span><span style="color: #A6ACCD">s</span><span style="color: #89DDFF">--</span></span>
<span class="line"><span style="color: #F78C6C">27</span><span style="color: #F07178">     </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">28</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">29</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>移动节点的实现思路类似于挂载全新的节点。不同点在于，移动节点是通过 insert 函数来完成的。</p>
<p>以下是 Vue3 实现求解给定序列的最长递增子序列的代码:</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #F78C6C">01</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">getSequence</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">arr</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">02</span><span style="color: #F07178">   </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">p</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">slice</span><span style="color: #F07178">()</span></span>
<span class="line"><span style="color: #F78C6C">03</span><span style="color: #F07178">   </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">result</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> [</span><span style="color: #F78C6C">0</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">04</span><span style="color: #F07178">   </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">j</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">u</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">v</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">c</span></span>
<span class="line"><span style="color: #F78C6C">05</span><span style="color: #F07178">   </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">len</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span></span>
<span class="line"><span style="color: #F78C6C">06</span><span style="color: #F07178">   </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">len</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">++</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">07</span><span style="color: #F07178">     </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arrI</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">08</span><span style="color: #F07178">     </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">arrI</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!==</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">09</span><span style="color: #F07178">       </span><span style="color: #A6ACCD">j</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">result</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">result</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">10</span><span style="color: #F07178">       </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">j</span><span style="color: #F07178">] </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arrI</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">11</span><span style="color: #F07178">         </span><span style="color: #A6ACCD">p</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">j</span></span>
<span class="line"><span style="color: #F78C6C">12</span><span style="color: #F07178">         </span><span style="color: #A6ACCD">result</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F78C6C">13</span><span style="color: #F07178">         </span><span style="color: #89DDFF; font-style: italic">continue</span></span>
<span class="line"><span style="color: #F78C6C">14</span><span style="color: #F07178">       </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">15</span><span style="color: #F07178">       </span><span style="color: #A6ACCD">u</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span></span>
<span class="line"><span style="color: #F78C6C">16</span><span style="color: #F07178">       </span><span style="color: #A6ACCD">v</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">result</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span></span>
<span class="line"><span style="color: #F78C6C">17</span><span style="color: #F07178">       </span><span style="color: #89DDFF; font-style: italic">while</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">u</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">v</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">18</span><span style="color: #F07178">         </span><span style="color: #A6ACCD">c</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> ((</span><span style="color: #A6ACCD">u</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">v</span><span style="color: #F07178">) </span><span style="color: #89DDFF">/</span><span style="color: #F07178"> </span><span style="color: #F78C6C">2</span><span style="color: #F07178">) </span><span style="color: #89DDFF">|</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span></span>
<span class="line"><span style="color: #F78C6C">19</span><span style="color: #F07178">         </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">result</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">c</span><span style="color: #F07178">]] </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arrI</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">20</span><span style="color: #F07178">           </span><span style="color: #A6ACCD">u</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">c</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span></span>
<span class="line"><span style="color: #F78C6C">21</span><span style="color: #F07178">         </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">22</span><span style="color: #F07178">           </span><span style="color: #A6ACCD">v</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">c</span></span>
<span class="line"><span style="color: #F78C6C">23</span><span style="color: #F07178">         </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">24</span><span style="color: #F07178">       </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">25</span><span style="color: #F07178">       </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">arrI</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">result</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">u</span><span style="color: #F07178">]]) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">26</span><span style="color: #F07178">         </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">u</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&gt;</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">27</span><span style="color: #F07178">           </span><span style="color: #A6ACCD">p</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">result</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">u</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">28</span><span style="color: #F07178">         </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">29</span><span style="color: #F07178">         </span><span style="color: #A6ACCD">result</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">u</span><span style="color: #F07178">] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span></span>
<span class="line"><span style="color: #F78C6C">30</span><span style="color: #F07178">       </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">31</span><span style="color: #F07178">     </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">32</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">33</span><span style="color: #F07178">   </span><span style="color: #A6ACCD">u</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">result</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span></span>
<span class="line"><span style="color: #F78C6C">34</span><span style="color: #F07178">   </span><span style="color: #A6ACCD">v</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">result</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">u</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">35</span><span style="color: #F07178">   </span><span style="color: #89DDFF; font-style: italic">while</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">u</span><span style="color: #89DDFF">--</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&gt;</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">36</span><span style="color: #F07178">     </span><span style="color: #A6ACCD">result</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">u</span><span style="color: #F07178">] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">v</span></span>
<span class="line"><span style="color: #F78C6C">37</span><span style="color: #F07178">     </span><span style="color: #A6ACCD">v</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">p</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">v</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">38</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">39</span><span style="color: #F07178">   </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">result</span></span>
<span class="line"><span style="color: #F78C6C">40</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span></span></code></pre>
</div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[src 和 href 的区别]]></title>
            <link>https://desain7.top/interview/html/src和href的区别.html</link>
            <guid>https://desain7.top/interview/html/src和href的区别.html</guid>
            <pubDate>Mon, 18 Sep 2023 16:00:00 GMT</pubDate>
            <description><![CDATA[src 和 href 是 Html 中两个常用的属性，它们常用于指定资源的位置或链接。
二者虽然在语法上相似，但在用法和功能上存在差异。
从用法上看：
`src` 属性用于嵌入外部资源（比如脚本、图像]]></description>
            <content:encoded><![CDATA[<h1 id="src-和-href-的区别" tabindex="-1">src 和 href 的区别 <a class="header-anchor" href="#src-和-href-的区别" aria-label="Permalink to &quot;src 和 href 的区别&quot;">&ZeroWidthSpace;</a></h1>
<p>src 和 href 是 Html 中两个常用的属性，它们常用于指定资源的位置或链接。</p>
<p>二者虽然在语法上相似，但在用法和功能上存在差异。</p>
<p>从用法上看：</p>
<p><strong><code>src</code> 属性用于嵌入外部资源（比如脚本、图像、音频、视频等）到 Html 中。</strong></p>
<p>例如：</p>
<ul>
<li><code>&lt;script src=&quot;script.js&quot;&gt;&lt;/script&gt;</code></li>
</ul>
<p>用于在 Html 中嵌入外部的 JavaScript 文件，浏览器会下载并执行该脚本文件。</p>
<ul>
<li><code>&lt;img src=&quot;image.png&quot;&gt;</code></li>
</ul>
<p>用于在 Html 中嵌入外部的图片，浏览器会根据指定的 <code>src</code> 值下载并显示该图片。</p>
<p><strong><code>href</code> 属性用于创建超链接和加载样式表。</strong></p>
<p>例如:</p>
<ul>
<li><code>&lt;a href=&quot;https://www.baidu.com&quot;&gt;baidu&lt;/a&gt;</code></li>
</ul>
<p>用于创建超链接，将文本或图片转换为可点击的链接。用户点击后，浏览器会跳转到指定的 URL。</p>
<ul>
<li><code>&lt;link href=&quot;style.css&quot; rel=&quot;stylesheet&quot;&gt;</code></li>
</ul>
<p>用于加载外部样式表文件，用于定义文档的样式和布局。</p>
<p>二者的区别在于：</p>
<p><strong>src</strong>:</p>
<ul>
<li>
<p>src 属性用于指定要嵌入到 Html 中的外部资源的位置。</p>
</li>
<li>
<p>src 属性会影响文档的解析和显示过程。导致<em>浏览器暂停文档解析</em>，开始下载并执行或显示指定的资源。</p>
</li>
<li>
<p>src 属性常用于脚本、图像、音频、视频等元素。</p>
</li>
</ul>
<p><strong>href</strong>:</p>
<ul>
<li>
<p>href 属性用于指定超链接的目标资源的位置，浏览器识别到它指向的文件后，会并行加载该文件，不会停止对当前文档的处理。</p>
</li>
<li>
<p>href 属性用于创建可点击的超链接或加载外部样式表文件。</p>
</li>
<li>
<p>href 属性常用于锚点元素（a标签）和链接样式表的link元素。</p>
</li>
<li>
<p>href 属性的资源通常是通过用户交互来加载和显示的。</p>
</li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[双端 diff 算法]]></title>
            <link>https://desain7.top/interview/vue/双端diff算法.html</link>
            <guid>https://desain7.top/interview/vue/双端diff算法.html</guid>
            <pubDate>Sun, 17 Sep 2023 16:00:00 GMT</pubDate>
            <description><![CDATA[简单 diff 算法已经在一定程度上减少了 DOM 操作的次数，但它对 DOM 的移动操作并不是最优的。
以上面两组节点为例，如果使用简单 Diff 算法来更新它，会发生两次 DOM 移动操作。
- ]]></description>
            <content:encoded><![CDATA[<h1 id="双端-diff-算法" tabindex="-1">双端 diff 算法 <a class="header-anchor" href="#双端-diff-算法" aria-label="Permalink to &quot;双端 diff 算法&quot;">&ZeroWidthSpace;</a></h1>
<p>简单 diff 算法已经在一定程度上减少了 DOM 操作的次数，但它对 DOM 的移动操作并不是最优的。</p>
<p><img src="https://res.weread.qq.com/wrepub/CB_3300028078_image00548.jpeg" alt=""></p>
<p>以上面两组节点为例，如果使用简单 Diff 算法来更新它，会发生两次 DOM 移动操作。</p>
<ul>
<li>将 p-1 移动到 p-3 后面</li>
<li>将 p-2 移动到 p-1 后面</li>
</ul>
<p>上面这种更新过程并非最优解。实际上，只要把 p-3 移动到 p-1 前面就可以完成更新，只需要完成一次 DOM 移动操作。但简单 Diff 算法并不能做到这样的更新，需要使用双端 Diff 算法。</p>
<h2 id="双端-diff-算法的原理" tabindex="-1">双端 Diff 算法的原理 <a class="header-anchor" href="#双端-diff-算法的原理" aria-label="Permalink to &quot;双端 Diff 算法的原理&quot;">&ZeroWidthSpace;</a></h2>
<p><strong>双端 Diff 算法</strong>是一种同时对新旧两组子节点的两个端点进行比较的算法。因此，需要四个索引值，分别指向新旧两组子节点的端点。</p>
<p><img src="https://res.weread.qq.com/wrepub/CB_3300028078_image00550.jpeg" alt=""></p>
<p>代码如下：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #F78C6C">01</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">patchChildren</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">n1</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">n2</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">container</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">02</span><span style="color: #F07178">   </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">typeof</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">n2</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">children</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">string</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">03</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 省略部分代码</span></span>
<span class="line"><span style="color: #F78C6C">04</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">Array</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">isArray</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">n2</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">children</span><span style="color: #F07178">)) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">05</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 封装 patchKeyedChildren 函数处理两组子节点</span></span>
<span class="line"><span style="color: #F78C6C">06</span><span style="color: #F07178">     </span><span style="color: #82AAFF">patchKeyedChildren</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">n1</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">n2</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">container</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F78C6C">07</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">08</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 省略部分代码</span></span>
<span class="line"><span style="color: #F78C6C">09</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">10</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">11</span></span>
<span class="line"><span style="color: #F78C6C">12</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">patchKeyedChildren</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">n1</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">n2</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">container</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">13</span><span style="color: #F07178">   </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldChildren</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">n1</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">children</span></span>
<span class="line"><span style="color: #F78C6C">14</span><span style="color: #F07178">   </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newChildren</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">n2</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">children</span></span>
<span class="line"><span style="color: #F78C6C">15</span><span style="color: #F07178">   </span><span style="color: #676E95; font-style: italic">// 四个索引值</span></span>
<span class="line"><span style="color: #F78C6C">16</span><span style="color: #F07178">   </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldStartIdx</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span></span>
<span class="line"><span style="color: #F78C6C">17</span><span style="color: #F07178">   </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldEndIdx</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldChildren</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span></span>
<span class="line"><span style="color: #F78C6C">18</span><span style="color: #F07178">   </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newStartIdx</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span></span>
<span class="line"><span style="color: #F78C6C">19</span><span style="color: #F07178">   </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newEndIdx</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newChildren</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span></span>
<span class="line"><span style="color: #F78C6C">20</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>通过这四个索引值，就可以找到它们所指向的虚拟节点了。</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #F78C6C">01</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">patchKeyedChildren</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">n1</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">n2</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">container</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">02</span><span style="color: #F07178">   </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldChildren</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">n1</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">children</span></span>
<span class="line"><span style="color: #F78C6C">03</span><span style="color: #F07178">   </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newChildren</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">n2</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">children</span></span>
<span class="line"><span style="color: #F78C6C">04</span><span style="color: #F07178">   </span><span style="color: #676E95; font-style: italic">// 四个索引值</span></span>
<span class="line"><span style="color: #F78C6C">05</span><span style="color: #F07178">   </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldStartIdx</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span></span>
<span class="line"><span style="color: #F78C6C">06</span><span style="color: #F07178">   </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldEndIdx</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldChildren</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span></span>
<span class="line"><span style="color: #F78C6C">07</span><span style="color: #F07178">   </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newStartIdx</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span></span>
<span class="line"><span style="color: #F78C6C">08</span><span style="color: #F07178">   </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newEndIdx</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newChildren</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span></span>
<span class="line"><span style="color: #F78C6C">09</span><span style="color: #F07178">   </span><span style="color: #676E95; font-style: italic">// 四个索引指向的 vnode 节点</span></span>
<span class="line"><span style="color: #F78C6C">10</span><span style="color: #F07178">   </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldStartVNode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldChildren</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">oldStartIdx</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">11</span><span style="color: #F07178">   </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldEndVNode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldChildren</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">oldEndIdx</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">12</span><span style="color: #F07178">   </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newStartVNode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newChildren</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">newStartIdx</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">13</span><span style="color: #F07178">   </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newEndVNode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newChildren</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">newEndIdx</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">14</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>有了新旧子节点中的第一个节点和最后一个节点的信息后，就可以进行双端比较了。</p>
<p><img src="https://res.weread.qq.com/wrepub/CB_3300028078_image00551.jpeg" alt=""></p>
<p>对于上面这种情况，<strong>双端比较的具体过程如下：</strong></p>
<ol>
<li>
<p>比较旧子节点中的<em>第一个</em>子节点 p-1 与新子节点中的<em>第一个</em>子节点 p-4，由于两者 key 值不同，因此不可复用，所以什么都不做。</p>
</li>
<li>
<p>比较旧子节点中的<em>最后一个</em>子节点 p-4 与新子节点中的<em>最后一个</em>子节点 p-3。由于两者 key 值不同，因此不可复用，所以什么都不做。</p>
</li>
<li>
<p>比较旧子节点中的<em>第一个</em>子节点 p-1 与新子节点中的<em>最后一个</em>子节点 p-3，由于两者 key 值不同，因此不可复用，所以什么都不做。</p>
</li>
<li>
<p>比较旧子节点中的<em>最后一个</em>子节点 p-4 与新子节点中的<em>第一个</em>子节点 p-3，由于两者 key 值相同，所以可以进行 DOM 复用。</p>
</li>
</ol>
<p>在第四步中，找到了相同的节点，说明它们对应的真实 DOM 节点可以复用。对于这两个节点，只需要通过 DOM 移动操作完成更新即可。</p>
<p>旧子节点中的最后一个子节点和新子节点中的第一个子节点相同，说明：**节点 p-4 原本是最后一个子节点，但在新的顺序中，它变成零第一个子节点。**也就是说，节点 p-4 在更新后会变成第一个子节点。<strong>可以将索引 oldEndIdx 指向的虚拟节点对应的真实 DOM 移动到索引 oldStartIdx 指向的虚拟节点对应的真实 DOM 前。</strong></p>
<p>代码如下：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #F78C6C">01</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">patchKeyedChildren</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">n1</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">n2</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">container</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">02</span><span style="color: #F07178">   </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldChildren</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">n1</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">children</span></span>
<span class="line"><span style="color: #F78C6C">03</span><span style="color: #F07178">   </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newChildren</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">n2</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">children</span></span>
<span class="line"><span style="color: #F78C6C">04</span><span style="color: #F07178">   </span><span style="color: #676E95; font-style: italic">// 四个索引值</span></span>
<span class="line"><span style="color: #F78C6C">05</span><span style="color: #F07178">   </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldStartIdx</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span></span>
<span class="line"><span style="color: #F78C6C">06</span><span style="color: #F07178">   </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldEndIdx</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldChildren</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span></span>
<span class="line"><span style="color: #F78C6C">07</span><span style="color: #F07178">   </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newStartIdx</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span></span>
<span class="line"><span style="color: #F78C6C">08</span><span style="color: #F07178">   </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newEndIdx</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newChildren</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span></span>
<span class="line"><span style="color: #F78C6C">09</span><span style="color: #F07178">   </span><span style="color: #676E95; font-style: italic">// 四个索引指向的 vnode 节点</span></span>
<span class="line"><span style="color: #F78C6C">10</span><span style="color: #F07178">   </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldStartVNode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldChildren</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">oldStartIdx</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">11</span><span style="color: #F07178">   </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldEndVNode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldChildren</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">oldEndIdx</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">12</span><span style="color: #F07178">   </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newStartVNode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newChildren</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">newStartIdx</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">13</span><span style="color: #F07178">   </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newEndVNode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newChildren</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">newEndIdx</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">14</span></span>
<span class="line"><span style="color: #F78C6C">15</span><span style="color: #F07178">   </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">oldStartVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newStartVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">16</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 第一步：oldStartVNode 和 newStartVNode 比较</span></span>
<span class="line"><span style="color: #F78C6C">17</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">oldEndVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newEndVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">18</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 第二步：oldEndVNode 和 newEndVNode 比较</span></span>
<span class="line"><span style="color: #F78C6C">19</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">oldStartVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newEndVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">20</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 第三步：oldStartVNode 和 newEndVNode 比较</span></span>
<span class="line"><span style="color: #F78C6C">21</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">oldEndVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newStartVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">22</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 第四步：oldEndVNode 和 newStartVNode 比较</span></span>
<span class="line"><span style="color: #F78C6C">23</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 仍然需要调用 patch 函数进行打补丁</span></span>
<span class="line"><span style="color: #F78C6C">24</span><span style="color: #F07178">     </span><span style="color: #82AAFF">patch</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">oldEndVNode</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newStartVNode</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">container</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F78C6C">25</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 移动 DOM 操作</span></span>
<span class="line"><span style="color: #F78C6C">26</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// oldEndVNode.el 移动到 oldStartVNode.el 前面</span></span>
<span class="line"><span style="color: #F78C6C">27</span><span style="color: #F07178">     </span><span style="color: #82AAFF">insert</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">oldEndVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">el</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">container</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldStartVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">el</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F78C6C">28</span></span>
<span class="line"><span style="color: #F78C6C">29</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 移动 DOM 完成后，更新索引值，并指向下一个位置</span></span>
<span class="line"><span style="color: #F78C6C">30</span><span style="color: #F07178">     </span><span style="color: #A6ACCD">oldEndVNode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldChildren</span><span style="color: #F07178">[</span><span style="color: #89DDFF">--</span><span style="color: #A6ACCD">oldEndIdx</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">31</span><span style="color: #F07178">     </span><span style="color: #A6ACCD">newStartVNode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newChildren</span><span style="color: #F07178">[</span><span style="color: #89DDFF">++</span><span style="color: #A6ACCD">newStartIdx</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">32</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">33</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>在第四步中，找到了具有相同 key 值的节点。这说明，原来处于尾部的节点在新的顺序中应该处于头部。</p>
<p>所以只需要以头部元素 oldStartVNode.el 作为锚点，将尾部元素oldEndVNode.el 移动到锚点前面即可。</p>
<p>但需要注意的是，在进行 DOM 的移动操作之前，仍然需要调用 patch 函数在新旧虚拟节点之间打补丁。</p>
<div class="tip custom-block"><p class="custom-block-title">TIP</p>
<p>当两个具有相同 key 值的节点需要进行位置调整时，虽然它们具有相同的 key 值，但它们的其他属性或子节点可能存在差异。如果没有调用 patch 函数进行补丁操作，那么移动节点后，新的位置上的节点可能会出现不一致的状态，导致渲染结果不符合预期。</p>
</div>
<p>第一步 DOM 移动操作完成后，新旧子节点及真实 DOM 节点的状态如下：</p>
<p><img src="https://res.weread.qq.com/wrepub/CB_3300028078_image00553.jpeg" alt=""></p>
<p>此时真实 DOM 节点的顺序与新子节点的顺序还不一致，因为 Diff 算法还没有结束，还需要进行下一轮更新。</p>
<p>将更新逻辑封装到一个 while 循环中，代码如下：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #F78C6C">01</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">while</span><span style="color: #A6ACCD"> (oldStartIdx </span><span style="color: #89DDFF">&lt;=</span><span style="color: #A6ACCD"> oldEndIdx </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #A6ACCD"> newStartIdx </span><span style="color: #89DDFF">&lt;=</span><span style="color: #A6ACCD"> newEndIdx) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">02</span><span style="color: #F07178">   </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">oldStartVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newStartVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">03</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 步骤一：oldStartVNode 和 newStartVNode 比较</span></span>
<span class="line"><span style="color: #F78C6C">04</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">oldEndVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newEndVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">05</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 步骤二：oldEndVNode 和 newEndVNode 比较</span></span>
<span class="line"><span style="color: #F78C6C">06</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">oldStartVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newEndVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">07</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 步骤三：oldStartVNode 和 newEndVNode 比较</span></span>
<span class="line"><span style="color: #F78C6C">08</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">oldEndVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newStartVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">09</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 步骤四：oldEndVNode 和 newStartVNode 比较</span></span>
<span class="line"><span style="color: #F78C6C">10</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 仍然需要调用 patch 函数进行打补丁</span></span>
<span class="line"><span style="color: #F78C6C">11</span><span style="color: #F07178">     </span><span style="color: #82AAFF">patch</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">oldEndVNode</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newStartVNode</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">container</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F78C6C">12</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 移动 DOM 操作</span></span>
<span class="line"><span style="color: #F78C6C">13</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// oldEndVNode.el 移动到 oldStartVNode.el 前面</span></span>
<span class="line"><span style="color: #F78C6C">14</span><span style="color: #F07178">     </span><span style="color: #82AAFF">insert</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">oldEndVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">el</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">container</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldStartVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">el</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F78C6C">15</span></span>
<span class="line"><span style="color: #F78C6C">16</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 移动 DOM 完成后，更新索引值，指向下一个位置</span></span>
<span class="line"><span style="color: #F78C6C">17</span><span style="color: #F07178">     </span><span style="color: #A6ACCD">oldEndVNode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldChildren</span><span style="color: #F07178">[</span><span style="color: #89DDFF">--</span><span style="color: #A6ACCD">oldEndIdx</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">18</span><span style="color: #F07178">     </span><span style="color: #A6ACCD">newStartVNode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newChildren</span><span style="color: #F07178">[</span><span style="color: #89DDFF">++</span><span style="color: #A6ACCD">newStartIdx</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">19</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">20</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>每一轮更新完成后，四个索引值都会更新，所以整个 while 循环执行的条件是： 头部索引值小于等于尾部索引值。</p>
<p>第一轮更新结束后循环条件仍然成立，因此需要进行下一轮比较：</p>
<div class="tip custom-block"><p class="custom-block-title">TIP</p>
<p>也可以用 <strong>头部节点</strong> 代指第一个子节点， <strong>尾部节点</strong> 代指最后一个子节点。</p>
</div>
<ol>
<li>
<p>比较旧子节点中的头部节点 p-1 与新子节点中的头部节点 p-2，由于两者 key 值不同，因此不可复用，所以什么都不做。</p>
</li>
<li>
<p>比较旧子节点中的尾部节点 p-3 与新子节点中的尾部节点 p-3，两者 key 值相同，可以复用。由于两者位置一致，都处于尾部，因此，不需要对真实 DOM 进行移动，只需要打补丁即可，代码如下：</p>
</li>
</ol>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #F78C6C">01</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">while</span><span style="color: #A6ACCD"> (oldStartIdx </span><span style="color: #89DDFF">&lt;=</span><span style="color: #A6ACCD"> oldEndIdx </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #A6ACCD"> newStartIdx </span><span style="color: #89DDFF">&lt;=</span><span style="color: #A6ACCD"> newEndIdx) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">02</span><span style="color: #F07178">   </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">oldStartVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newStartVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">03</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 步骤一：oldStartVNode 和 newStartVNode 比较</span></span>
<span class="line"><span style="color: #F78C6C">04</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">oldEndVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newEndVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">05</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 步骤二：oldEndVNode 和 newEndVNode 比较</span></span>
<span class="line"><span style="color: #F78C6C">06</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 节点在新的顺序中仍然处于尾部，不需要移动，但仍需打补丁</span></span>
<span class="line"><span style="color: #F78C6C">07</span><span style="color: #F07178">     </span><span style="color: #82AAFF">patch</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">oldEndVNode</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newEndVNode</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">container</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F78C6C">08</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 更新索引和头尾部节点变量</span></span>
<span class="line"><span style="color: #F78C6C">09</span><span style="color: #F07178">     </span><span style="color: #A6ACCD">oldEndVNode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldChildren</span><span style="color: #F07178">[</span><span style="color: #89DDFF">--</span><span style="color: #A6ACCD">oldEndIdx</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">10</span><span style="color: #F07178">     </span><span style="color: #A6ACCD">newEndVNode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newChildren</span><span style="color: #F07178">[</span><span style="color: #89DDFF">--</span><span style="color: #A6ACCD">newEndIdx</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">11</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">oldStartVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newEndVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">12</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 步骤三：oldStartVNode 和 newEndVNode 比较</span></span>
<span class="line"><span style="color: #F78C6C">13</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">oldEndVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newStartVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">14</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 步骤四：oldEndVNode 和 newStartVNode 比较</span></span>
<span class="line"><span style="color: #F78C6C">15</span><span style="color: #F07178">     </span><span style="color: #82AAFF">patch</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">oldEndVNode</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newStartVNode</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">container</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F78C6C">16</span><span style="color: #F07178">     </span><span style="color: #82AAFF">insert</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">oldEndVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">el</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">container</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldStartVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">el</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F78C6C">17</span><span style="color: #F07178">     </span><span style="color: #A6ACCD">oldEndVNode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldChildren</span><span style="color: #F07178">[</span><span style="color: #89DDFF">--</span><span style="color: #A6ACCD">oldEndIdx</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">18</span><span style="color: #F07178">     </span><span style="color: #A6ACCD">newStartVNode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newChildren</span><span style="color: #F07178">[</span><span style="color: #89DDFF">++</span><span style="color: #A6ACCD">newStartIdx</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">19</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">20</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>这一轮更新完成后，新旧子节点与真实 DOM节点的状态如下：</p>
<p><img src="https://res.weread.qq.com/wrepub/CB_3300028078_image00555.jpeg" alt=""></p>
<p>真实 DOM 的顺序相比上一轮没有发生变化，因为这一轮没有对 DOM 节点进行移动，只对 p-3 节点进行打补丁的操作。</p>
<p>紧接着，进行第三轮的比较：</p>
<ol>
<li>
<p>比较旧的一组子节点中的头部节点 p-1 与新的一组子节点中的头部节点 p-2，看看它们是否相同。由于两者的key 值不同，不可复用，因此什么都不做。</p>
</li>
<li>
<p>比较旧的一组子节点中的尾部节点 p-2 与新的一组子节点中的尾部节点 p-1，看看它们是否相同，由于两者的key 值不同，不可复用，因此什么都不做。</p>
</li>
<li>
<p>：比较旧的一组子节点中的头部节点 p-1 与新的一组子节点中的尾部节点 p-1。两者的 key 值相同，可以复用。</p>
</li>
</ol>
<p>在第三步的比较中，找到了相同的节点，说明：<strong>节点 p-1 原本是头部节点，但在新的顺序中，它变成了尾部节点。</strong></p>
<p>因此，需要将节点 p-1 对应的真实 DOM 移动到旧子节点的尾部节点 p-2 对应的真实 DOM 后面，并更新索引。</p>
<p>本轮比较结束后，两组节点及真实 DOM 的状态如下：</p>
<p><img src="https://res.weread.qq.com/wrepub/CB_3300028078_image00555.jpeg" alt=""></p>
<p>这一步的代码实现如下：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #F78C6C">01</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">while</span><span style="color: #A6ACCD"> (oldStartIdx </span><span style="color: #89DDFF">&lt;=</span><span style="color: #A6ACCD"> oldEndIdx </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #A6ACCD"> newStartIdx </span><span style="color: #89DDFF">&lt;=</span><span style="color: #A6ACCD"> newEndIdx) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">02</span><span style="color: #F07178">   </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">oldStartVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newStartVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">03</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">oldEndVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newEndVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">04</span><span style="color: #F07178">     </span><span style="color: #82AAFF">patch</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">oldEndVNode</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newEndVNode</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">container</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F78C6C">05</span><span style="color: #F07178">     </span><span style="color: #A6ACCD">oldEndVNode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldChildren</span><span style="color: #F07178">[</span><span style="color: #89DDFF">--</span><span style="color: #A6ACCD">oldEndIdx</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">06</span><span style="color: #F07178">     </span><span style="color: #A6ACCD">newEndVNode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newChildren</span><span style="color: #F07178">[</span><span style="color: #89DDFF">--</span><span style="color: #A6ACCD">newEndIdx</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">07</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">oldStartVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newEndVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">08</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 调用 patch 函数在 oldStartVNode 和 newEndVNode 之间打补丁</span></span>
<span class="line"><span style="color: #F78C6C">09</span><span style="color: #F07178">     </span><span style="color: #82AAFF">patch</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">oldStartVNode</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newEndVNode</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">container</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F78C6C">10</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 将旧的一组子节点的头部节点对应的真实 DOM 节点 oldStartVNode.el 移动到</span></span>
<span class="line"><span style="color: #F78C6C">11</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 旧的一组子节点的尾部节点对应的真实 DOM 节点后面</span></span>
<span class="line"><span style="color: #F78C6C">12</span><span style="color: #F07178">     </span><span style="color: #82AAFF">insert</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">oldStartVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">el</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">container</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldEndVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">el</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">nextSibling</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F78C6C">13</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 更新相关索引到下一个位置</span></span>
<span class="line"><span style="color: #F78C6C">14</span><span style="color: #F07178">     </span><span style="color: #A6ACCD">oldStartVNode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldChildren</span><span style="color: #F07178">[</span><span style="color: #89DDFF">++</span><span style="color: #A6ACCD">oldStartIdx</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">15</span><span style="color: #F07178">     </span><span style="color: #A6ACCD">newEndVNode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newChildren</span><span style="color: #F07178">[</span><span style="color: #89DDFF">--</span><span style="color: #A6ACCD">newEndIdx</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">16</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">oldEndVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newStartVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">17</span><span style="color: #F07178">     </span><span style="color: #82AAFF">patch</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">oldEndVNode</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newStartVNode</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">container</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F78C6C">18</span><span style="color: #F07178">     </span><span style="color: #82AAFF">insert</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">oldEndVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">el</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">container</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldStartVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">el</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F78C6C">19</span></span>
<span class="line"><span style="color: #F78C6C">20</span><span style="color: #F07178">     </span><span style="color: #A6ACCD">oldEndVNode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldChildren</span><span style="color: #F07178">[</span><span style="color: #89DDFF">--</span><span style="color: #A6ACCD">oldEndIdx</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">21</span><span style="color: #F07178">     </span><span style="color: #A6ACCD">newStartVNode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newChildren</span><span style="color: #F07178">[</span><span style="color: #89DDFF">++</span><span style="color: #A6ACCD">newStartIdx</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">22</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">23</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>如果旧子节点的头部节点与新子节点的尾部节点匹配，则说明该旧节点所对应的真实DOM 节点需要移动到尾部。</p>
<p>因此，需要获取当前尾部节点的下一个兄弟节点作为锚点，即oldEndVNode.el.nextSibling。最后，更新相关索引到下一个位置。</p>
<p>当前新旧子节点的头部索引和尾部索引发生重合，但仍满足循环的条件，所以还会进行下一轮的更新。</p>
<ol>
<li>比较旧子节点中的头部节点 p-2 与新子节点中的头部节点 p-2。发现两者 key 值相同，可以复用。但两者在新旧两组子节点中都是头部节点，因此不需要移动，只需要调用 patch 函数进行打补丁即可。</li>
</ol>
<p>代码实现如下：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #F78C6C">01</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">while</span><span style="color: #A6ACCD"> (oldStartIdx </span><span style="color: #89DDFF">&lt;=</span><span style="color: #A6ACCD"> oldEndIdx </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #A6ACCD"> newStartIdx </span><span style="color: #89DDFF">&lt;=</span><span style="color: #A6ACCD"> newEndIdx) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">02</span><span style="color: #F07178">   </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">oldStartVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newStartVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">03</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 调用 patch 函数在 oldStartVNode 与 newStartVNode 之间打补丁</span></span>
<span class="line"><span style="color: #F78C6C">04</span><span style="color: #F07178">     </span><span style="color: #82AAFF">patch</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">oldStartVNode</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newStartVNode</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">container</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F78C6C">05</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 更新相关索引，指向下一个位置</span></span>
<span class="line"><span style="color: #F78C6C">06</span><span style="color: #F07178">     </span><span style="color: #A6ACCD">oldStartVNode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldChildren</span><span style="color: #F07178">[</span><span style="color: #89DDFF">++</span><span style="color: #A6ACCD">oldStartIdx</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">07</span><span style="color: #F07178">     </span><span style="color: #A6ACCD">newStartVNode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newChildren</span><span style="color: #F07178">[</span><span style="color: #89DDFF">++</span><span style="color: #A6ACCD">newStartIdx</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">08</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">oldEndVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newEndVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">09</span><span style="color: #F07178">     </span><span style="color: #82AAFF">patch</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">oldEndVNode</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newEndVNode</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">container</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F78C6C">10</span><span style="color: #F07178">     </span><span style="color: #A6ACCD">oldEndVNode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldChildren</span><span style="color: #F07178">[</span><span style="color: #89DDFF">--</span><span style="color: #A6ACCD">oldEndIdx</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">11</span><span style="color: #F07178">     </span><span style="color: #A6ACCD">newEndVNode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newChildren</span><span style="color: #F07178">[</span><span style="color: #89DDFF">--</span><span style="color: #A6ACCD">newEndIdx</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">12</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">oldStartVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newEndVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">13</span><span style="color: #F07178">     </span><span style="color: #82AAFF">patch</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">oldStartVNode</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newEndVNode</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">container</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F78C6C">14</span><span style="color: #F07178">     </span><span style="color: #82AAFF">insert</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">oldStartVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">el</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">container</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldEndVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">el</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">nextSibling</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F78C6C">15</span></span>
<span class="line"><span style="color: #F78C6C">16</span><span style="color: #F07178">     </span><span style="color: #A6ACCD">oldStartVNode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldChildren</span><span style="color: #F07178">[</span><span style="color: #89DDFF">++</span><span style="color: #A6ACCD">oldStartIdx</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">17</span><span style="color: #F07178">     </span><span style="color: #A6ACCD">newEndVNode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newChildren</span><span style="color: #F07178">[</span><span style="color: #89DDFF">--</span><span style="color: #A6ACCD">newEndIdx</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">18</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">oldEndVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newStartVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">19</span><span style="color: #F07178">     </span><span style="color: #82AAFF">patch</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">oldEndVNode</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newStartVNode</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">container</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F78C6C">20</span><span style="color: #F07178">     </span><span style="color: #82AAFF">insert</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">oldEndVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">el</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">container</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldStartVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">el</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F78C6C">21</span></span>
<span class="line"><span style="color: #F78C6C">22</span><span style="color: #F07178">     </span><span style="color: #A6ACCD">oldEndVNode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldChildren</span><span style="color: #F07178">[</span><span style="color: #89DDFF">--</span><span style="color: #A6ACCD">oldEndIdx</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">23</span><span style="color: #F07178">     </span><span style="color: #A6ACCD">newStartVNode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newChildren</span><span style="color: #F07178">[</span><span style="color: #89DDFF">++</span><span style="color: #A6ACCD">newStartIdx</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">24</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">25</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>这一轮更新后，新旧子节点及真实 DOM 节点的状态如下：</p>
<p><img src="https://res.weread.qq.com/wrepub/CB_3300028078_image00556.jpeg" alt=""></p>
<h2 id="非理想状况的处理方式" tabindex="-1">非理想状况的处理方式 <a class="header-anchor" href="#非理想状况的处理方式" aria-label="Permalink to &quot;非理想状况的处理方式&quot;">&ZeroWidthSpace;</a></h2>
<p>双端 Diff 算法的每一轮比较的过程都分为四个步骤，但每一轮比较不可能都会命中四个步骤中的一个，这是非常理想的情况。</p>
<p>以下面这组节点为例：</p>
<p><img src="https://res.weread.qq.com/wrepub/CB_3300028078_image00563.jpeg" alt=""></p>
<p>当按照双端 Diff 算法的思路对它们进行第一轮比较时，会发现无法命中四个步骤中的任何一步。</p>
<p>此时，只能通过只能加额外的处理步骤来处理这种非理想情况。头尾的四个节点都没有可复用的节点，就应该尝试非头尾的节点能否复用。</p>
<p>具体做法为，在旧子节点中寻找新子节点的头部，代码如下：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #F78C6C">01</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">while</span><span style="color: #A6ACCD"> (oldStartIdx </span><span style="color: #89DDFF">&lt;=</span><span style="color: #A6ACCD"> oldEndIdx </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #A6ACCD"> newStartIdx </span><span style="color: #89DDFF">&lt;=</span><span style="color: #A6ACCD"> newEndIdx) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">02</span><span style="color: #F07178">   </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">oldStartVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newStartVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">03</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 省略部分代码</span></span>
<span class="line"><span style="color: #F78C6C">04</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">oldEndVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newEndVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">05</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 省略部分代码</span></span>
<span class="line"><span style="color: #F78C6C">06</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">oldStartVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newEndVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">07</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 省略部分代码</span></span>
<span class="line"><span style="color: #F78C6C">08</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">oldEndVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newStartVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">09</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 省略部分代码</span></span>
<span class="line"><span style="color: #F78C6C">10</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">11</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 遍历旧的一组子节点，试图寻找与 newStartVNode 拥有相同 key 值的节点</span></span>
<span class="line"><span style="color: #F78C6C">12</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// idxInOld 就是新的一组子节点的头部节点在旧的一组子节点中的索引</span></span>
<span class="line"><span style="color: #F78C6C">13</span><span style="color: #F07178">     </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">idxInOld</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldChildren</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">findIndex</span><span style="color: #F07178">(</span></span>
<span class="line"><span style="color: #F78C6C">14</span><span style="color: #F07178">       </span><span style="color: #A6ACCD; font-style: italic">node</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">node</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newStartVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span></span>
<span class="line"><span style="color: #F78C6C">15</span><span style="color: #F07178">     )</span></span>
<span class="line"><span style="color: #F78C6C">16</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">17</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span></span></code></pre>
</div><p><img src="https://res.weread.qq.com/wrepub/CB_3300028078_image00564.jpeg" alt=""></p>
<p>当拿新子节点的头部节点 p-2 在旧子节点中寻找时，发现可复用的节点在索引为 1 的位置。</p>
<p>说明节点 p-2 原本不是头部节点，但在更新后它应该变为头部节点。</p>
<p>所以需要将节点 p-2 对应的真实 DOM 节点移动到旧子节点的头部节点 p-1 对应的真实 DOM 节点之前。</p>
<p>具体实现如下：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #F78C6C">01</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">while</span><span style="color: #A6ACCD"> (oldStartIdx </span><span style="color: #89DDFF">&lt;=</span><span style="color: #A6ACCD"> oldEndIdx </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #A6ACCD"> newStartIdx </span><span style="color: #89DDFF">&lt;=</span><span style="color: #A6ACCD"> newEndIdx) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">02</span><span style="color: #F07178">   </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">oldStartVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newStartVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">03</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 省略部分代码</span></span>
<span class="line"><span style="color: #F78C6C">04</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">oldEndVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newEndVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">05</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 省略部分代码</span></span>
<span class="line"><span style="color: #F78C6C">06</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">oldStartVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newEndVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">07</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 省略部分代码</span></span>
<span class="line"><span style="color: #F78C6C">08</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">oldEndVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newStartVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">09</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 省略部分代码</span></span>
<span class="line"><span style="color: #F78C6C">10</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">11</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 遍历旧 children，试图寻找与 newStartVNode 拥有相同 key 值的元素</span></span>
<span class="line"><span style="color: #F78C6C">12</span><span style="color: #F07178">     </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">idxInOld</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldChildren</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">findIndex</span><span style="color: #F07178">(</span></span>
<span class="line"><span style="color: #F78C6C">13</span><span style="color: #F07178">       </span><span style="color: #A6ACCD; font-style: italic">node</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">node</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newStartVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span></span>
<span class="line"><span style="color: #F78C6C">14</span><span style="color: #F07178">     )</span></span>
<span class="line"><span style="color: #F78C6C">15</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// idxInOld 大于 0，说明找到了可复用的节点，并且需要将其对应的真实 DOM 移动到头部</span></span>
<span class="line"><span style="color: #F78C6C">16</span><span style="color: #F07178">     </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">idxInOld</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&gt;</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">17</span><span style="color: #F07178">       </span><span style="color: #676E95; font-style: italic">// idxInOld 位置对应的 vnode 就是需要移动的节点</span></span>
<span class="line"><span style="color: #F78C6C">18</span><span style="color: #F07178">       </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">vnodeToMove</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldChildren</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">idxInOld</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">19</span><span style="color: #F07178">       </span><span style="color: #676E95; font-style: italic">// 不要忘记除移动操作外还应该打补丁</span></span>
<span class="line"><span style="color: #F78C6C">20</span><span style="color: #F07178">       </span><span style="color: #82AAFF">patch</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">vnodeToMove</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newStartVNode</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">container</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F78C6C">21</span><span style="color: #F07178">       </span><span style="color: #676E95; font-style: italic">// 将 vnodeToMove.el 移动到头部节点 oldStartVNode.el 之前，因此使用后者作为锚点</span></span>
<span class="line"><span style="color: #F78C6C">22</span><span style="color: #F07178">       </span><span style="color: #82AAFF">insert</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">vnodeToMove</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">el</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">container</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldStartVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">el</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F78C6C">23</span><span style="color: #F07178">       </span><span style="color: #676E95; font-style: italic">// 由于位置 idxInOld 处的节点所对应的真实 DOM 已经移动到了别处，因此将其设置为 undefined</span></span>
<span class="line"><span style="color: #F78C6C">24</span><span style="color: #F07178">       </span><span style="color: #A6ACCD">oldChildren</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">idxInOld</span><span style="color: #F07178">] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">undefined</span></span>
<span class="line"><span style="color: #F78C6C">25</span><span style="color: #F07178">       </span><span style="color: #676E95; font-style: italic">// 最后更新 newStartIdx 到下一个位置</span></span>
<span class="line"><span style="color: #F78C6C">26</span><span style="color: #F07178">       </span><span style="color: #A6ACCD">newStartVNode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newChildren</span><span style="color: #F07178">[</span><span style="color: #89DDFF">++</span><span style="color: #A6ACCD">newStartIdx</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">27</span><span style="color: #F07178">     </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">28</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">29</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>经过上面的操作后，新旧两组子节点以及真实 DOM 节点的状态如下：</p>
<p><img src="https://res.weread.qq.com/wrepub/CB_3300028078_image00565.jpeg" alt=""></p>
<p>接着，双端 Diff 算法会继续进行。</p>
<p>需要注意的是，过程中会遇到之前被设为 undefined 的节点。这说明该节点已经被处理过了，因此可以直接跳过。为此，需要补充这部分逻辑的代码。具体如下：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #F78C6C">01</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">while</span><span style="color: #A6ACCD"> (oldStartIdx </span><span style="color: #89DDFF">&lt;=</span><span style="color: #A6ACCD"> oldEndIdx </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #A6ACCD"> newStartIdx </span><span style="color: #89DDFF">&lt;=</span><span style="color: #A6ACCD"> newEndIdx) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">02</span><span style="color: #F07178">   </span><span style="color: #676E95; font-style: italic">// 增加两个判断分支，如果头尾部节点为 undefined，则说明该节点已经被处理过了，直接跳到下一个位置</span></span>
<span class="line"><span style="color: #F78C6C">03</span><span style="color: #F07178">   </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">oldStartVNode</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">04</span><span style="color: #F07178">     </span><span style="color: #A6ACCD">oldStartVNode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldChildren</span><span style="color: #F07178">[</span><span style="color: #89DDFF">++</span><span style="color: #A6ACCD">oldStartIdx</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">05</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">oldEndVNode</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">06</span><span style="color: #F07178">     </span><span style="color: #A6ACCD">oldEndVNode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldChildren</span><span style="color: #F07178">[</span><span style="color: #89DDFF">--</span><span style="color: #A6ACCD">oldEndIdx</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">07</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">oldStartVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newStartVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">08</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 省略部分代码</span></span>
<span class="line"><span style="color: #F78C6C">09</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">oldEndVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newEndVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">10</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 省略部分代码</span></span>
<span class="line"><span style="color: #F78C6C">11</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">oldStartVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newEndVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">12</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 省略部分代码</span></span>
<span class="line"><span style="color: #F78C6C">13</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">oldEndVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newStartVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">14</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 省略部分代码</span></span>
<span class="line"><span style="color: #F78C6C">15</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">16</span><span style="color: #F07178">     </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">idxInOld</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldChildren</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">findIndex</span><span style="color: #F07178">(</span></span>
<span class="line"><span style="color: #F78C6C">17</span><span style="color: #F07178">       </span><span style="color: #A6ACCD; font-style: italic">node</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">node</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newStartVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span></span>
<span class="line"><span style="color: #F78C6C">18</span><span style="color: #F07178">     )</span></span>
<span class="line"><span style="color: #F78C6C">19</span><span style="color: #F07178">     </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">idxInOld</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&gt;</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">20</span><span style="color: #F07178">       </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">vnodeToMove</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldChildren</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">idxInOld</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">21</span><span style="color: #F07178">       </span><span style="color: #82AAFF">patch</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">vnodeToMove</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newStartVNode</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">container</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F78C6C">22</span><span style="color: #F07178">       </span><span style="color: #82AAFF">insert</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">vnodeToMove</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">el</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">container</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldStartVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">el</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F78C6C">23</span><span style="color: #F07178">       </span><span style="color: #A6ACCD">oldChildren</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">idxInOld</span><span style="color: #F07178">] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">undefined</span></span>
<span class="line"><span style="color: #F78C6C">24</span><span style="color: #F07178">       </span><span style="color: #A6ACCD">newStartVNode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newChildren</span><span style="color: #F07178">[</span><span style="color: #89DDFF">++</span><span style="color: #A6ACCD">newStartIdx</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">25</span><span style="color: #F07178">     </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">26</span></span>
<span class="line"><span style="color: #F78C6C">27</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">28</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="添加新元素" tabindex="-1">添加新元素 <a class="header-anchor" href="#添加新元素" aria-label="Permalink to &quot;添加新元素&quot;">&ZeroWidthSpace;</a></h2>
<p>当一轮比较过程中不会命中四个步骤中的任何一步时，会拿新的一组子节点中的头部节点去旧的一组子节点中寻找可复用的节点。然而，并不一定能找到。</p>
<p><img src="https://res.weread.qq.com/wrepub/CB_3300028078_image00571.jpeg" alt=""></p>
<p>对这组节点进行第一轮比较时，无法找到可复用的节点。因为旧子节点中根本没有 p-4 节点。</p>
<p>这说明节点 p-4 是一个新增节点，因为它是新子节点中的头节点，所以直接将它挂载到旧子节点的头部节点对应的真实 DOM 节点前即可。</p>
<p>代码如下：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #F78C6C">01</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">while</span><span style="color: #A6ACCD"> (oldStartIdx </span><span style="color: #89DDFF">&lt;=</span><span style="color: #A6ACCD"> oldEndIdx </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #A6ACCD"> newStartIdx </span><span style="color: #89DDFF">&lt;=</span><span style="color: #A6ACCD"> newEndIdx) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">02</span><span style="color: #F07178">   </span><span style="color: #676E95; font-style: italic">// 增加两个判断分支，如果头尾部节点为 undefined，则说明该节点已经被处理过了，直接跳到下一个位置</span></span>
<span class="line"><span style="color: #F78C6C">03</span><span style="color: #F07178">   </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">oldStartVNode</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">04</span><span style="color: #F07178">     </span><span style="color: #A6ACCD">oldStartVNode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldChildren</span><span style="color: #F07178">[</span><span style="color: #89DDFF">++</span><span style="color: #A6ACCD">oldStartIdx</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">05</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">oldEndVNode</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">06</span><span style="color: #F07178">     </span><span style="color: #A6ACCD">oldEndVNode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newChildren</span><span style="color: #F07178">[</span><span style="color: #89DDFF">--</span><span style="color: #A6ACCD">oldEndIdx</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">07</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">oldStartVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newStartVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">08</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 省略部分代码</span></span>
<span class="line"><span style="color: #F78C6C">09</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">oldEndVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newEndVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">10</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 省略部分代码</span></span>
<span class="line"><span style="color: #F78C6C">11</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">oldStartVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newEndVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">12</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 省略部分代码</span></span>
<span class="line"><span style="color: #F78C6C">13</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">oldEndVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newStartVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">14</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 省略部分代码</span></span>
<span class="line"><span style="color: #F78C6C">15</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">16</span><span style="color: #F07178">     </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">idxInOld</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldChildren</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">findIndex</span><span style="color: #F07178">(</span></span>
<span class="line"><span style="color: #F78C6C">17</span><span style="color: #F07178">       </span><span style="color: #A6ACCD; font-style: italic">node</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">node</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newStartVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span></span>
<span class="line"><span style="color: #F78C6C">18</span><span style="color: #F07178">     )</span></span>
<span class="line"><span style="color: #F78C6C">19</span><span style="color: #F07178">     </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">idxInOld</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&gt;</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">20</span><span style="color: #F07178">       </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">vnodeToMove</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldChildren</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">idxInOld</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">21</span><span style="color: #F07178">       </span><span style="color: #82AAFF">patch</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">vnodeToMove</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newStartVNode</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">container</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F78C6C">22</span><span style="color: #F07178">       </span><span style="color: #82AAFF">insert</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">vnodeToMove</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">el</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">container</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldStartVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">el</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F78C6C">23</span><span style="color: #F07178">       </span><span style="color: #A6ACCD">oldChildren</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">idxInOld</span><span style="color: #F07178">] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">undefined</span></span>
<span class="line"><span style="color: #F78C6C">24</span><span style="color: #F07178">     </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">25</span><span style="color: #F07178">       </span><span style="color: #676E95; font-style: italic">// 将 newStartVNode 作为新节点挂载到头部，使用当前头部节点 oldStartVNode.el 作为锚点</span></span>
<span class="line"><span style="color: #F78C6C">26</span><span style="color: #F07178">       </span><span style="color: #82AAFF">patch</span><span style="color: #F07178">(</span><span style="color: #89DDFF">null,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newStartVNode</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">container</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldStartVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">el</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F78C6C">27</span><span style="color: #F07178">     </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">28</span><span style="color: #F07178">     </span><span style="color: #A6ACCD">newStartVNode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newChildren</span><span style="color: #F07178">[</span><span style="color: #89DDFF">++</span><span style="color: #A6ACCD">newStartIdx</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">29</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">30</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>上面的代码还存在一些问题，如果频繁对尾部节点进行更新，会导致 oldEndIdx 小于 oldStartIdx 而结束更新的过程。</p>
<p>如下所示：</p>
<p><img src="https://res.weread.qq.com/wrepub/CB_3300028078_image00577.jpeg" alt=""></p>
<p>节点 p-4 直接在更新过程中被遗漏了，没有得到任何处理。</p>
<p>为了弥补这个缺陷，需要添加额外的处理代码：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #F78C6C">01</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">while</span><span style="color: #A6ACCD"> (oldStartIdx </span><span style="color: #89DDFF">&lt;=</span><span style="color: #A6ACCD"> oldEndIdx </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #A6ACCD"> newStartIdx </span><span style="color: #89DDFF">&lt;=</span><span style="color: #A6ACCD"> newEndIdx) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">02</span><span style="color: #F07178">   </span><span style="color: #676E95; font-style: italic">// 省略部分代码</span></span>
<span class="line"><span style="color: #F78C6C">03</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">04</span></span>
<span class="line"><span style="color: #F78C6C">05</span><span style="color: #A6ACCD"> </span><span style="color: #676E95; font-style: italic">// 循环结束后检查索引值的情况，</span></span>
<span class="line"><span style="color: #F78C6C">06</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #A6ACCD"> (oldEndIdx </span><span style="color: #89DDFF">&lt;</span><span style="color: #A6ACCD"> oldStartIdx </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #A6ACCD"> newStartIdx </span><span style="color: #89DDFF">&lt;=</span><span style="color: #A6ACCD"> newEndIdx) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">07</span><span style="color: #F07178">   </span><span style="color: #676E95; font-style: italic">// 如果满足条件，则说明有新的节点遗留，需要挂载它们</span></span>
<span class="line"><span style="color: #F78C6C">08</span><span style="color: #F07178">   </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178"> (</span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newStartIdx</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newEndIdx</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">++</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">09</span><span style="color: #F07178">     </span><span style="color: #82AAFF">patch</span><span style="color: #F07178">(</span><span style="color: #89DDFF">null,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newChildren</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">]</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">container</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldStartVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">el</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F78C6C">10</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">11</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>在 while 循环结束后增加一个条件判断，检查四个索引值的情况。如果还存在未挂载的新节点，将它们一一挂载到  oldStartVNode 对应的真实 DOM 节点前。</p>
<h2 id="移除不存在的元素" tabindex="-1">移除不存在的元素 <a class="header-anchor" href="#移除不存在的元素" aria-label="Permalink to &quot;移除不存在的元素&quot;">&ZeroWidthSpace;</a></h2>
<p>我们还会遇到新节点中的节点少于旧节点的情况，此时，需要移除元素。</p>
<p><img src="https://res.weread.qq.com/wrepub/CB_3300028078_image00578.jpeg" alt=""></p>
<p>对上面这组节点进行数轮更新后，新旧两组子节点以及真实 DOM 节点的状态如下：</p>
<p><img src="https://res.weread.qq.com/wrepub/CB_3300028078_image00580.jpeg" alt=""></p>
<p>此时变量 newStartIdx 的值大于变量 newEndIdx 的值，满足更新停止的条件，于是更新结束。</p>
<p>但此时旧的一组子节点中仍存在未被处理的节点，应该将其移除。因此，需要增加额外的代码来处理它：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #F78C6C">01</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">while</span><span style="color: #A6ACCD"> (oldStartIdx </span><span style="color: #89DDFF">&lt;=</span><span style="color: #A6ACCD"> oldEndIdx </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #A6ACCD"> newStartIdx </span><span style="color: #89DDFF">&lt;=</span><span style="color: #A6ACCD"> newEndIdx) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">02</span><span style="color: #F07178">   </span><span style="color: #676E95; font-style: italic">// 省略部分代码</span></span>
<span class="line"><span style="color: #F78C6C">03</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">04</span></span>
<span class="line"><span style="color: #F78C6C">05</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #A6ACCD"> (oldEndIdx </span><span style="color: #89DDFF">&lt;</span><span style="color: #A6ACCD"> oldStartIdx </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #A6ACCD"> newStartIdx </span><span style="color: #89DDFF">&lt;=</span><span style="color: #A6ACCD"> newEndIdx) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">06</span><span style="color: #F07178">   </span><span style="color: #676E95; font-style: italic">// 添加新节点</span></span>
<span class="line"><span style="color: #F78C6C">07</span><span style="color: #F07178">   </span><span style="color: #676E95; font-style: italic">// 省略部分代码</span></span>
<span class="line"><span style="color: #F78C6C">08</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #A6ACCD"> (newEndIdx </span><span style="color: #89DDFF">&lt;</span><span style="color: #A6ACCD"> newStartIdx </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #A6ACCD"> oldStartIdx </span><span style="color: #89DDFF">&lt;=</span><span style="color: #A6ACCD"> oldEndIdx) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">09</span><span style="color: #F07178">   </span><span style="color: #676E95; font-style: italic">// 移除操作</span></span>
<span class="line"><span style="color: #F78C6C">10</span><span style="color: #F07178">   </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178"> (</span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldStartIdx</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldEndIdx</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">++</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">11</span><span style="color: #F07178">     </span><span style="color: #82AAFF">unmount</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">oldChildren</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">])</span></span>
<span class="line"><span style="color: #F78C6C">12</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">13</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>与处理新增节点类似，在 while 循环结束后添加一个 elseif 的分支，用来卸载已不存在的节点。此时，处于 oldStartIdx 和 oldEndIdx 这个区间的节点应该被卸载。</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[keep-alive的源码解析]]></title>
            <link>https://desain7.top/interview/vue/keep-alive的源码解析.html</link>
            <guid>https://desain7.top/interview/vue/keep-alive的源码解析.html</guid>
            <pubDate>Thu, 14 Sep 2023 16:00:00 GMT</pubDate>
            <description><![CDATA[```js
export default {
  name: 'keep-alive',
  abstract: true, //抽象组件
 
  props: { //接收三个参数
    incl]]></description>
            <content:encoded><![CDATA[<h1 id="keep-alive的源码解析" tabindex="-1">keep-alive的源码解析 <a class="header-anchor" href="#keep-alive的源码解析" aria-label="Permalink to &quot;keep-alive的源码解析&quot;">&ZeroWidthSpace;</a></h1>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight has-diff" ><code><span class="line"><span style="color: #89DDFF; font-style: italic">export</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF; font-style: italic">default</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">name</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">keep-alive</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">abstract</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FF9CAC">true</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #676E95; font-style: italic">//抽象组件</span></span>
<span class="line"><span style="color: #A6ACCD"> </span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">props</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #676E95; font-style: italic">//接收三个参数</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #F07178">include</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> patternTypes</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #F07178">exclude</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> patternTypes</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #F07178">max</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> [String</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> Number]</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">},</span></span>
<span class="line"><span style="color: #A6ACCD"> </span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">created</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">cache</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">Object</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">create</span><span style="color: #F07178">(</span><span style="color: #89DDFF">null</span><span style="color: #F07178">) </span><span style="color: #676E95; font-style: italic">//缓存的组件</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">keys</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> [] </span><span style="color: #676E95; font-style: italic">//缓存组件的key数组</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">},</span></span>
<span class="line"><span style="color: #A6ACCD"> </span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">destroyed</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178"> (</span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">in</span><span style="color: #F07178"> </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">cache</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">pruneCacheEntry</span><span style="color: #F07178">(</span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">cache</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">key</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">keys</span><span style="color: #F07178">) </span><span style="color: #676E95; font-style: italic">//删除缓存中所有组件</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">},</span></span>
<span class="line"><span style="color: #A6ACCD"> </span></span>
<span class="line"><span style="color: #A6ACCD"> </span><span style="color: #676E95; font-style: italic">/**</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">    监听include和exclude的值，如果当前cache中的组件不在include中或在exclude中，则</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">    需要将该组件从cache中去掉。pruneCache方法就是将cache中不满足include和exclude</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">    规则的组件删除掉</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> */</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">mounted</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">this.</span><span style="color: #82AAFF">$watch</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">include</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">val</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">pruneCache</span><span style="color: #F07178">(</span><span style="color: #89DDFF">this,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">name</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #82AAFF">matches</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">val</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">name</span><span style="color: #F07178">))</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">this.</span><span style="color: #82AAFF">$watch</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">exclude</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">val</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">pruneCache</span><span style="color: #F07178">(</span><span style="color: #89DDFF">this,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">name</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!</span><span style="color: #82AAFF">matches</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">val</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">name</span><span style="color: #F07178">))</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">},</span></span>
<span class="line"><span style="color: #A6ACCD"> </span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">render</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">slot</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">$slots</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">default</span><span style="color: #F07178"> </span><span style="color: #676E95; font-style: italic">//获取keep-alive标签包裹的默认插槽中的元素</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">vnode</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">VNode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">getFirstComponentChild</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">slot</span><span style="color: #F07178">) </span><span style="color: #676E95; font-style: italic">//获取到默认插槽中的第一个子元素（keep-alive只对第一个子元素起作用）</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">componentOptions</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #89DDFF">?</span><span style="color: #FFCB6B">VNodeComponentOptions</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">vnode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">vnode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">componentOptions</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">componentOptions</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// check pattern</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">name</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #89DDFF">?</span><span style="color: #FFCB6B">string</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">getComponentName</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">componentOptions</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">include</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">exclude</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">this</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> ( </span><span style="color: #676E95; font-style: italic">//如果组件不符合include和exclude规则，那么直接返回该组件，不需要从缓存中获取</span></span>
<span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">// not included</span></span>
<span class="line"><span style="color: #F07178">        (</span><span style="color: #A6ACCD">include</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">name</span><span style="color: #F07178"> </span><span style="color: #89DDFF">||</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!</span><span style="color: #82AAFF">matches</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">include</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">name</span><span style="color: #F07178">))) </span><span style="color: #89DDFF">||</span></span>
<span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">// excluded</span></span>
<span class="line"><span style="color: #F07178">        (</span><span style="color: #A6ACCD">exclude</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">name</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #F07178"> </span><span style="color: #82AAFF">matches</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">exclude</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">name</span><span style="color: #F07178">))</span></span>
<span class="line"><span style="color: #F07178">      ) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">vnode</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178"> </span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">cache</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">keys</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">this</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">key</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #89DDFF">?</span><span style="color: #FFCB6B">string</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">vnode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">==</span><span style="color: #F07178"> </span><span style="color: #89DDFF">null</span></span>
<span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">// same constructor may get registered as different local components</span></span>
<span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">// so cid alone is not enough (#3269)</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">?</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">componentOptions</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">Ctor</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">cid</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">componentOptions</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">tag</span><span style="color: #F07178"> </span><span style="color: #89DDFF">?</span><span style="color: #F07178"> </span><span style="color: #89DDFF">`</span><span style="color: #C3E88D">::</span><span style="color: #89DDFF">${</span><span style="color: #A6ACCD">componentOptions</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">tag</span><span style="color: #89DDFF">}`</span><span style="color: #F07178"> </span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;&#39;</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">vnode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">cache</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">]) </span><span style="color: #89DDFF">{</span><span style="color: #F07178"> </span><span style="color: #676E95; font-style: italic">//如果缓存中存在当前组件</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #A6ACCD">vnode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">componentInstance</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">cache</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">]</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">componentInstance</span><span style="color: #F07178"> </span><span style="color: #676E95; font-style: italic">//将缓存中的组件实例赋给当前组件实例</span></span>
<span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">// make current key freshest</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #82AAFF">remove</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">keys</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">key</span><span style="color: #F07178">) </span><span style="color: #676E95; font-style: italic">//将当前组件key从缓存的keys数组中删除</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #A6ACCD">keys</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">) </span><span style="color: #676E95; font-style: italic">//将当前组件keypush到缓存的keys中，以此来保持该组件在缓存中是最新的</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span><span style="color: #F07178"> </span><span style="color: #676E95; font-style: italic">//如果缓存中没有当前组件</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #A6ACCD">cache</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">vnode</span><span style="color: #F07178"> </span><span style="color: #676E95; font-style: italic">//将当前组件放入缓存中</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #A6ACCD">keys</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">) </span><span style="color: #676E95; font-style: italic">//将当前组件key放入缓存keys数组中</span></span>
<span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">// prune oldest entry</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">max</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">keys</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&gt;</span><span style="color: #F07178"> </span><span style="color: #82AAFF">parseInt</span><span style="color: #F07178">(</span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">max</span><span style="color: #F07178">)) </span><span style="color: #89DDFF">{</span><span style="color: #F07178"> </span><span style="color: #676E95; font-style: italic">//如果已缓存的组件数量大于max值，则将缓存keys数组中第一个组件删除掉。（缓存中组件的顺序是不常用的在前面，常用的在后面，这是由上面代码中如果组件在缓存中，就需要先在缓存中删除组件key，再重新向缓存keys数组中推入组件key的实现方式决定的）</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #82AAFF">pruneCacheEntry</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">cache</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">keys</span><span style="color: #F07178">[</span><span style="color: #F78C6C">0</span><span style="color: #F07178">]</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">keys</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">_vnode</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178"> </span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">vnode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">data</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">keepAlive</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">true</span><span style="color: #F07178"> </span><span style="color: #676E95; font-style: italic">//标记该组件的keepAlive状态</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">vnode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">||</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">slot</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">slot</span><span style="color: #F07178">[</span><span style="color: #F78C6C">0</span><span style="color: #F07178">]) </span><span style="color: #676E95; font-style: italic">//如果上面方法没执行，则直接返回vnode或第一个子元素</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #676E95; font-style: italic">/**</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">* 获取组件的名称。组件的componentOptions包含以下几个属性{ Ctor, tag, propsData, listeners，children } ，通过Ctor.options.name或tag可以获取到组件的name值</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">**/</span></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">getComponentName</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">opts</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">?</span><span style="color: #FFCB6B">VNodeComponentOptions</span><span style="color: #89DDFF">):</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">?</span><span style="color: #FFCB6B">string</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">opts</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">opts</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">Ctor</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">options</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">name</span><span style="color: #F07178"> </span><span style="color: #89DDFF">||</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">opts</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">tag</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">/**</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">* 判断组件是否在include或exclude中</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">**/</span></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">matches</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">pattern</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">string</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">|</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">RegExp</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">|</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">Array</span><span style="color: #89DDFF">&lt;</span><span style="color: #FFCB6B">string</span><span style="color: #89DDFF">&gt;,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">name</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">string</span><span style="color: #89DDFF">):</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">boolean</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">Array</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">isArray</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">pattern</span><span style="color: #F07178">)) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">pattern</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">indexOf</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">name</span><span style="color: #F07178">) </span><span style="color: #89DDFF">&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F78C6C">1</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">typeof</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">pattern</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">string</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">pattern</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">split</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">,</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">indexOf</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">name</span><span style="color: #F07178">) </span><span style="color: #89DDFF">&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F78C6C">1</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #82AAFF">isRegExp</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">pattern</span><span style="color: #F07178">)) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">pattern</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">test</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">name</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #676E95; font-style: italic">/* istanbul ignore next */</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">false</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #A6ACCD"> </span></span>
<span class="line"><span style="color: #676E95; font-style: italic">/**</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">* 如果缓存的组件不在include或exclude的规则内，则将组件从缓存中删除</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">*/</span></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">pruneCache</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">keepAliveInstance</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">any</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">filter</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">Function</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">cache</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">keys</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">_vnode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">keepAliveInstance</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178"> (</span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">in</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">cache</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">cachedNode</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #89DDFF">?</span><span style="color: #FFCB6B">VNode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">cache</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">cachedNode</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">name</span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #89DDFF">?</span><span style="color: #FFCB6B">string</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">getComponentName</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">cachedNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">componentOptions</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">name</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!</span><span style="color: #82AAFF">filter</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">name</span><span style="color: #F07178">)) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #82AAFF">pruneCacheEntry</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">cache</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">key</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">keys</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">_vnode</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">/**</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">* 删除缓存中的组件</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">*/</span></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">pruneCacheEntry</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD; font-style: italic">cache</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">VNodeCache</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD; font-style: italic">key</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">string</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD; font-style: italic">keys</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">Array</span><span style="color: #89DDFF">&lt;</span><span style="color: #FFCB6B">string</span><span style="color: #89DDFF">&gt;,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD; font-style: italic">current</span><span style="color: #89DDFF">?:</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">VNode</span></span>
<span class="line"><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">cached</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">cache</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">cached</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">current</span><span style="color: #F07178"> </span><span style="color: #89DDFF">||</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">cached</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">tag</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!==</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">current</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">tag</span><span style="color: #F07178">)) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">cached</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">componentInstance</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">$destroy</span><span style="color: #F07178">()</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">cache</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">null</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #82AAFF">remove</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">keys</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">key</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[简单 diff 算法]]></title>
            <link>https://desain7.top/interview/vue/简单diff算法.html</link>
            <guid>https://desain7.top/interview/vue/简单diff算法.html</guid>
            <pubDate>Thu, 14 Sep 2023 16:00:00 GMT</pubDate>
            <description><![CDATA[ 减少 DOM 操作的性能开销
对于下面两组虚拟节点：
```js
// 旧 vnode
const oldVNode = {
   type: 'div',
   children: [
     ]]></description>
            <content:encoded><![CDATA[<h1 id="简单-diff-算法" tabindex="-1">简单 diff 算法 <a class="header-anchor" href="#简单-diff-算法" aria-label="Permalink to &quot;简单 diff 算法&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="减少-dom-操作的性能开销" tabindex="-1">减少 DOM 操作的性能开销 <a class="header-anchor" href="#减少-dom-操作的性能开销" aria-label="Permalink to &quot;减少 DOM 操作的性能开销&quot;">&ZeroWidthSpace;</a></h2>
<p>对于下面两组虚拟节点：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// 旧 vnode</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> oldVNode </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">   </span><span style="color: #F07178">type</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">div</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">   </span><span style="color: #F07178">children</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> [</span></span>
<span class="line"><span style="color: #A6ACCD">     </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">type</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">p</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">children</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">1</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">},</span></span>
<span class="line"><span style="color: #A6ACCD">     </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">type</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">p</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">children</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">2</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">},</span></span>
<span class="line"><span style="color: #A6ACCD">     </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">type</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">p</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">children</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">3</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #A6ACCD">   ]</span></span>
<span class="line"><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF"> </span><span style="color: #676E95; font-style: italic">// 新 vnode</span></span>
<span class="line"><span style="color: #A6ACCD"> </span><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> newVNode </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">   </span><span style="color: #F07178">type</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">div</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">   </span><span style="color: #F07178">children</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> [</span></span>
<span class="line"><span style="color: #A6ACCD">     </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">type</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">p</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">children</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">4</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">},</span></span>
<span class="line"><span style="color: #A6ACCD">     </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">type</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">p</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">children</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">5</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">},</span></span>
<span class="line"><span style="color: #A6ACCD">     </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">type</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">p</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">children</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">6</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #A6ACCD">   ]</span></span>
<span class="line"><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>当我们按照常规的 Patch 操作来更新子节点时，需要执行 6 次 DOM 操作。</p>
<ul>
<li>卸载所有旧子节点，需要 3 次 DOM 删除操作；</li>
<li>挂载所有新子节点，需要 3 次 DOM 添加操作。</li>
</ul>
<p>然而，上面的两组虚拟节点在更新前后，标签元素并没有发生变化，只有 p 标签的子节点（文本节点）发生了变化。</p>
<p>所以，最理想的更新方式是，直接更新这个 p 标签的文本节点的内容。这样只需要一次 DOM 操作，即可完成一个 p 标签更新。</p>
<p>对于上面这种情况，只需要执行 3 次 DOM 操作就可以完成全部节点的更新，性能相比原来提升了一倍。</p>
<p>我们可以对 patchChildren 函数进行更新：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #F78C6C">01</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">patchChildren</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">n1</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">n2</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">container</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">02</span><span style="color: #F07178">   </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">typeof</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">n2</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">children</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">string</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">03</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 省略部分代码</span></span>
<span class="line"><span style="color: #F78C6C">04</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">Array</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">isArray</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">n2</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">children</span><span style="color: #F07178">)) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">05</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 重新实现两组子节点的更新方式</span></span>
<span class="line"><span style="color: #F78C6C">06</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 新旧 children</span></span>
<span class="line"><span style="color: #F78C6C">07</span><span style="color: #F07178">     </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldChildren</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">n1</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">children</span></span>
<span class="line"><span style="color: #F78C6C">08</span><span style="color: #F07178">     </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newChildren</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">n2</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">children</span></span>
<span class="line"><span style="color: #F78C6C">09</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 遍历旧的 children</span></span>
<span class="line"><span style="color: #F78C6C">10</span><span style="color: #F07178">     </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178"> (</span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldChildren</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">++</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">11</span><span style="color: #F07178">       </span><span style="color: #676E95; font-style: italic">// 调用 patch 函数逐个更新子节点</span></span>
<span class="line"><span style="color: #F78C6C">12</span><span style="color: #F07178">       </span><span style="color: #82AAFF">patch</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">oldChildren</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">]</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newChildren</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">])</span></span>
<span class="line"><span style="color: #F78C6C">13</span><span style="color: #F07178">     </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">14</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">15</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 省略部分代码</span></span>
<span class="line"><span style="color: #F78C6C">16</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">17</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>但上面的方法仍存在弊端，当新旧节点数量不一致时，他将无法正常秩序。</p>
<p>当新节点多于旧节点时，我们要对多出的部分执行挂载操作；同理，当旧节点多于新节点时，我们要对多出的部分执行卸载操作。</p>
<p>所以我们应该始终遍历较短的那组子节点，对上面的代码进行更新：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #F78C6C">01</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">patchChildren</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">n1</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">n2</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">container</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">02</span><span style="color: #F07178">   </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">typeof</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">n2</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">children</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">string</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">03</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 省略部分代码</span></span>
<span class="line"><span style="color: #F78C6C">04</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">Array</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">isArray</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">n2</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">children</span><span style="color: #F07178">)) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">05</span><span style="color: #F07178">     </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldChildren</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">n1</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">children</span></span>
<span class="line"><span style="color: #F78C6C">06</span><span style="color: #F07178">     </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newChildren</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">n2</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">children</span></span>
<span class="line"><span style="color: #F78C6C">07</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 旧的一组子节点的长度</span></span>
<span class="line"><span style="color: #F78C6C">08</span><span style="color: #F07178">     </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldLen</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldChildren</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span></span>
<span class="line"><span style="color: #F78C6C">09</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 新的一组子节点的长度</span></span>
<span class="line"><span style="color: #F78C6C">10</span><span style="color: #F07178">     </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newLen</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newChildren</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span></span>
<span class="line"><span style="color: #F78C6C">11</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 两组子节点的公共长度，即两者中较短的那一组子节点的长度</span></span>
<span class="line"><span style="color: #F78C6C">12</span><span style="color: #F07178">     </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">commonLength</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">Math</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">min</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">oldLen</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newLen</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F78C6C">13</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 遍历 commonLength 次</span></span>
<span class="line"><span style="color: #F78C6C">14</span><span style="color: #F07178">     </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178"> (</span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">commonLength</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">++</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">15</span><span style="color: #F07178">       </span><span style="color: #82AAFF">patch</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">oldChildren</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">]</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newChildren</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">]</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">container</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F78C6C">16</span><span style="color: #F07178">     </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">17</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 如果 newLen &gt; oldLen，说明有新子节点需要挂载</span></span>
<span class="line"><span style="color: #F78C6C">18</span><span style="color: #F07178">     </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">newLen</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&gt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldLen</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">19</span><span style="color: #F07178">       </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178"> (</span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">commonLength</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newLen</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">++</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">20</span><span style="color: #F07178">         </span><span style="color: #82AAFF">patch</span><span style="color: #F07178">(</span><span style="color: #89DDFF">null,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newChildren</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">]</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">container</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F78C6C">21</span><span style="color: #F07178">       </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">22</span><span style="color: #F07178">     </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">oldLen</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&gt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newLen</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">23</span><span style="color: #F07178">       </span><span style="color: #676E95; font-style: italic">// 如果 oldLen &gt; newLen，说明有旧子节点需要卸载</span></span>
<span class="line"><span style="color: #F78C6C">24</span><span style="color: #F07178">       </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178"> (</span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">commonLength</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldLen</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">++</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">25</span><span style="color: #F07178">         </span><span style="color: #82AAFF">unmount</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">oldChildren</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">])</span></span>
<span class="line"><span style="color: #F78C6C">26</span><span style="color: #F07178">       </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">27</span><span style="color: #F07178">     </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">28</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">29</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 省略部分代码</span></span>
<span class="line"><span style="color: #F78C6C">30</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">31</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="dom-复用与-key-的作用" tabindex="-1">DOM 复用与 key 的作用 <a class="header-anchor" href="#dom-复用与-key-的作用" aria-label="Permalink to &quot;DOM 复用与 key 的作用&quot;">&ZeroWidthSpace;</a></h2>
<p>对于下面两组虚拟节点，上面的方法依然存在很大的弊端：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #F78C6C">01</span><span style="color: #A6ACCD"> </span><span style="color: #676E95; font-style: italic">// oldChildren</span></span>
<span class="line"><span style="color: #F78C6C">02</span><span style="color: #A6ACCD"> [</span></span>
<span class="line"><span style="color: #F78C6C">03</span><span style="color: #A6ACCD">   </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">type</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">p</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">},</span></span>
<span class="line"><span style="color: #F78C6C">04</span><span style="color: #A6ACCD">   </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">type</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">div</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">},</span></span>
<span class="line"><span style="color: #F78C6C">05</span><span style="color: #A6ACCD">   </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">type</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">span</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">06</span><span style="color: #A6ACCD"> ]</span></span>
<span class="line"><span style="color: #F78C6C">07</span></span>
<span class="line"><span style="color: #F78C6C">08</span><span style="color: #A6ACCD"> </span><span style="color: #676E95; font-style: italic">// newChildren</span></span>
<span class="line"><span style="color: #F78C6C">09</span><span style="color: #A6ACCD"> [</span></span>
<span class="line"><span style="color: #F78C6C">10</span><span style="color: #A6ACCD">   </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">type</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">span</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">},</span></span>
<span class="line"><span style="color: #F78C6C">11</span><span style="color: #A6ACCD">   </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">type</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">p</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">},</span></span>
<span class="line"><span style="color: #F78C6C">12</span><span style="color: #A6ACCD">   </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">type</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">div</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">13</span><span style="color: #A6ACCD"> ]</span></span></code></pre>
</div><p>我们仍然需要执行六次 DOM 操作来完成更新，但实际上，我们只需要对 DOM 节点进行移动来完成更新。</p>
<p>但是，想要通过 DOM 的移动来完成更新，必须要保证一个前提：新旧两组子节点中的确存在可复用的节点。</p>
<p>我们可以通过 vnode.type 来判断子节点是否相同。不过这种判断方式仍然有问题，对于下面的例子：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #F78C6C">01</span><span style="color: #A6ACCD"> </span><span style="color: #676E95; font-style: italic">// oldChildren</span></span>
<span class="line"><span style="color: #F78C6C">02</span><span style="color: #A6ACCD"> [</span></span>
<span class="line"><span style="color: #F78C6C">03</span><span style="color: #A6ACCD">   </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">type</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">p</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">children</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">1</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">},</span></span>
<span class="line"><span style="color: #F78C6C">04</span><span style="color: #A6ACCD">   </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">type</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">p</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">children</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">2</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">},</span></span>
<span class="line"><span style="color: #F78C6C">05</span><span style="color: #A6ACCD">   </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">type</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">p</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">children</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">3</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">06</span><span style="color: #A6ACCD"> ]</span></span>
<span class="line"><span style="color: #F78C6C">07</span></span>
<span class="line"><span style="color: #F78C6C">08</span><span style="color: #A6ACCD"> </span><span style="color: #676E95; font-style: italic">// newChildren</span></span>
<span class="line"><span style="color: #F78C6C">09</span><span style="color: #A6ACCD"> [</span></span>
<span class="line"><span style="color: #F78C6C">10</span><span style="color: #A6ACCD">   </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">type</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">p</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">children</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">3</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">},</span></span>
<span class="line"><span style="color: #F78C6C">11</span><span style="color: #A6ACCD">   </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">type</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">p</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">children</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">1</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">},</span></span>
<span class="line"><span style="color: #F78C6C">12</span><span style="color: #A6ACCD">   </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">type</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">p</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">children</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">2</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">13</span><span style="color: #A6ACCD"> ]</span></span></code></pre>
</div><p>我们可以通过移动 DOM 来对上面的节点完成更新，但这两组节点的 vnode.type 的属性值相同。所以，我们无法确认新旧两组子节点中节点的对应关系，也就无法对它们进行移动了。</p>
<p>此时，我们可以引入额外的 key 作为 vnode 的标识。</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #F78C6C">01</span><span style="color: #A6ACCD"> </span><span style="color: #676E95; font-style: italic">// oldChildren</span></span>
<span class="line"><span style="color: #F78C6C">02</span><span style="color: #A6ACCD"> [</span></span>
<span class="line"><span style="color: #F78C6C">03</span><span style="color: #A6ACCD">   </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">type</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">p</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">children</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">1</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">key</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">1</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">},</span></span>
<span class="line"><span style="color: #F78C6C">04</span><span style="color: #A6ACCD">   </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">type</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">p</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">children</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">2</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">key</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">2</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">},</span></span>
<span class="line"><span style="color: #F78C6C">05</span><span style="color: #A6ACCD">   </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">type</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">p</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">children</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">3</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">key</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">3</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">06</span><span style="color: #A6ACCD"> ]</span></span>
<span class="line"><span style="color: #F78C6C">07</span></span>
<span class="line"><span style="color: #F78C6C">08</span><span style="color: #A6ACCD"> </span><span style="color: #676E95; font-style: italic">// newChildren</span></span>
<span class="line"><span style="color: #F78C6C">09</span><span style="color: #A6ACCD"> [</span></span>
<span class="line"><span style="color: #F78C6C">10</span><span style="color: #A6ACCD">   </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">type</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">p</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">children</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">3</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">key</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">3</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">},</span></span>
<span class="line"><span style="color: #F78C6C">11</span><span style="color: #A6ACCD">   </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">type</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">p</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">children</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">1</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">key</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">1</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">},</span></span>
<span class="line"><span style="color: #F78C6C">12</span><span style="color: #A6ACCD">   </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">type</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">p</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">children</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">2</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">key</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">2</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">13</span><span style="color: #A6ACCD"> ]</span></span></code></pre>
</div><p>key 属性就像虚拟节点的“身份证”号，只要两个虚拟节点的 type 属性值和 key 属性值都相同，那么我们就认为它们是相同的，即可以进行 DOM 的复用。</p>
<p>根据子节点的 key 属性，明确知道了新子节点在旧子节点中的位置，就可以进行相应的 DOM 移动操作了。</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #F78C6C">01</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> oldVNode </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">type</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">p</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">key</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">children</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">text 1</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">02</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> newVNode </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">type</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">p</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">key</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">children</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">text 2</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>DOM 可复用并不意味着不需要更新，我们可能仍需要对这两个虚拟节点进行 patch 操作。</p>
<p>对 patchChildren 再次进行更新：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #F78C6C">01</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">patchChildren</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">n1</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">n2</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">container</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">02</span><span style="color: #F07178">   </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">typeof</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">n2</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">children</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">string</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">03</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 省略部分代码</span></span>
<span class="line"><span style="color: #F78C6C">04</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">Array</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">isArray</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">n2</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">children</span><span style="color: #F07178">)) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">05</span><span style="color: #F07178">     </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldChildren</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">n1</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">children</span></span>
<span class="line"><span style="color: #F78C6C">06</span><span style="color: #F07178">     </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newChildren</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">n2</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">children</span></span>
<span class="line"><span style="color: #F78C6C">07</span></span>
<span class="line"><span style="color: #F78C6C">08</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 遍历新的 children</span></span>
<span class="line"><span style="color: #F78C6C">09</span><span style="color: #F07178">     </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178"> (</span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newChildren</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">++</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">10</span><span style="color: #F07178">       </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newVNode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newChildren</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">11</span><span style="color: #F07178">       </span><span style="color: #676E95; font-style: italic">// 遍历旧的 children</span></span>
<span class="line"><span style="color: #F78C6C">12</span><span style="color: #F07178">       </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178"> (</span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">j</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">j</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldChildren</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">j</span><span style="color: #89DDFF">++</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">13</span><span style="color: #F07178">         </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldVNode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldChildren</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">j</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">14</span><span style="color: #F07178">         </span><span style="color: #676E95; font-style: italic">// 如果找到了具有相同 key 值的两个节点，说明可以复用，但仍然需要调用 patch 函数更新</span></span>
<span class="line"><span style="color: #F78C6C">15</span><span style="color: #F07178">         </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">newVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">16</span><span style="color: #F07178">           </span><span style="color: #82AAFF">patch</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">oldVNode</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newVNode</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">container</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F78C6C">17</span><span style="color: #F07178">           </span><span style="color: #89DDFF; font-style: italic">break</span><span style="color: #F07178"> </span><span style="color: #676E95; font-style: italic">// 这里需要 break</span></span>
<span class="line"><span style="color: #F78C6C">18</span><span style="color: #F07178">         </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">19</span><span style="color: #F07178">       </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">20</span><span style="color: #F07178">     </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">21</span></span>
<span class="line"><span style="color: #F78C6C">22</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">23</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 省略部分代码</span></span>
<span class="line"><span style="color: #F78C6C">24</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">25</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>在上面的代码中，使用了两层 for 循环，外层循环用于遍历新的一组子节点，内层循环则遍历旧的一组子节点。</p>
<p>在内层循环中，我们逐个对比新旧子节点的 key 值，试图在旧的子节点中找到可复用的节点。一旦找到，则调用 patch 函数进行打补丁。</p>
<h2 id="找到需要移动的元素" tabindex="-1">找到需要移动的元素 <a class="header-anchor" href="#找到需要移动的元素" aria-label="Permalink to &quot;找到需要移动的元素&quot;">&ZeroWidthSpace;</a></h2>
<p>通过 key 值找到可复用的节点后，我们需要思考如何判断一个节点是否需要移动，以及如何移动。</p>
<p><img src="https://res.weread.qq.com/wrepub/CB_3300028078_image00533.jpeg" alt=""></p>
<p>我们对上面的节点执行更新算法，并在这个过程中，每一次寻找可复用的节点时，都记录该可复用节点在旧的一组子节点中的位置索引。</p>
<p>如果把这些位置索引值按照先后顺序排列，则可以得到一个序列。如果一个递增的序列，则不需要移动任何节点。</p>
<p>下面是执行流程：</p>
<ol>
<li>第一步：</li>
</ol>
<ul>
<li>取新的一组子节点中的第一个节点 p-3，它的 key 为 3。</li>
<li>尝试在旧的一组子节点中找到具有相同 key 值的可复用节点，发现能够找到，并且该节点在旧的一组子节点中的索引为 2。</li>
</ul>
<ol start="2">
<li>第二步：</li>
</ol>
<ul>
<li>取新的一组子节点中的第二个节点 p-1，它的 key 为 1。</li>
<li>尝试在旧的一组子节点中找到具有相同 key 值的可复用节点，发现能够找到，并且该节点在旧的一组子节点中的索引为 0。</li>
<li>此时，可以发现索引值递增的顺序被打破了。节点 p-1 在旧 children 中的索引是 0，它小于节点 p-3 在旧 children 中的索引 2。</li>
<li>这说明节点 p-1 在旧 children 中排在节点 p-3前面，但在新的 children 中，它排在节点 p-3 后面。</li>
<li>因此，我们能够得出一个结论：节点 p-1 对应的真实 DOM 需要移动。</li>
</ul>
<ol start="3">
<li>第三步：</li>
</ol>
<ul>
<li>取新的一组子节点中的第三个节点 p-2，它的 key 为 2。尝试在旧的一组子节点中找到具有相同 key 值的可复用节点，发现能够找到，并且该节点在旧的一组子节点中的索引为 1。</li>
<li>此时，可以发现节点 p-2 在旧 children 中的索引 1 要小于节点 p-3 在旧 children 中的索引 2。</li>
<li>这说明，节点 p-2 在旧 children 中排在节点 p-3 前面，但在新的 children 中，它排在节点 p-3 后面。</li>
<li>因此，节点 p-2 对应的真实DOM 也需要移动。</li>
</ul>
<p><strong>以上就是 Diff 算法在执行更新的过程中，判断节点是否需要移动的方式。</strong></p>
<p>我们可以将节点 p-3 在旧 children 中的索引定义为：</p>
<p><em>在旧 children 中寻找具有相同 key 值节点的过程中，遇到的最大索引值。</em></p>
<p>在后续寻找的过程中，如果存在索引值比当前遇到的最大索引值还要小的节点，则意味着这个节点需要移动。</p>
<p>使用 lastIndex 变量来存储整个寻找过程中遇到的最大索引值，得到下面的代码：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #F78C6C">01</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">patchChildren</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">n1</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">n2</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">container</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">02</span><span style="color: #F07178">   </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">typeof</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">n2</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">children</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">string</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">03</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 省略部分代码</span></span>
<span class="line"><span style="color: #F78C6C">04</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">Array</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">isArray</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">n2</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">children</span><span style="color: #F07178">)) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">05</span><span style="color: #F07178">     </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldChildren</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">n1</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">children</span></span>
<span class="line"><span style="color: #F78C6C">06</span><span style="color: #F07178">     </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newChildren</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">n2</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">children</span></span>
<span class="line"><span style="color: #F78C6C">07</span></span>
<span class="line"><span style="color: #F78C6C">08</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 用来存储寻找过程中遇到的最大索引值</span></span>
<span class="line"><span style="color: #F78C6C">09</span><span style="color: #F07178">     </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">lastIndex</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span></span>
<span class="line"><span style="color: #F78C6C">10</span><span style="color: #F07178">     </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178"> (</span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newChildren</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">++</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">11</span><span style="color: #F07178">       </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newVNode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newChildren</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">12</span><span style="color: #F07178">       </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178"> (</span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">j</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">j</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldChildren</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">j</span><span style="color: #89DDFF">++</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">13</span><span style="color: #F07178">         </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldVNode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldChildren</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">j</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">14</span><span style="color: #F07178">         </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">newVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">15</span><span style="color: #F07178">           </span><span style="color: #82AAFF">patch</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">oldVNode</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newVNode</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">container</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F78C6C">16</span><span style="color: #F07178">           </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">j</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">lastIndex</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">17</span><span style="color: #F07178">             </span><span style="color: #676E95; font-style: italic">// 如果当前找到的节点在旧 children 中的索引小于最大索引值 lastIndex，</span></span>
<span class="line"><span style="color: #F78C6C">18</span><span style="color: #F07178">             </span><span style="color: #676E95; font-style: italic">// 说明该节点对应的真实 DOM 需要移动</span></span>
<span class="line"><span style="color: #F78C6C">19</span><span style="color: #F07178">           </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">20</span><span style="color: #F07178">             </span><span style="color: #676E95; font-style: italic">// 如果当前找到的节点在旧 children 中的索引不小于最大索引值，</span></span>
<span class="line"><span style="color: #F78C6C">21</span><span style="color: #F07178">             </span><span style="color: #676E95; font-style: italic">// 则更新 lastIndex 的值</span></span>
<span class="line"><span style="color: #F78C6C">22</span><span style="color: #F07178">             </span><span style="color: #A6ACCD">lastIndex</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">j</span></span>
<span class="line"><span style="color: #F78C6C">23</span><span style="color: #F07178">           </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">24</span><span style="color: #F07178">           </span><span style="color: #89DDFF; font-style: italic">break</span><span style="color: #F07178"> </span><span style="color: #676E95; font-style: italic">// 这里需要 break</span></span>
<span class="line"><span style="color: #F78C6C">25</span><span style="color: #F07178">         </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">26</span><span style="color: #F07178">       </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">27</span><span style="color: #F07178">     </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">28</span></span>
<span class="line"><span style="color: #F78C6C">29</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">30</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 省略部分代码</span></span>
<span class="line"><span style="color: #F78C6C">31</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">32</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>如果新旧节点的 key 值相同，说明我们在旧 children 中找到了可复用 DOM 的节点。</p>
<p>此时我们用该节点在旧 children 中的索引 j 与 lastIndex 进行比较，如果 j 小于 lastIndex，说明当前 oldVNode 对应的真实DOM 需要移动，否则说明不需要移动。</p>
<p>此时还应该将变量 j 的值赋给变量 lastIndex，以保证寻找节点的过程中，变量 lastIndex 始终存储着当前遇到的最大索引值。</p>
<h2 id="如何移动元素" tabindex="-1">如何移动元素 <a class="header-anchor" href="#如何移动元素" aria-label="Permalink to &quot;如何移动元素&quot;">&ZeroWidthSpace;</a></h2>
<p>移动节点指的是，移动一个虚拟节点所对应的真实 DOM 节点，并不是移动虚拟节点本身。</p>
<div class="tip custom-block"><p class="custom-block-title">TIP</p>
<p>当一个虚拟节点被挂载后，它对应的真实 DOM 节点会存储在他的 vnode.el 属性中。</p>
</div>
<p>在更新操作发生时，渲染器调用 patchElement 函数在新旧虚拟节点间打补丁。如下：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #F78C6C">01</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">patchElement</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">n1</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">n2</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">02</span><span style="color: #F07178">   </span><span style="color: #676E95; font-style: italic">// 新的 vnode 也引用了真实 DOM 元素</span></span>
<span class="line"><span style="color: #F78C6C">03</span><span style="color: #F07178">   </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">el</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">n2</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">el</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">n1</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">el</span></span>
<span class="line"><span style="color: #F78C6C">04</span><span style="color: #F07178">   </span><span style="color: #676E95; font-style: italic">// 省略部分代码</span></span>
<span class="line"><span style="color: #F78C6C">05</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>无论是新的子节点还是旧子节点，都存在对真实 DOM 的引用。在此基础上，我们就可以进行 DOM 移动的操作了。</p>
<p><img src="https://res.weread.qq.com/wrepub/CB_3300028078_image00536.jpeg" alt=""></p>
<p>以上面这组 DOM 节点为例，他的更新步骤如下：</p>
<ol>
<li>对于新子节点中的第一个节点 p-3</li>
</ol>
<ul>
<li>
<p>它的 key 值为3，在旧的一组子结点中找具有相同 key 值的可复用节点。发现能找到，且该节点在旧子节点中索引为 <em>2</em>。</p>
</li>
<li>
<p>此时的 lastIndex 值为 0，<em>2</em> 大于 0，所以节点 p-3 对应的真实 DOM 不需要移动，但需要将 lastIndex 的值更新为 2。</p>
</li>
</ul>
<ol start="2">
<li>对于新子节点中的第二个节点 p-1</li>
</ol>
<ul>
<li>
<p>它的 key 值为 1，在旧的一组子结点中找具有相同 key 值的可复用节点。发现能找到，且该节点在旧子节点中索引为 <em>0</em>。</p>
</li>
<li>
<p>此时的 lastIndex 值为 2，<em>0</em> 小于 2，所以节点 p-1 对应的真实 DOM 需要移动。</p>
</li>
<li>
<p>**新 children 的顺序就是更新后的真实 DOM 节点应有的顺序。**所以节点 p-1 在新的 children 中的位置旧代表了真实 DOM 更新后的位置。</p>
</li>
<li>
<p>由于节点 p-1 在新的 children 中排在节点 p-3 后面，所以我们要把节点 p-1 对应的真实 DOM 移动到节点 p-3 对应的真实 DOM 后面。</p>
</li>
</ul>
<ol start="3">
<li>对于新子节点中的第三个节点 p-2</li>
</ol>
<ul>
<li>
<p>它的 key 值为 2，在旧的一组子结点中找具有相同 key 值的可复用节点。发现能找到，且该节点在旧子节点中索引为 <em>1</em>。</p>
</li>
<li>
<p>此时的 lastIndex 值为 2，<em>1</em> 小于 2，所以节点 p-2 对应的真实 DOM 需要移动。</p>
</li>
<li>
<p>由于节点 p-2 在新的 children 中排在节点 p-1 后面，所以我们要把节点 p-2 对应的真实 DOM 移动到节点 p-1 对应的真实 DOM 后面。</p>
</li>
</ul>
<p><strong>此时，真实 DOM 的顺序与新一组子节点的顺序相同。至此，更新操作完成。</strong></p>
<p>按照上面的思路，实现代码如下：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #F78C6C">01</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">patchChildren</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">n1</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">n2</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">container</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">02</span><span style="color: #F07178">   </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">typeof</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">n2</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">children</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">string</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">03</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 省略部分代码</span></span>
<span class="line"><span style="color: #F78C6C">04</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">Array</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">isArray</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">n2</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">children</span><span style="color: #F07178">)) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">05</span><span style="color: #F07178">     </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldChildren</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">n1</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">children</span></span>
<span class="line"><span style="color: #F78C6C">06</span><span style="color: #F07178">     </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newChildren</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">n2</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">children</span></span>
<span class="line"><span style="color: #F78C6C">07</span></span>
<span class="line"><span style="color: #F78C6C">08</span><span style="color: #F07178">     </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">lastIndex</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span></span>
<span class="line"><span style="color: #F78C6C">09</span><span style="color: #F07178">     </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178"> (</span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newChildren</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">++</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">10</span><span style="color: #F07178">       </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newVNode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newChildren</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">11</span><span style="color: #F07178">       </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">j</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span></span>
<span class="line"><span style="color: #F78C6C">12</span><span style="color: #F07178">       </span><span style="color: #676E95; font-style: italic">// 在第一层循环中定义变量 find，代表是否在旧的一组子节点中找到可复用的节点，</span></span>
<span class="line"><span style="color: #F78C6C">13</span><span style="color: #F07178">       </span><span style="color: #676E95; font-style: italic">// 初始值为 false，代表没找到</span></span>
<span class="line"><span style="color: #F78C6C">14</span><span style="color: #F07178">       </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">find</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">false</span></span>
<span class="line"><span style="color: #F78C6C">15</span><span style="color: #F07178">       </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">j</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">j</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldChildren</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">j</span><span style="color: #89DDFF">++</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">16</span><span style="color: #F07178">         </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldVNode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldChildren</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">j</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">17</span><span style="color: #F07178">         </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">newVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">18</span><span style="color: #F07178">           </span><span style="color: #676E95; font-style: italic">// 一旦找到可复用的节点，则将变量 find 的值设为 true</span></span>
<span class="line"><span style="color: #F78C6C">19</span><span style="color: #F07178">           </span><span style="color: #A6ACCD">find</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">true</span></span>
<span class="line"><span style="color: #89DDFF">            </span><span style="color: #676E95; font-style: italic">// 调用 patch 函数对当前旧子节点和新子节点进行比较和更新操作。</span></span>
<span class="line"><span style="color: #F78C6C">20</span><span style="color: #F07178">           </span><span style="color: #82AAFF">patch</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">oldVNode</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newVNode</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">container</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">            </span><span style="color: #676E95; font-style: italic">// 此时的真实 DOM 完成了更新，但可能还需要进行移动</span></span>
<span class="line"><span style="color: #F78C6C">21</span><span style="color: #F07178">           </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">j</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">lastIndex</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">22</span><span style="color: #F07178">             </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">prevVNode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newChildren</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">23</span><span style="color: #F07178">             </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">prevVNode</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 使用前一个虚拟节点对应的真实 DOM 的下一个兄弟节点作为锚点元素</span></span>
<span class="line"><span style="color: #F78C6C">24</span><span style="color: #F07178">               </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">anchor</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">prevVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">el</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">nextSibling</span></span>
<span class="line"><span style="color: #F78C6C">25</span><span style="color: #F07178">               </span><span style="color: #82AAFF">insert</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">newVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">el</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">container</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">anchor</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F78C6C">26</span><span style="color: #F07178">             </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">27</span><span style="color: #F07178">           </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">28</span><span style="color: #F07178">             </span><span style="color: #A6ACCD">lastIndex</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">j</span></span>
<span class="line"><span style="color: #F78C6C">29</span><span style="color: #F07178">           </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">30</span><span style="color: #F07178">           </span><span style="color: #89DDFF; font-style: italic">break</span></span>
<span class="line"><span style="color: #F78C6C">31</span><span style="color: #F07178">         </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">32</span><span style="color: #F07178">       </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">33</span><span style="color: #F07178">       </span><span style="color: #676E95; font-style: italic">// 如果代码运行到这里，find 仍然为 false，</span></span>
<span class="line"><span style="color: #F78C6C">34</span><span style="color: #F07178">       </span><span style="color: #676E95; font-style: italic">// 说明当前 newVNode 没有在旧的一组子节点中找到可复用的节点</span></span>
<span class="line"><span style="color: #F78C6C">35</span><span style="color: #F07178">       </span><span style="color: #676E95; font-style: italic">// 也就是说，当前 newVNode 是新增节点，需要挂载</span></span>
<span class="line"><span style="color: #F78C6C">36</span><span style="color: #F07178">       </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">find</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">37</span><span style="color: #F07178">         </span><span style="color: #676E95; font-style: italic">// 为了将节点挂载到正确位置，我们需要先获取锚点元素</span></span>
<span class="line"><span style="color: #F78C6C">38</span><span style="color: #F07178">         </span><span style="color: #676E95; font-style: italic">// 首先获取当前 newVNode 的前一个 vnode 节点</span></span>
<span class="line"><span style="color: #F78C6C">39</span><span style="color: #F07178">         </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">prevVNode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newChildren</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">40</span><span style="color: #F07178">         </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">anchor</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">null</span></span>
<span class="line"><span style="color: #F78C6C">41</span><span style="color: #F07178">         </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">prevVNode</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">42</span><span style="color: #F07178">           </span><span style="color: #676E95; font-style: italic">// 如果有前一个 vnode 节点，则使用它的下一个兄弟节点作为锚点元素</span></span>
<span class="line"><span style="color: #F78C6C">43</span><span style="color: #F07178">           </span><span style="color: #A6ACCD">anchor</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">prevVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">el</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">nextSibling</span></span>
<span class="line"><span style="color: #F78C6C">44</span><span style="color: #F07178">         </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">45</span><span style="color: #F07178">           </span><span style="color: #676E95; font-style: italic">// 如果没有前一个 vnode 节点，说明即将挂载的新节点是第一个子节点</span></span>
<span class="line"><span style="color: #F78C6C">46</span><span style="color: #F07178">           </span><span style="color: #676E95; font-style: italic">// 这时我们使用容器元素的 firstChild 作为锚点</span></span>
<span class="line"><span style="color: #F78C6C">47</span><span style="color: #F07178">           </span><span style="color: #A6ACCD">anchor</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">container</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">firstChild</span></span>
<span class="line"><span style="color: #F78C6C">48</span><span style="color: #F07178">         </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">49</span><span style="color: #F07178">         </span><span style="color: #676E95; font-style: italic">// 挂载 newVNode</span></span>
<span class="line"><span style="color: #F78C6C">50</span><span style="color: #F07178">         </span><span style="color: #82AAFF">patch</span><span style="color: #F07178">(</span><span style="color: #89DDFF">null,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newVNode</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">container</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">anchor</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F78C6C">51</span><span style="color: #F07178">       </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">52</span><span style="color: #F07178">     </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">53</span></span>
<span class="line"><span style="color: #F78C6C">54</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">55</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 省略部分代码</span></span>
<span class="line"><span style="color: #F78C6C">56</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">57</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span></span></code></pre>
</div><p>为了让 patch 函数支持传递第四个参数，将它的代码调整成如下：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #F78C6C">01</span><span style="color: #A6ACCD"> </span><span style="color: #676E95; font-style: italic">// patch 函数需要接收第四个参数，即锚点元素</span></span>
<span class="line"><span style="color: #F78C6C">02</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">patch</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">n1</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">n2</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">container</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">anchor</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">03</span><span style="color: #F07178">   </span><span style="color: #676E95; font-style: italic">// 省略部分代码</span></span>
<span class="line"><span style="color: #F78C6C">04</span></span>
<span class="line"><span style="color: #F78C6C">05</span><span style="color: #F07178">   </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">typeof</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">type</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">string</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">06</span><span style="color: #F07178">     </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">n1</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">07</span><span style="color: #F07178">       </span><span style="color: #676E95; font-style: italic">// 挂载时将锚点元素作为第三个参数传递给 mountElement 函数</span></span>
<span class="line"><span style="color: #F78C6C">08</span><span style="color: #F07178">       </span><span style="color: #82AAFF">mountElement</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">n2</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">container</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">anchor</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F78C6C">09</span><span style="color: #F07178">     </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">10</span><span style="color: #F07178">       </span><span style="color: #82AAFF">patchElement</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">n1</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">n2</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F78C6C">11</span><span style="color: #F07178">     </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">12</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">type</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">Text</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">13</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 省略部分代码</span></span>
<span class="line"><span style="color: #F78C6C">14</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">type</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">Fragment</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">15</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 省略部分代码</span></span>
<span class="line"><span style="color: #F78C6C">16</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">17</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">18</span></span>
<span class="line"><span style="color: #F78C6C">19</span><span style="color: #A6ACCD"> </span><span style="color: #676E95; font-style: italic">// mountElement 函数需要增加第三个参数，即锚点元素</span></span>
<span class="line"><span style="color: #F78C6C">20</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">mountElement</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">vnode</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">container</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">anchor</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">21</span><span style="color: #F07178">   </span><span style="color: #676E95; font-style: italic">// 省略部分代码</span></span>
<span class="line"><span style="color: #F78C6C">22</span></span>
<span class="line"><span style="color: #F78C6C">23</span><span style="color: #F07178">   </span><span style="color: #676E95; font-style: italic">// 在插入节点时，将锚点元素透传给 insert 函数</span></span>
<span class="line"><span style="color: #F78C6C">24</span><span style="color: #F07178">   </span><span style="color: #82AAFF">insert</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">el</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">container</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">anchor</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F78C6C">25</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="移除不存在的元素" tabindex="-1">移除不存在的元素 <a class="header-anchor" href="#移除不存在的元素" aria-label="Permalink to &quot;移除不存在的元素&quot;">&ZeroWidthSpace;</a></h2>
<p>在更新子节点时，还可能出现元素被删除的情况。一轮更新结束后，被删除节点对应的真实 DOM 仍然存在，所以需要增加额外的逻辑来删除遗留节点。</p>
<p>思路很简单，当基本的更新结束时，我们需要遍历旧的子节点，然后去新的一组子节点中寻找具有相同 key 值的节点。如果找不到，则说明该节点应该被删除。代码如下：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #F78C6C">01</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">patchChildren</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">n1</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">n2</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">container</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">02</span><span style="color: #F07178">   </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">typeof</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">n2</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">children</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">string</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">03</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 省略部分代码</span></span>
<span class="line"><span style="color: #F78C6C">04</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">Array</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">isArray</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">n2</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">children</span><span style="color: #F07178">)) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">05</span><span style="color: #F07178">     </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldChildren</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">n1</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">children</span></span>
<span class="line"><span style="color: #F78C6C">06</span><span style="color: #F07178">     </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newChildren</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">n2</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">children</span></span>
<span class="line"><span style="color: #F78C6C">07</span></span>
<span class="line"><span style="color: #F78C6C">08</span><span style="color: #F07178">     </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">lastIndex</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span></span>
<span class="line"><span style="color: #F78C6C">09</span><span style="color: #F07178">     </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178"> (</span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newChildren</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">++</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">10</span><span style="color: #F07178">       </span><span style="color: #676E95; font-style: italic">// 省略部分代码</span></span>
<span class="line"><span style="color: #F78C6C">11</span><span style="color: #F07178">     </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">12</span></span>
<span class="line"><span style="color: #F78C6C">13</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 上一步的更新操作完成后</span></span>
<span class="line"><span style="color: #F78C6C">14</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 遍历旧的一组子节点</span></span>
<span class="line"><span style="color: #F78C6C">15</span><span style="color: #F07178">     </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178"> (</span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldChildren</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">++</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">16</span><span style="color: #F07178">       </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldVNode</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldChildren</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F78C6C">17</span><span style="color: #F07178">       </span><span style="color: #676E95; font-style: italic">// 拿旧子节点 oldVNode 去新的一组子节点中寻找具有相同 key 值的节点</span></span>
<span class="line"><span style="color: #F78C6C">18</span><span style="color: #F07178">       </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">has</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newChildren</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">find</span><span style="color: #F07178">(</span></span>
<span class="line"><span style="color: #F78C6C">19</span><span style="color: #F07178">         </span><span style="color: #A6ACCD; font-style: italic">vnode</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">vnode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">oldVNode</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">key</span></span>
<span class="line"><span style="color: #F78C6C">20</span><span style="color: #F07178">       )</span></span>
<span class="line"><span style="color: #F78C6C">21</span><span style="color: #F07178">       </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">has</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">22</span><span style="color: #F07178">         </span><span style="color: #676E95; font-style: italic">// 如果没有找到具有相同 key 值的节点，则说明需要删除该节点</span></span>
<span class="line"><span style="color: #F78C6C">23</span><span style="color: #F07178">         </span><span style="color: #676E95; font-style: italic">// 调用 unmount 函数将其卸载</span></span>
<span class="line"><span style="color: #F78C6C">24</span><span style="color: #F07178">         </span><span style="color: #82AAFF">unmount</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">oldVNode</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F78C6C">25</span><span style="color: #F07178">       </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">26</span><span style="color: #F07178">     </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">27</span></span>
<span class="line"><span style="color: #F78C6C">28</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F78C6C">29</span><span style="color: #F07178">     </span><span style="color: #676E95; font-style: italic">// 省略部分代码</span></span>
<span class="line"><span style="color: #F78C6C">30</span><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F78C6C">31</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span></span></code></pre>
</div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[TCP 的三次握手和四次挥手]]></title>
            <link>https://desain7.top/interview/计算机网络/TCP 的三次握手和四次挥手.html</link>
            <guid>https://desain7.top/interview/计算机网络/TCP 的三次握手和四次挥手.html</guid>
            <pubDate>Thu, 14 Sep 2023 16:00:00 GMT</pubDate>
            <description><![CDATA[ 什么是三次握手？为什么需要三次握手？
三次握手其实就是指在建立一次 TCP 连接时，需要客户端和服务器总共发送三个包。
进行三次握手的主要作用：
- 确认通信双方的接收能力和发送能力是否正常。
- ]]></description>
            <content:encoded><![CDATA[<h1 id="tcp-的三次握手和四次挥手" tabindex="-1">TCP 的三次握手和四次挥手 <a class="header-anchor" href="#tcp-的三次握手和四次挥手" aria-label="Permalink to &quot;TCP 的三次握手和四次挥手&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="什么是三次握手-为什么需要三次握手" tabindex="-1">什么是三次握手？为什么需要三次握手？ <a class="header-anchor" href="#什么是三次握手-为什么需要三次握手" aria-label="Permalink to &quot;什么是三次握手？为什么需要三次握手？&quot;">&ZeroWidthSpace;</a></h2>
<p>三次握手其实就是指在建立一次 TCP 连接时，需要客户端和服务器总共发送三个包。</p>
<p>进行三次握手的主要作用：</p>
<ul>
<li>确认通信双方的接收能力和发送能力是否正常。</li>
<li>指定自己的初始化序列号为后面的可靠性传送做准备。（连接服务器指定端口，建立TCP连接，并同步连接双方的序列号和确认号，交换TCP窗口大小信息）</li>
</ul>
<h2 id="三次握手的过程" tabindex="-1">三次握手的过程 <a class="header-anchor" href="#三次握手的过程" aria-label="Permalink to &quot;三次握手的过程&quot;">&ZeroWidthSpace;</a></h2>
<p>开始时，客户端处于 Closed 状态，服务端处于 Listen 状态。</p>
<ul>
<li>第一次握手：</li>
</ul>
<p>客户端向服务器发送一个 SYN 报文，并指明客户端的初始化序列号 ISN，此时客户端处于 SYN_SEND 状态。</p>
<div class="tip custom-block"><p class="custom-block-title">TIP</p>
<p>首部的同步位 SYN=1，初始序号 seq=x，SYN=1 的报文段不能携带数据，但要消耗掉一个序号。</p>
</div>
<ul>
<li>第二次握手：</li>
</ul>
<p>服务器收到 SYN 报文后，会以自己的 SYN 报文作为应答，也会指定自己的初始化序列号 ISN。同时把客户端的 ISN + 1 作为 ACK 的值，表示自己已经收到了客户端的 SYN，此时服务器处于 SYN_REVD 状态。</p>
<div class="tip custom-block"><p class="custom-block-title">TIP</p>
<p>在确认报文段中 SYN=1，ACK=1，确认号 ack=x+1，初始序号 seq=y</p>
</div>
<ul>
<li>第三次握手：</li>
</ul>
<p>客户端收到 SYN 报文后，会发送一个 ACK 报文（值为服务器的 ISN + 1），表示已经收到了服务器的  SYN 报文，此时客户端处于 ESTABLISHED 状态。</p>
<p>服务器收到 ACK 报文之后，也处于 ESTABLISHED 状态，此时，双方成功建立连接。</p>
<div class="tip custom-block"><p class="custom-block-title">TIP</p>
<p>确认报文段ACK=1，确认号ack=y+1，序号seq=x+1（初始为seq=x，第二个报文段所以要+1），ACK报文段可以携带数据，不携带数据则不消耗序号。</p>
</div>
<p><strong>简单来说就是以下三步</strong>：</p>
<ul>
<li>第一次握手： 客户端向服务端发送连接请求报文段。该报文段中包含自身的数据通讯初始序号。请求发送后，客户端便进入 SYN-SENT 状态。</li>
<li>第二次握手： 服务端收到连接请求报文段后，如果同意连接，则会发送一个应答，该应答中也会包含自身的数据通讯初始序号，发送完成后便进入 SYN-RECEIVED 状态。</li>
<li>第三次握手： 当客户端收到连接同意的应答后，还要向服务端发送一个确认报文。客户端发完这个报文段后便进入 ESTABLISHED 状态，服务端收到这个应答后也进入 ESTABLISHED 状态，此时连接建立成功。</li>
</ul>
<p>TCP 三次握手的建立连接的过程其实就是相互确认初始序号的过程，告诉对方，什么样序号的报文段能够被正确接收。</p>
<p>第三次握手的作用是客户端对服务器端的初始序号的确认。如果只使用两次握手，那么服务器就没有办法知道自己的序号是否已被确认。</p>
<p>同时这样也是为了防止失效的请求报文段被服务器接收，而出现错误的情况。</p>
<h3 id="为什么不能两次握手呢" tabindex="-1">为什么不能两次握手呢？ <a class="header-anchor" href="#为什么不能两次握手呢" aria-label="Permalink to &quot;为什么不能两次握手呢？&quot;">&ZeroWidthSpace;</a></h3>
<p>假设客户端发出连接请求，但因连接请求报文丢失而未收到确认，于是客户端再重传一次连接请求。</p>
<p>后来收到了确认，成建立了连接。数据传输完毕后，就释放了连接，客户端共发出了两个连接请求报文段，其中第一个丢失，第二个到达了服务端。</p>
<p>但第一个丢失的报文段只是在某些网络结点长时间滞留了，延误到连接释放以后的某个时间才到达服务端，此时服务端误认为客户端又发出一次新的连接请求，于是就向客户端发出确认报文段，同意建立连接。</p>
<p>不采用三次握手，只要服务端发出确认，就建立新的连接了，此时客户端会忽略服务端发来的确认，也不发送数据，则服务端会一直等待客户端发送数据，浪费资源。</p>
<h2 id="四次挥手" tabindex="-1">四次挥手 <a class="header-anchor" href="#四次挥手" aria-label="Permalink to &quot;四次挥手&quot;">&ZeroWidthSpace;</a></h2>
<p>开始时，双方都处于 ESTABLISHED 状态，加入是客户端先发起关闭请求。</p>
<p>四次挥手的过程如下：</p>
<ul>
<li>第一次挥手：客户端发送一个 FIN 报文，报文中指定一个序列号。此时客户端处于 FIN_WAIT1 状态。</li>
</ul>
<div class="tip custom-block"><p class="custom-block-title">TIP</p>
<p>即先发出连接释放报文段（FIN = 1，序号 seq = u），再停止发送数据，主动关闭 TCP 连接，接着进入 FIN_WAIT1（终止等待1）状态，等待服务端确认。</p>
</div>
<ul>
<li>第二次挥手：服务器收到 FIN 之后，发送 ACK 报文，并把客户端的序列号值 + 1 作为 ACK 报文的序列号值，表示已经收到了客户端的报文，此时服务器处于 CLOSE_WAIT 状态。</li>
</ul>
<div class="tip custom-block"><p class="custom-block-title">TIP</p>
<p>即服务端收到连接释放报文段后即发出确认报文段（ACK=1，确认号ack=u+1，序号seq=v），服务端进入CLOSE_WAIT（关闭等待）状态，此时的TCP处于半关闭状态，客户端到服务端的连接释放。客户端收到服务端的确认后，进入FIN_WAIT2（终止等待2）状态，等待服务端发出的连接释放报文段。</p>
</div>
<ul>
<li>第三次挥手：如果此时服务器也想断开连接了，和客户端的第一次挥手一样，向客户端发送 FIN 报文，并指定一个序列号。此时服务器处于 LAST_ACK 状态。</li>
</ul>
<div class="tip custom-block"><p class="custom-block-title">TIP</p>
<p>即服务端没有要向客户端发出的数据，服务端发出连接释放报文段（FIN=1，ACK=1，序号seq=w，确认号ack=u+1），服务端进入LAST_ACK（最后确认）状态，等待客户端的确认。</p>
</div>
<ul>
<li>第四次挥手：客户端收到 FIN 后，同样会发送一个 ACK 报文作为应答，并把服务端的序列号值 + 1 作为自己的 ACK 报文的序列号值，此时客户端处于 TIME_WAIT 状态。一段时间过后，在确保服务端收到了自己的 ACK 报文后，客户端进入 CLOSED 状态，服务端收到 ACK 报文之后，就关闭连接了，处于 CLOSED 状态。</li>
</ul>
<div class="tip custom-block"><p class="custom-block-title">TIP</p>
<p>即客户端收到服务端的连接释放报文段后，对此发出确认报文段（ACK=1，seq=u+1，ack=w+1），客户端进入TIME_WAIT（时间等待）状态。此时TCP未释放掉，需要经过时间等待计时器设置的时间2MSL后，客户端才进入CLOSED状态。</p>
</div>
<p><strong>简单来说就是以下四步：</strong></p>
<ol>
<li>
<p>第一次挥手：若客户端认为数据发送完成，则它需要向服务端发送连接释放请求。</p>
</li>
<li>
<p>第二次挥手：服务端收到连接释放请求后，会告诉应用层要释放 TCP 链接。然后会发送 ACK 包，并进入 CLOSE_WAIT 状态，此时表明客户端到服务端的连接已经释放，不再接收客户端发的数据了。但是因为 TCP 连接是双向的，所以服务端仍旧可以发送数据给客户端。</p>
</li>
<li>
<p>第三次挥手：服务端如果此时还有没发完的数据会继续发送，完毕后会向客户端发送连接释放请求，然后服务端便进入 LAST-ACK 状态。</p>
</li>
<li>
<p>第四次挥手： 客户端收到释放请求后，向服务端发送确认应答，此时客户端进入 TIME-WAIT 状态。该状态会持续 2MSL（最大段生存期，指报文段在网络中生存的时间，超时会被抛弃） 时间，若该时间段内没有服务端的重发请求的话，就进入 CLOSED 状态。当服务端收到确认应答后，也便进入 CLOSED 状态。</p>
</li>
</ol>
<p>TCP 使用四次挥手的原因是因为 TCP 的连接是全双工的，所以需要双方分别释放到对方的连接，单独一方的连接释放，只代表不能再向对方发送数据，连接处于的是半释放的状态。</p>
<p><strong>最后一次挥手中，客户端会等待一段时间再关闭的原因，是为了防止发送给服务器的确认报文段丢失或者出错，从而导致服务器端不能正常关闭。</strong></p>
<h3 id="为什么需要四次挥手呢" tabindex="-1">为什么需要四次挥手呢？ <a class="header-anchor" href="#为什么需要四次挥手呢" aria-label="Permalink to &quot;为什么需要四次挥手呢？&quot;">&ZeroWidthSpace;</a></h3>
<p>因为当服务端收到客户端的SYN连接请求报文后，可以直接发送SYN+ACK报文。其中ACK报文是用来应答的，SYN报文是用来同步的。</p>
<p>但在关闭连接时，当服务端收到 FIN 报文后，很可能并不会立即关闭SOCKET，所以只能先回复一个 ACK 报文，告诉客户端，“你发的FIN报文我收到了”。只有等到我所有的报文都发送完了，我才能发送FIN报文，因此不能一起发送，故需要四次挥手。</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[常见的场景类问题]]></title>
            <link>https://desain7.top/coding/js/常见的场景类问题.html</link>
            <guid>https://desain7.top/coding/js/常见的场景类问题.html</guid>
            <pubDate>Wed, 13 Sep 2023 16:00:00 GMT</pubDate>
            <description><![CDATA[ 循环打印红黄绿
红灯 3s 亮一次，绿灯 1s 亮一次，黄灯 2s 亮一次；如何让三个灯不断交替重复亮灯？
 实现每隔一秒打印 1,2,3,4
 寻找文章出出现频率最高的单词
```js
funct]]></description>
            <content:encoded><![CDATA[<h1 id="常见的场景类问题" tabindex="-1">常见的场景类问题 <a class="header-anchor" href="#常见的场景类问题" aria-label="Permalink to &quot;常见的场景类问题&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="循环打印红黄绿" tabindex="-1">循环打印红黄绿 <a class="header-anchor" href="#循环打印红黄绿" aria-label="Permalink to &quot;循环打印红黄绿&quot;">&ZeroWidthSpace;</a></h2>
<p>红灯 3s 亮一次，绿灯 1s 亮一次，黄灯 2s 亮一次；如何让三个灯不断交替重复亮灯？</p>
<h2 id="实现每隔一秒打印-1-2-3-4" tabindex="-1">实现每隔一秒打印 1,2,3,4 <a class="header-anchor" href="#实现每隔一秒打印-1-2-3-4" aria-label="Permalink to &quot;实现每隔一秒打印 1,2,3,4&quot;">&ZeroWidthSpace;</a></h2>
<h2 id="寻找文章出出现频率最高的单词" tabindex="-1">寻找文章出出现频率最高的单词 <a class="header-anchor" href="#寻找文章出出现频率最高的单词" aria-label="Permalink to &quot;寻找文章出出现频率最高的单词&quot;">&ZeroWidthSpace;</a></h2>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">findMostWord</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">article</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 合法性判断</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">article</span><span style="color: #F07178">) </span><span style="color: #89DDFF; font-style: italic">return</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 参数处理</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">article</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">article</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">trim</span><span style="color: #F07178">()</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">toLowerCase</span><span style="color: #F07178">()</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">wordList</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">article</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">match</span><span style="color: #F07178">(</span><span style="color: #89DDFF">/[</span><span style="color: #C3E88D">a-z</span><span style="color: #89DDFF">]+/</span><span style="color: #F78C6C">g</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">visited</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> []</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">maxNum</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">maxWord</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;&#39;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">article</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">`</span><span style="color: #C3E88D"> </span><span style="color: #89DDFF">${</span><span style="color: #A6ACCD">wordList</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">join</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">  </span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">}</span><span style="color: #C3E88D"> </span><span style="color: #89DDFF">`</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">article</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 遍历判断单词出现次数</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">wordList</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">forEach</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">item</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">visited</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">indexOf</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">item</span><span style="color: #F07178">) </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// 加入 visited</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">visited</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">item</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">word</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">RegExp</span><span style="color: #F07178">(</span><span style="color: #89DDFF">`</span><span style="color: #C3E88D"> </span><span style="color: #89DDFF">${</span><span style="color: #A6ACCD">item</span><span style="color: #89DDFF">}</span><span style="color: #C3E88D"> </span><span style="color: #89DDFF">`</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">g</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">num</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">article</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">match</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">word</span><span style="color: #F07178">)</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">num</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&gt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">maxNum</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #A6ACCD">maxNum</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">num</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #A6ACCD">maxWord</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">item</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">`${</span><span style="color: #A6ACCD">maxWord</span><span style="color: #89DDFF">}</span><span style="color: #C3E88D">  </span><span style="color: #89DDFF">${</span><span style="color: #A6ACCD">maxNum</span><span style="color: #89DDFF">}`</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Vue 中的双向数据绑定]]></title>
            <link>https://desain7.top/interview/vue/Vue 中的双向数据绑定.html</link>
            <guid>https://desain7.top/interview/vue/Vue 中的双向数据绑定.html</guid>
            <pubDate>Tue, 12 Sep 2023 16:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="vue-中的双向数据绑定" tabindex="-1">Vue 中的双向数据绑定 <a class="header-anchor" href="#vue-中的双向数据绑定" aria-label="Permalink to &quot;Vue 中的双向数据绑定&quot;">&ZeroWidthSpace;</a></h1>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[二叉搜索树的多种操作]]></title>
            <link>https://desain7.top/interview/算法/二叉搜索树的多种操作.html</link>
            <guid>https://desain7.top/interview/算法/二叉搜索树的多种操作.html</guid>
            <pubDate>Tue, 12 Sep 2023 16:00:00 GMT</pubDate>
            <description><![CDATA[ 二叉搜索树中的插入操作
题目地址
题意：给你一颗*二叉搜索树*，向树中插入一个值，返回插入后的根节点
思路：根据二叉搜索树的性质，在遍历树的过程中，不断比较当前节点的值与要插入的值的大小关系，找到要]]></description>
            <content:encoded><![CDATA[<h1 id="二叉搜索树的多种操作" tabindex="-1">二叉搜索树的多种操作 <a class="header-anchor" href="#二叉搜索树的多种操作" aria-label="Permalink to &quot;二叉搜索树的多种操作&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="二叉搜索树中的插入操作" tabindex="-1">二叉搜索树中的插入操作 <a class="header-anchor" href="#二叉搜索树中的插入操作" aria-label="Permalink to &quot;二叉搜索树中的插入操作&quot;">&ZeroWidthSpace;</a></h2>
<p><a href="https://leetcode.cn/problems/insert-into-a-binary-search-tree/" target="_blank" rel="noreferrer">题目地址</a></p>
<p><strong>题意</strong>：给你一颗<em>二叉搜索树</em>，向树中插入一个值，返回插入后的根节点</p>
<p><strong>思路</strong>：根据二叉搜索树的性质，在遍历树的过程中，不断比较当前节点的值与要插入的值的大小关系，找到要插入的位置，当遇到值为 null 的节点时，插入这个节点</p>
<p><strong>代码实现</strong>：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">/**</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">TreeNode</span><span style="color: #89DDFF; font-style: italic">}</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">root</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">number</span><span style="color: #89DDFF; font-style: italic">}</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">val</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">return</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">TreeNode</span><span style="color: #89DDFF; font-style: italic">}</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> */</span></span>
<span class="line"><span style="color: #C792EA">var</span><span style="color: #A6ACCD"> insertIntoBST </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">root</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">val</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">root</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">node</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">TreeNode</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">val</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">node</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">val</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">val</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">right</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">insertIntoBST</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">right</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">val</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">val</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&gt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">val</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">left</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">insertIntoBST</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">left</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">val</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">root</span></span>
<span class="line"><span style="color: #89DDFF">};</span></span></code></pre>
</div><h2 id="删除二叉搜索树中的节点-todo" tabindex="-1">删除二叉搜索树中的节点(Todo) <a class="header-anchor" href="#删除二叉搜索树中的节点-todo" aria-label="Permalink to &quot;删除二叉搜索树中的节点(Todo)&quot;">&ZeroWidthSpace;</a></h2>
<p><a href="https://leetcode.cn/problems/delete-node-in-a-bst/description/" target="_blank" rel="noreferrer">题目地址</a></p>
<p><strong>题意</strong>：</p>
<p><strong>思路</strong>：</p>
<p><strong>代码实现</strong>：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"></span></code></pre>
</div><h2 id="修剪二叉搜索树" tabindex="-1">修剪二叉搜索树 <a class="header-anchor" href="#修剪二叉搜索树" aria-label="Permalink to &quot;修剪二叉搜索树&quot;">&ZeroWidthSpace;</a></h2>
<p><a href="https://leetcode.cn/problems/trim-a-binary-search-tree/description/" target="_blank" rel="noreferrer">题目地址</a></p>
<p><strong>题意</strong>：</p>
<p><strong>思路</strong>：</p>
<p><strong>代码实现</strong>：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"></span></code></pre>
</div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[TCP、UDP 的概念及特点]]></title>
            <link>https://desain7.top/interview/计算机网络/TCP、UDP的概念及特点.html</link>
            <guid>https://desain7.top/interview/计算机网络/TCP、UDP的概念及特点.html</guid>
            <pubDate>Tue, 12 Sep 2023 16:00:00 GMT</pubDate>
            <description><![CDATA[TCP、UDP 都是传输层协议，他们同属于 TCP/IP 协议族。在网络中它们用于处理数据包。
在 OSI 模型中，他们属于传输层（IP 协议的上一层）
 UDP（用户数据报协议）
UDP 是一种无连]]></description>
            <content:encoded><![CDATA[<h1 id="tcp、udp-的概念及特点" tabindex="-1">TCP、UDP 的概念及特点 <a class="header-anchor" href="#tcp、udp-的概念及特点" aria-label="Permalink to &quot;TCP、UDP 的概念及特点&quot;">&ZeroWidthSpace;</a></h1>
<p>TCP、UDP 都是传输层协议，他们同属于 TCP/IP 协议族。在网络中它们用于处理数据包。</p>
<p>在 OSI 模型中，他们属于传输层（IP 协议的上一层）</p>
<h2 id="udp-用户数据报协议" tabindex="-1">UDP（用户数据报协议） <a class="header-anchor" href="#udp-用户数据报协议" aria-label="Permalink to &quot;UDP（用户数据报协议）&quot;">&ZeroWidthSpace;</a></h2>
<p>UDP 是一种无连接的协议。</p>
<p>UDP有不提供数据包分组、组装和不能对数据包进行排序的缺点，也就是说，当报文发送之后，是无法得知其是否安全完整到达的。</p>
<p><strong>UDP 的特点包括</strong>：</p>
<ol>
<li>面向无连接</li>
</ol>
<p>UDP 不需要像 TCP 那样在发送数据前三次握手建立连接，随时可以发送数据。它只负责传输数据报文，并不会对数据报文进行任何拆分和拼接操作。</p>
<ul>
<li>在发送端，应用层将数据传递给传输层的 UDP 协议，UDP 只会给数据增加一个 UDP 头，用来标识 UDP 协议，然后就传递给网络层了</li>
<li>在接收端，网络层将数据传递给传输层，UDP 只去除 IP 报文头就传递给应用层，不会任何拼接操作</li>
</ul>
<ol start="2">
<li>支持单播、多播、广播</li>
</ol>
<p>UDP 不止支持一对一的传输方式，同样支持一对多，多对多，多对一的方式，也就是说 UDP 提供了单播，多播，广播的功能。</p>
<ol start="3">
<li>面向报文</li>
</ol>
<p>发送方的UDP对应用程序交下来的报文，在添加首部后就向下交付IP层。UDP对应用层交下来的报文，既不合并，也不拆分，而是保留这些报文的边界。因此，应用程序必须选择合适大小的报文。</p>
<ol start="4">
<li>不可靠性</li>
</ol>
<ul>
<li>
<p>UDP 的不可靠性首先体现在无连接上，它的通信不需要建立连接，随用随发。</p>
</li>
<li>
<p>它只会对收到的数据进行传递，不会对它进行备份，也不会关注接收方是否成功接收到了数据。</p>
</li>
<li>
<p>由于 UDP 没有拥塞控制，一直会以恒定的速度发送数据。即使网络条件不好，也不会对发送速率进行调整。所以可能导致网络不好的情况下会出现丢包。</p>
</li>
<li>
<p>也正是由于这种性质，使得 UDP 的实时效率远远高于 TCP，在一些实时性要求较高的场景下（直播、视频电话、在线游戏）就会去使用 UDP 进行通信。</p>
</li>
</ul>
<ol start="5">
<li>头部开销小，能高效地传输数据报文</li>
</ol>
<p>UDP 头部只包含了以下几个数据：</p>
<ul>
<li>两个十六位的端口号，分别为源端口（可选字段）和目标端口</li>
<li>整个数据报文的长度</li>
<li>整个数据报文的检验和（IPv4 可选字段），该字段用于发现头部信息和数据中的错误</li>
</ul>
<p>因此 UDP 的头部开销小，只有8字节，相比 TCP 的至少20字节要少得多，在传输数据报文时是很高效的。</p>
<p><strong>UDP 不可靠的原因</strong>：</p>
<p>UDP 在传输数据之前不需要先建立连接，接收端的传输层在接收到 UDP 报文后，不需要确认，提供不可靠交付。</p>
<ul>
<li>不保证消息交付：不确认，不重传，无超时</li>
<li>不保证交付顺序：不设置包序号，不重排，不会发生队首阻塞</li>
<li>不跟踪连接状态：不必建立连接或重启状态机</li>
<li>不进行拥塞控制：不内置客户端或网络反馈机制</li>
</ul>
<h2 id="tcp-传输控制协议" tabindex="-1">TCP（传输控制协议） <a class="header-anchor" href="#tcp-传输控制协议" aria-label="Permalink to &quot;TCP（传输控制协议）&quot;">&ZeroWidthSpace;</a></h2>
<p>TCP 是一种面向连接的、可靠的、基于字节流的传输层通信协议。</p>
<p><strong>TCP 的特点包括</strong>：</p>
<ol>
<li>面向连接</li>
</ol>
<p>TCP 在发送数据之前必须在两端建立连接。通过“三次握手”能够建立可靠的链接，为数据的可靠传输打下基础。</p>
<ol start="2">
<li>单播传输</li>
</ol>
<p>TCP 仅支持单薄传输，每一次传输连接只能有两个端点，不支持多播和广播。</p>
<ol start="3">
<li>面向字节流</li>
</ol>
<p>不同于 UDP 那样面向报文的传输，TCP 可以在不保留边界的条件下以字节流的方式进行传输。</p>
<ol start="4">
<li>可靠传输</li>
</ol>
<p>TCP 判断丢包、误码靠的是 TCP 的段编号以及确认号。</p>
<p>TCP 为了保证报文传输的可靠性，会给每个包一个序号，这个序号也保证了接收端能够按序接收包。</p>
<p>接收端实体会对每一个成功收到的包发送一个相应的确认。</p>
<p>如果发送端实体在合理的往返时延(RTT)内未收到确认，那么对应的数据（会被认定为丢失了）将会被重传。</p>
<ol start="5">
<li>拥塞控制</li>
</ol>
<p>网络出现拥塞时，TCP 能减小向网络注入数据的速率和数量，缓解拥塞。</p>
<ol start="6">
<li>支持全双工通信</li>
</ol>
<p>TCP 允许通信双方在任何时刻发送数据，因为TCP连接的两端都设有缓存，用来临时存放<em>双向通信</em>的数据。</p>
<p>TCP 可以立即发送一个数据端，也可以缓存一段时间后，一次发送更多数据段。</p>
<p><strong>TCP 的重传机制</strong>：</p>
<p>由于 TCP 的下层网络（网络层），可能出现<em>丢失、重复或失序的情况</em>，TCP 协议提供可靠数据传输服务，为了保证数据传输的正确性，TCP 会重传已被认为丢失的包。</p>
<p>TCP使用两套独立的机制来完成重传，一是基于时间，二是基于确认信息。</p>
<p>TCP在发送一个数据之后，就开启一个定时器，若是在这个时间内没有收到发送数据的 ACK 确认报文，则对该报文进行重传，在达到一定次数还没有成功时放弃并发送一个复位信号。</p>
<h2 id="tcp-和-udp-的应用场景" tabindex="-1">TCP 和 UDP 的应用场景 <a class="header-anchor" href="#tcp-和-udp-的应用场景" aria-label="Permalink to &quot;TCP 和 UDP 的应用场景&quot;">&ZeroWidthSpace;</a></h2>
<p><strong>TCP</strong>: 适用于效率要求较低，准确性要求相对高的场景。由于传输中需要对数据进行确认、重发、排序等操作，效率低于 UDP。</p>
<p>例如： 文件传输、邮件传输、远程登陆、Web 应用程序</p>
<p><strong>UDP</strong>：适用于效率要求高，准确性要求低的场景。</p>
<p>例如：QQ聊天、在线直播、广播通信</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[2023-9-12 算法日记]]></title>
            <link>https://desain7.top/coding/algorithm/2023-9-13.html</link>
            <guid>https://desain7.top/coding/algorithm/2023-9-13.html</guid>
            <pubDate>Mon, 11 Sep 2023 16:00:00 GMT</pubDate>
            <description><![CDATA[ 二叉搜索树中的插入操作
题目地址
题意：给你一颗*二叉搜索树*，向树中插入一个值，返回插入后的根节点
思路：根据二叉搜索树的性质，在遍历树的过程中，不断比较当前节点的值与要插入的值的大小关系，找到要]]></description>
            <content:encoded><![CDATA[<h1 id="_2023-9-13-算法日记" tabindex="-1">2023-9-13 算法日记 <a class="header-anchor" href="#_2023-9-13-算法日记" aria-label="Permalink to &quot;2023-9-13 算法日记&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="二叉搜索树中的插入操作" tabindex="-1">二叉搜索树中的插入操作 <a class="header-anchor" href="#二叉搜索树中的插入操作" aria-label="Permalink to &quot;二叉搜索树中的插入操作&quot;">&ZeroWidthSpace;</a></h2>
<p><a href="https://leetcode.cn/problems/insert-into-a-binary-search-tree/" target="_blank" rel="noreferrer">题目地址</a></p>
<p><strong>题意</strong>：给你一颗<em>二叉搜索树</em>，向树中插入一个值，返回插入后的根节点</p>
<p><strong>思路</strong>：根据二叉搜索树的性质，在遍历树的过程中，不断比较当前节点的值与要插入的值的大小关系，找到要插入的位置，当遇到值为 null 的节点时，插入这个节点</p>
<p><strong>代码实现</strong>：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">/**</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">TreeNode</span><span style="color: #89DDFF; font-style: italic">}</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">root</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">number</span><span style="color: #89DDFF; font-style: italic">}</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">val</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">return</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">TreeNode</span><span style="color: #89DDFF; font-style: italic">}</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> */</span></span>
<span class="line"><span style="color: #C792EA">var</span><span style="color: #A6ACCD"> insertIntoBST </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">root</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">val</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">root</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">node</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">TreeNode</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">val</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">node</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">val</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">val</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">right</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">insertIntoBST</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">right</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">val</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">val</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&gt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">val</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">left</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">insertIntoBST</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">left</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">val</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">root</span></span>
<span class="line"><span style="color: #89DDFF">};</span></span></code></pre>
</div><h2 id="将有序数组转换为二叉搜索树" tabindex="-1">将有序数组转换为二叉搜索树 <a class="header-anchor" href="#将有序数组转换为二叉搜索树" aria-label="Permalink to &quot;将有序数组转换为二叉搜索树&quot;">&ZeroWidthSpace;</a></h2>
<p>本题经常出现在面试中。</p>
<p><a href="https://leetcode.cn/problems/convert-sorted-array-to-binary-search-tree/description/" target="_blank" rel="noreferrer">题目地址</a></p>
<p><strong>题意</strong>：给你一个有序数组，根据这个数组，构造出一颗平衡二叉搜索树</p>
<p><strong>思路</strong>：递归整个数组，每次将传进来的数组的中间值构造节点，并以中间值为界，划分传递给当前节点左右子树的数组</p>
<p><strong>代码实现</strong>：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">/**</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">number[]</span><span style="color: #89DDFF; font-style: italic">}</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">nums</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">return</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">TreeNode</span><span style="color: #89DDFF; font-style: italic">}</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> */</span></span>
<span class="line"><span style="color: #C792EA">var</span><span style="color: #A6ACCD"> sortedArrayToBST </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">nums</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">dfs</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">arr</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">left</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">right</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">left</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&gt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">right</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">null</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">mid</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">Math</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">floor</span><span style="color: #F07178">((</span><span style="color: #A6ACCD">left</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">right</span><span style="color: #F07178">) </span><span style="color: #89DDFF">/</span><span style="color: #F07178"> </span><span style="color: #F78C6C">2</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">node</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">TreeNode</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">mid</span><span style="color: #F07178">])</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">node</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">left</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">dfs</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">arr</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">left</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">mid</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">node</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">right</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">dfs</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">arr</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">mid</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">right</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">node</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #82AAFF">dfs</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">nums</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">nums</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">};</span></span></code></pre>
</div><h2 id="把二叉搜索树转换为累加树" tabindex="-1">把二叉搜索树转换为累加树 <a class="header-anchor" href="#把二叉搜索树转换为累加树" aria-label="Permalink to &quot;把二叉搜索树转换为累加树&quot;">&ZeroWidthSpace;</a></h2>
<p><a href="https://leetcode.cn/problems/convert-bst-to-greater-tree/description/" target="_blank" rel="noreferrer">题目地址</a></p>
<p><strong>题意</strong>：提供一颗二叉搜索树，将这棵二叉搜索树转化成一棵累加树</p>
<p>累加树的性质：每个节点 node 的新值等于原树中大于或等于 node.val 的值之和。</p>
<p><strong>思路</strong>：根据累加树的性质，可以以右左中的顺序遍历整棵二叉树，记录上一个节点的值，并将遍历到的每一个节点的值加上上一个节点的值</p>
<p><strong>代码实现</strong>：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">/**</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">TreeNode</span><span style="color: #89DDFF; font-style: italic">}</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">root</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">return</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">TreeNode</span><span style="color: #89DDFF; font-style: italic">}</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> */</span></span>
<span class="line"><span style="color: #C792EA">var</span><span style="color: #A6ACCD"> convertBST </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">root</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">pre</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">trans</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">node</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">node</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">null</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">trans</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">node</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">right</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">node</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">val</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">pre</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">pre</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">node</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">val</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">trans</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">node</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">left</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #82AAFF">trans</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">root</span></span>
<span class="line"><span style="color: #89DDFF">};</span></span></code></pre>
</div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[2023-9-11 算法日记]]></title>
            <link>https://desain7.top/coding/algorithm/2023-9-11.html</link>
            <guid>https://desain7.top/coding/algorithm/2023-9-11.html</guid>
            <pubDate>Sun, 10 Sep 2023 16:00:00 GMT</pubDate>
            <description><![CDATA[ 1. 二叉搜索树中的众数
题目地址
题意：给你一颗二叉搜索树，找出其中所有的众数
思路：
- 方法一
遍历这棵二叉树，并在过程中维护一个 map 记录下二叉树中所有值的出现次数。遍历结束后，将 ma]]></description>
            <content:encoded><![CDATA[<h1 id="_2023-9-11-算法日记" tabindex="-1">2023-9-11 算法日记 <a class="header-anchor" href="#_2023-9-11-算法日记" aria-label="Permalink to &quot;2023-9-11 算法日记&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="_1-二叉搜索树中的众数" tabindex="-1">1. 二叉搜索树中的众数 <a class="header-anchor" href="#_1-二叉搜索树中的众数" aria-label="Permalink to &quot;1. 二叉搜索树中的众数&quot;">&ZeroWidthSpace;</a></h2>
<p><a href="https://leetcode.cn/problems/find-mode-in-binary-search-tree/" target="_blank" rel="noreferrer">题目地址</a></p>
<p><strong>题意</strong>：给你一颗二叉搜索树，找出其中所有的众数</p>
<p><strong>思路</strong>：</p>
<ul>
<li>方法一
遍历这棵二叉树，并在过程中维护一个 map 记录下二叉树中所有值的出现次数。遍历结束后，将 map 中出现次数最大的数加入结果中。</li>
<li>方法二
根据二叉搜索树的性质，中序遍历这棵树可以得到一个有序数组，将前后数值作比较，维护一个 count，当 count 等于 max 时，加入结果中；若大于 max，则清空之前的结果。</li>
</ul>
<p><strong>代码实现</strong>：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">/**</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">TreeNode</span><span style="color: #89DDFF; font-style: italic">}</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">root</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">return</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">number[]</span><span style="color: #89DDFF; font-style: italic">}</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> */</span></span>
<span class="line"><span style="color: #C792EA">var</span><span style="color: #A6ACCD"> findMode </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">root</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">numMap</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">res</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> []</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">dfs</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">node</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">node</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">return</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">numMap</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">node</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">val</span><span style="color: #F07178">]) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">numMap</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">node</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">val</span><span style="color: #F07178">] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">numMap</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">node</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">val</span><span style="color: #F07178">]</span><span style="color: #89DDFF">++</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">dfs</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">node</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">left</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">dfs</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">node</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">right</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">dfs</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178"> </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">maxCount</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">numMap</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">val</span><span style="color: #F07178">]</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 定义一个存放结果的数组res</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178">(</span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">in</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">numMap</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">// 如果当前值等于最大出现次数就直接在res增加该值</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">numMap</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">] </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">maxCount</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #A6ACCD">res</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">// 如果value的值大于原本的maxCount就清空res的所有值，因为找到了更大的</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">numMap</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">]</span><span style="color: #89DDFF">&gt;</span><span style="color: #A6ACCD">maxCount</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #A6ACCD">res</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> []</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #A6ACCD">maxCount</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">numMap</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">]</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #A6ACCD">res</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">res</span></span>
<span class="line"><span style="color: #89DDFF">};</span></span></code></pre>
</div><h2 id="_2-二叉树的最近公共祖先" tabindex="-1">2. 二叉树的最近公共祖先 <a class="header-anchor" href="#_2-二叉树的最近公共祖先" aria-label="Permalink to &quot;2. 二叉树的最近公共祖先&quot;">&ZeroWidthSpace;</a></h2>
<p><a href="https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree/description/" target="_blank" rel="noreferrer">题目地址</a></p>
<p><strong>题意</strong>：给出一棵二叉树和上面的两个节点，找到这两个节点最近的公共祖先</p>
<p><strong>思路</strong>：后序遍历整个二叉树，寻找两个节点，如果某个节点左右均存在pq中的一个节点（所有节点均不重复），那么第一个这样的节点就是最近公共祖先</p>
<p><strong>代码实现</strong>：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">/**</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">TreeNode</span><span style="color: #89DDFF; font-style: italic">}</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">root</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">TreeNode</span><span style="color: #89DDFF; font-style: italic">}</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">p</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">TreeNode</span><span style="color: #89DDFF; font-style: italic">}</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">q</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">return</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">TreeNode</span><span style="color: #89DDFF; font-style: italic">}</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> */</span></span>
<span class="line"><span style="color: #C792EA">var</span><span style="color: #A6ACCD"> lowestCommonAncestor </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">root</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">p</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">q</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">root</span><span style="color: #F07178"> </span><span style="color: #89DDFF">||</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">root</span><span style="color: #F07178"> </span><span style="color: #89DDFF">==</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">p</span><span style="color: #F07178"> </span><span style="color: #89DDFF">||</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">root</span><span style="color: #F07178"> </span><span style="color: #89DDFF">==</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">q</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">root</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">left</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">lowestCommonAncestor</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">left</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">p</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">q</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">right</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">lowestCommonAncestor</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">right</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">p</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">q</span><span style="color: #F07178">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">left</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">right</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">root</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">left</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">right</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">left</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">left</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">right</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">right</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">null</span></span>
<span class="line"><span style="color: #89DDFF">};</span></span></code></pre>
</div><h2 id="_3-二叉搜索树的最近公共祖先" tabindex="-1">3. 二叉搜索树的最近公共祖先 <a class="header-anchor" href="#_3-二叉搜索树的最近公共祖先" aria-label="Permalink to &quot;3. 二叉搜索树的最近公共祖先&quot;">&ZeroWidthSpace;</a></h2>
<p><a href="https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-search-tree/description/" target="_blank" rel="noreferrer">题目地址</a></p>
<p><strong>题意</strong>：题意和上题一样，本题给出的是一棵二叉搜索树</p>
<p><strong>思路</strong>：根据二叉搜索树的性质，本题可以有特殊的解法，即遍历整棵二叉树，遇到的第一个值在 p，q 之间的节点就是最近公共祖先</p>
<p><strong>代码实现</strong>：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">/**</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">TreeNode</span><span style="color: #89DDFF; font-style: italic">}</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">root</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">TreeNode</span><span style="color: #89DDFF; font-style: italic">}</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">p</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">TreeNode</span><span style="color: #89DDFF; font-style: italic">}</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">q</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">return</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">TreeNode</span><span style="color: #89DDFF; font-style: italic">}</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> */</span></span>
<span class="line"><span style="color: #C792EA">var</span><span style="color: #A6ACCD"> lowestCommonAncestor </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">root</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">p</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">q</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">dfs</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">root</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">p</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">q</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">root</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">null</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// 向左寻找</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">val</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&gt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">p</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">val</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">val</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&gt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">q</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">val</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">left</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">dfs</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">left</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">p</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">q</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">left</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">left</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// 向右寻找</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">val</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">p</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">val</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">val</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">q</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">val</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">right</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">dfs</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">right</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">p</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">q</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">right</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">right</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">root</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #82AAFF">dfs</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">p</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">q</span><span style="color: #F07178">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">};</span></span></code></pre>
</div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[2023-9-9 算法日记]]></title>
            <link>https://desain7.top/coding/algorithm/2023-9-9.html</link>
            <guid>https://desain7.top/coding/algorithm/2023-9-9.html</guid>
            <pubDate>Fri, 08 Sep 2023 16:00:00 GMT</pubDate>
            <description><![CDATA[ 1. 二叉搜索树中的搜索
题目地址
题意：给定一棵二叉搜索树和一个数，在二叉搜索树中找到并返回以该节点为根的子树。
思路：利用二叉搜索树的特性，递归遍历，找到节点。
代码实现：
```js
 * @]]></description>
            <content:encoded><![CDATA[<h1 id="_2023-9-9-算法日记" tabindex="-1">2023-9-9 算法日记 <a class="header-anchor" href="#_2023-9-9-算法日记" aria-label="Permalink to &quot;2023-9-9 算法日记&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="_1-二叉搜索树中的搜索" tabindex="-1">1. 二叉搜索树中的搜索 <a class="header-anchor" href="#_1-二叉搜索树中的搜索" aria-label="Permalink to &quot;1. 二叉搜索树中的搜索&quot;">&ZeroWidthSpace;</a></h2>
<p><a href="https://leetcode.cn/problems/search-in-a-binary-search-tree/" target="_blank" rel="noreferrer">题目地址</a></p>
<p><strong>题意</strong>：给定一棵二叉搜索树和一个数，在二叉搜索树中找到并返回以该节点为根的子树。</p>
<p><strong>思路</strong>：利用二叉搜索树的特性，递归遍历，找到节点。</p>
<p><strong>代码实现</strong>：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #89DDFF">*</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">@</span><span style="color: #A6ACCD">param </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD">TreeNode</span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD"> root</span></span>
<span class="line"><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">*</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">@</span><span style="color: #A6ACCD">param </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD">number</span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD"> val</span></span>
<span class="line"><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">*</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">@</span><span style="color: #A6ACCD">return </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD">TreeNode</span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">*/</span></span>
<span class="line"><span style="color: #C792EA">var</span><span style="color: #A6ACCD"> searchBST </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">root</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">val</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">root</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">null</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 当前节点等于目标值，返回节点</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">val</span><span style="color: #F07178"> </span><span style="color: #89DDFF">==</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">val</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">root</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 大于目标值，向左搜索子树</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">val</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&gt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">val</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #82AAFF">searchBST</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">left</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">val</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 小于目标值，向右搜索子树</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">val</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">val</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #82AAFF">searchBST</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">right</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">val</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">};</span></span></code></pre>
</div><h2 id="_2-验证二叉搜索树" tabindex="-1">2. 验证二叉搜索树 <a class="header-anchor" href="#_2-验证二叉搜索树" aria-label="Permalink to &quot;2. 验证二叉搜索树&quot;">&ZeroWidthSpace;</a></h2>
<p><a href="https://leetcode.cn/problems/validate-binary-search-tree/" target="_blank" rel="noreferrer">题目地址</a></p>
<p><strong>题意</strong>：给出一棵二叉树，判断是否是二叉搜索树。</p>
<p><strong>思路</strong>：根据二叉搜索树的特性，中序遍历二叉搜索树，得到的数组必然为递增序列。判断中序遍历后的数组是否递增即可得到结果。</p>
<p><strong>代码实现</strong>：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">/**</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">TreeNode</span><span style="color: #89DDFF; font-style: italic">}</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">root</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">return</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">boolean</span><span style="color: #89DDFF; font-style: italic">}</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> */</span></span>
<span class="line"><span style="color: #C792EA">var</span><span style="color: #A6ACCD"> isValidBST </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">root</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">root</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">false</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> []</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 中序遍历二叉树，得到数组</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">dfs</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">root</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">root</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">return</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">dfs</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">left</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">arr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">val</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">dfs</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">right</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #82AAFF">dfs</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 验证数组是否递增</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178">(</span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">++</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #F07178">] </span><span style="color: #89DDFF">&gt;=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">]) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">false</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">true</span></span>
<span class="line"><span style="color: #89DDFF">};</span></span></code></pre>
</div><h2 id="_3-二叉搜索树的最小绝对差" tabindex="-1">3. 二叉搜索树的最小绝对差 <a class="header-anchor" href="#_3-二叉搜索树的最小绝对差" aria-label="Permalink to &quot;3. 二叉搜索树的最小绝对差&quot;">&ZeroWidthSpace;</a></h2>
<p><a href="https://leetcode.cn/problems/minimum-absolute-difference-in-bst/" target="_blank" rel="noreferrer">题目地址</a></p>
<p><strong>题意</strong>：给出一棵二叉搜索树，求出树中任意两个节点的绝对值之差的最小值。</p>
<p><strong>思路</strong>：思路和上题类似，可以中序遍历得出递增序列后，遍历数组得到；但本题也可以简化，在遍历的过程中直接计算最小值。</p>
<p><strong>代码实现</strong>：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">/**</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">TreeNode</span><span style="color: #89DDFF; font-style: italic">}</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">root</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">return</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">number</span><span style="color: #89DDFF; font-style: italic">}</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> */</span></span>
<span class="line"><span style="color: #C792EA">var</span><span style="color: #A6ACCD"> getMinimumDifference </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">root</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">min</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">Infinity</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 初始化 pre 为 root</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">pre</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">root</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">dfs</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">root</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">tem</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">root</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">return</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">dfs</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">left</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 当 pre 不等于 root，即 pre 为 root 的上一个节点时，才进行计算</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">pre</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">root</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">tem</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">Math</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">abs</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">val</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">pre</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">val</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">min</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">Math</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">min</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">tem</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">min</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">pre</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">root</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">dfs</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">right</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #82AAFF">dfs</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">min</span></span>
<span class="line"><span style="color: #89DDFF">};</span></span></code></pre>
</div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[React + Codemirror 实现在线代码编辑器]]></title>
            <link>https://desain7.top/frontend/react/codemirror+react实现在线代码编辑器.html</link>
            <guid>https://desain7.top/frontend/react/codemirror+react实现在线代码编辑器.html</guid>
            <pubDate>Fri, 08 Sep 2023 16:00:00 GMT</pubDate>
            <description><![CDATA[ 背景
最近开发的项目中需要实现一个在线代码编辑器的需求，所以需要用到 code-mirror]]></description>
            <content:encoded><![CDATA[<h1 id="codemirror-react-实现在线代码编辑器" tabindex="-1">codemirror + react 实现在线代码编辑器 <a class="header-anchor" href="#codemirror-react-实现在线代码编辑器" aria-label="Permalink to &quot;codemirror + react 实现在线代码编辑器&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="背景" tabindex="-1">背景 <a class="header-anchor" href="#背景" aria-label="Permalink to &quot;背景&quot;">&ZeroWidthSpace;</a></h2>
<p>最近开发的项目中需要实现一个在线代码编辑器的需求，所以需要用到 code-mirror</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[2023-9-6 算法日记]]></title>
            <link>https://desain7.top/coding/algorithm/2023-9-6.html</link>
            <guid>https://desain7.top/coding/algorithm/2023-9-6.html</guid>
            <pubDate>Tue, 05 Sep 2023 16:00:00 GMT</pubDate>
            <description><![CDATA[ 1. 从中序与后序遍历序列构造二叉树
题目地址
题意：根据给出的中序遍历及后续遍历数组，构造出一颗二叉树
思路：
1. 利用递归实现
2. 根据后序遍历的最后一个数（当前根节点），来切割中序遍历数组]]></description>
            <content:encoded><![CDATA[<h1 id="_2023-9-6-算法日记" tabindex="-1">2023-9-6 算法日记 <a class="header-anchor" href="#_2023-9-6-算法日记" aria-label="Permalink to &quot;2023-9-6 算法日记&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="_1-从中序与后序遍历序列构造二叉树" tabindex="-1">1. 从中序与后序遍历序列构造二叉树 <a class="header-anchor" href="#_1-从中序与后序遍历序列构造二叉树" aria-label="Permalink to &quot;1. 从中序与后序遍历序列构造二叉树&quot;">&ZeroWidthSpace;</a></h2>
<p><a href="https://leetcode.cn/problems/construct-binary-tree-from-inorder-and-postorder-traversal/" target="_blank" rel="noreferrer">题目地址</a></p>
<p><strong>题意</strong>：根据给出的中序遍历及后续遍历数组，构造出一颗二叉树</p>
<p><strong>思路</strong>：</p>
<ol>
<li>利用递归实现</li>
<li>根据后序遍历的最后一个数（当前根节点），来切割中序遍历数组</li>
<li>根据切割后的左右中序遍历数组长度来划分左右<code>后序遍历数组</code></li>
<li>分别根据新生成的左右<code>中后序遍历数组</code>去构造当前节点的左右子树</li>
</ol>
<p><strong>代码实现</strong>：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">/**</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">number[]</span><span style="color: #89DDFF; font-style: italic">}</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">inorder</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">number[]</span><span style="color: #89DDFF; font-style: italic">}</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">postorder</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">return</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">TreeNode</span><span style="color: #89DDFF; font-style: italic">}</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> */</span></span>
<span class="line"><span style="color: #C792EA">var</span><span style="color: #A6ACCD"> buildTree </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">inorder</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">postorder</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">inorder</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #F07178"> </span><span style="color: #89DDFF">||</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">postorder</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">null</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">res</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">dfs</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">inorder</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">postorder</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">res</span></span>
<span class="line"><span style="color: #89DDFF">};</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">let</span><span style="color: #A6ACCD"> dfs </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">inorder</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">postorder</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">postorder</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">null</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 后序遍历数组最后一个元素，就是当前的中间节点</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">midVal</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">postorder</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">pop</span><span style="color: #F07178">()</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">root</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">TreeNode</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">midVal</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 叶子节点</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">postorder</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">root</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 找到中序遍历的切割点</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">div</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178">(</span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">inorder</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">++</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">inorder</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">] </span><span style="color: #89DDFF">==</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">midVal</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">div</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 切割中序数组</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">leftIn</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">inorder</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">slice</span><span style="color: #F07178">(</span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">div</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">rightIn</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">inorder</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">slice</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">div</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">inorder</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #F07178">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 切割后序数组</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">leftPost</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">postorder</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">slice</span><span style="color: #F07178">(</span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">leftIn</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">rightPost</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">postorder</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">slice</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">leftIn</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">postorder</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 连接左右子树</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">left</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">dfs</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">leftIn</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">leftPost</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">right</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">dfs</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">rightIn</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">rightPost</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">root</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="_2-最大二叉树" tabindex="-1">2. 最大二叉树 <a class="header-anchor" href="#_2-最大二叉树" aria-label="Permalink to &quot;2. 最大二叉树&quot;">&ZeroWidthSpace;</a></h2>
<p><a href="https://leetcode.cn/problems/maximum-binary-tree/" target="_blank" rel="noreferrer">题目地址</a></p>
<p><strong>题意</strong>：
提供一个整数数组，构造一棵最大二叉树：</p>
<ol>
<li>创建一个根节点，其值为 nums 中的最大值。</li>
<li>递归地在最大值 左边 的 子数组前缀上 构建左子树。</li>
<li>递归地在最大值 右边 的 子数组后缀上 构建右子树。</li>
</ol>
<p><strong>思路</strong>：找出数组中的最大值，根据下标划分左右子树，递归构建</p>
<p><strong>实现代码</strong>：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">/**</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">number[]</span><span style="color: #89DDFF; font-style: italic">}</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">nums</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">return</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">TreeNode</span><span style="color: #89DDFF; font-style: italic">}</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> */</span></span>
<span class="line"><span style="color: #C792EA">var</span><span style="color: #A6ACCD"> constructMaximumBinaryTree </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">nums</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">nums</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">null</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #82AAFF">dfs</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">nums</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">};</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">let</span><span style="color: #A6ACCD"> dfs </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">nodes</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">nodes</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">null</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">maxNum</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">Math</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">max</span><span style="color: #F07178">(</span><span style="color: #89DDFF">...</span><span style="color: #A6ACCD">nodes</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">maxIdx</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">nodes</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">indexOf</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">maxNum</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">root</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">TreeNode</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">maxNum</span><span style="color: #F07178">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">left</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">dfs</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">nodes</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">slice</span><span style="color: #F07178">(</span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">maxIdx</span><span style="color: #F07178">))</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">right</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">dfs</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">nodes</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">slice</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">maxIdx</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #F07178">))</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">root</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="_3-合并二叉树" tabindex="-1">3. 合并二叉树 <a class="header-anchor" href="#_3-合并二叉树" aria-label="Permalink to &quot;3. 合并二叉树&quot;">&ZeroWidthSpace;</a></h2>
<p><a href="https://leetcode.cn/problems/merge-two-binary-trees/" target="_blank" rel="noreferrer">题目地址</a></p>
<p><strong>题意</strong>：给出两颗二叉树，将两棵二叉树合并成一棵（若重复则相加）</p>
<p><strong>思路</strong>：同时递归遍历两棵二叉树（前中后序都可以）</p>
<p><strong>实现代码</strong>：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">/**</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">TreeNode</span><span style="color: #89DDFF; font-style: italic">}</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">root1</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">TreeNode</span><span style="color: #89DDFF; font-style: italic">}</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">root2</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">return</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">TreeNode</span><span style="color: #89DDFF; font-style: italic">}</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> */</span></span>
<span class="line"><span style="color: #C792EA">var</span><span style="color: #A6ACCD"> mergeTrees </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">root1</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">root2</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">root1</span><span style="color: #F07178">) </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">root2</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">root2</span><span style="color: #F07178">) </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">root1</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">root1</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">val</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">root2</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">val</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">root1</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">left</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">mergeTrees</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root1</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">left</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">root2</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">left</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">root1</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">right</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">mergeTrees</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root1</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">right</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">root2</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">right</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">root1</span></span>
<span class="line"><span style="color: #89DDFF">};</span></span></code></pre>
</div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[常用数据处理函数]]></title>
            <link>https://desain7.top/coding/js/常用数据处理函数.html</link>
            <guid>https://desain7.top/coding/js/常用数据处理函数.html</guid>
            <pubDate>Tue, 05 Sep 2023 16:00:00 GMT</pubDate>
            <description><![CDATA[ 日期格式化函数
将传入的标准化日期对象转换为指定的格式
实现代码：
```js
const dateFormat = (dateInput, format) =
  // 获取日期
  let da]]></description>
            <content:encoded><![CDATA[<h1 id="常用数据处理函数" tabindex="-1">常用数据处理函数 <a class="header-anchor" href="#常用数据处理函数" aria-label="Permalink to &quot;常用数据处理函数&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="日期格式化函数" tabindex="-1">日期格式化函数 <a class="header-anchor" href="#日期格式化函数" aria-label="Permalink to &quot;日期格式化函数&quot;">&ZeroWidthSpace;</a></h2>
<p>将传入的标准化日期对象转换为指定的格式</p>
<p><strong>实现代码</strong>：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> dateFormat </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">dateInput</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">format</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 获取日期</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">day</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">dateInput</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getDate</span><span style="color: #F07178">()</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 获取月份</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">month</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">dateInput</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getMonth</span><span style="color: #F07178">() </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 获取年份</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">year</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">dateInput</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">getFullYear</span><span style="color: #F07178">()</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 将传入的格式化日期中对应格式的字符串进行替换</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">format</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">format</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">replace</span><span style="color: #F07178">(</span><span style="color: #89DDFF">/</span><span style="color: #C3E88D">yyyy</span><span style="color: #89DDFF">/</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">year</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">format</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">format</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">replace</span><span style="color: #F07178">(</span><span style="color: #89DDFF">/</span><span style="color: #C3E88D">mm</span><span style="color: #89DDFF">/</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">month</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">format</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">format</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">replace</span><span style="color: #F07178">(</span><span style="color: #89DDFF">/</span><span style="color: #C3E88D">dd</span><span style="color: #89DDFF">/</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">day</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="不使用临时变量-交换-a、b-的值" tabindex="-1">不使用临时变量，交换 a、b 的值 <a class="header-anchor" href="#不使用临时变量-交换-a、b-的值" aria-label="Permalink to &quot;不使用临时变量，交换 a、b 的值&quot;">&ZeroWidthSpace;</a></h2>
<div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #A6ACCD">a = a + b</span></span>
<span class="line"><span style="color: #A6ACCD">b = a - b</span></span>
<span class="line"><span style="color: #A6ACCD">a = a - b</span></span></code></pre>
</div><h2 id="实现数组的乱序输出" tabindex="-1">实现数组的乱序输出 <a class="header-anchor" href="#实现数组的乱序输出" aria-label="Permalink to &quot;实现数组的乱序输出&quot;">&ZeroWidthSpace;</a></h2>
<p>主要思路就是每轮循环随机产生一个索引值，然后按照顺序将数组中的元素与该索引值对应的元素交换。</p>
<div class="tip custom-block"><p class="custom-block-title">TIP</p>
<p>需要注意的是，每个元素产生的索引值要在该元素之后的位置。</p>
</div>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> arr </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> [</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">2</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">3</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">4</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">5</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">6</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">7</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">8</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">9</span><span style="color: #A6ACCD">]</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #A6ACCD"> (</span><span style="color: #C792EA">let</span><span style="color: #A6ACCD"> i </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span><span style="color: #A6ACCD"> i </span><span style="color: #89DDFF">&lt;</span><span style="color: #A6ACCD"> arr</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #89DDFF">;</span><span style="color: #A6ACCD"> i</span><span style="color: #89DDFF">++</span><span style="color: #A6ACCD">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">randomIdx</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">Math</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">round</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">Math</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">random</span><span style="color: #F07178">() </span><span style="color: #89DDFF">*</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">arr</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178">)) </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">;</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">]</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">randomIdx</span><span style="color: #F07178">]] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> [</span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">randomIdx</span><span style="color: #F07178">]</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">]]</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="实现数组元素求和" tabindex="-1">实现数组元素求和 <a class="header-anchor" href="#实现数组元素求和" aria-label="Permalink to &quot;实现数组元素求和&quot;">&ZeroWidthSpace;</a></h2>
<ol>
<li>循环实现</li>
</ol>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">sum</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">arr</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">res</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178"> (</span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">++</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">Array</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">isArray</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">])) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">res</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">sum</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">])</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">res</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">res</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><ol start="2">
<li>reduce 实现</li>
</ol>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">sum2</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">arr</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">reduce</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">pre</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">cur</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">Array</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">isArray</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">cur</span><span style="color: #F07178">)) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">pre</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #82AAFF">sum2</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">cur</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">pre</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">cur</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">},</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="数组扁平化" tabindex="-1">数组扁平化 <a class="header-anchor" href="#数组扁平化" aria-label="Permalink to &quot;数组扁平化&quot;">&ZeroWidthSpace;</a></h2>
<ol>
<li>递归实现</li>
</ol>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> flat1 </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">arr</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">res</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> []</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178"> (</span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">++</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">Array</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">isArray</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">])) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">res</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">res</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">concat</span><span style="color: #F07178">(</span><span style="color: #82AAFF">flat1</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">]))</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">res</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">])</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">res</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><ol start="2">
<li>reduce 迭代</li>
</ol>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> flat2 </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">arr</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">reduce</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">pre</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">cur</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">pre</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">concat</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">Array</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">isArray</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">cur</span><span style="color: #F07178">) </span><span style="color: #89DDFF">?</span><span style="color: #F07178"> </span><span style="color: #82AAFF">flat2</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">cur</span><span style="color: #F07178">) </span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">cur</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">},</span><span style="color: #F07178"> [])</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><ol start="3">
<li>扩展运算符</li>
</ol>
<p>扩展运算符会将数组摊开，子数组会被暴露给 concat 方法。</p>
<p>concat 方法调用后，会将子数组中的元素添加到新数组中，多次执行后，便得到了扁平化的数组。</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> flat3 </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">arr</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">while</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">arr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">some</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">item</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">Array</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">isArray</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">item</span><span style="color: #F07178">))) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">arr</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> []</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">concat</span><span style="color: #F07178">(</span><span style="color: #89DDFF">...</span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><ol start="4">
<li>flat</li>
</ol>
<p>调用 ES6 中的 flat 方法来实现数组扁平化。</p>
<p>flat 方法的语法：<code>arr.flat([depth])</code></p>
<p>depth 是可以传递数组的展开深度（不填默认为 1），即展开一层数组。参数为 Infinity 时，可以对任意层数的数组进行扁平化。</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> flat4 </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">arr</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">flat</span><span style="color: #F07178">(</span><span style="color: #89DDFF">Infinity</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><ol start="5">
<li>toString + Split</li>
</ol>
<p>数组原型上自带方法 toString() ，可以将数组转化成由逗号分隔的字符串。再调用 split 方法以逗号为分割，将字符串转化为数组。</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> flat5 </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">arr</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">toString</span><span style="color: #F07178">()</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">split</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">,</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">map</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">Number</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="实现数组去重" tabindex="-1">实现数组去重 <a class="header-anchor" href="#实现数组去重" aria-label="Permalink to &quot;实现数组去重&quot;">&ZeroWidthSpace;</a></h2>
<ol>
<li>使用 Set 集合</li>
</ol>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> dedup1 </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">arr</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> [</span><span style="color: #89DDFF">...new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">Set</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">)]</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><ol start="2">
<li>使用 Map</li>
</ol>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> dedup2 </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">arr</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">map</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">Map</span><span style="color: #F07178">()</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">res</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> []</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178"> (</span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">of</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">map</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">has</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">)) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">res</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">map</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">set</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">res</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="实现数组的-flat-方法" tabindex="-1">实现数组的 flat 方法 <a class="header-anchor" href="#实现数组的-flat-方法" aria-label="Permalink to &quot;实现数组的 flat 方法&quot;">&ZeroWidthSpace;</a></h2>
<p>在手写扁平化的基础上加一个 depth 参数，只会对数组进行 depth 层扁平化，这里用 reduce 实现。</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> myFlat </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">arr</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">depth</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">depth</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">reduce</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">pre</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">cur</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">Array</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">isArray</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">cur</span><span style="color: #F07178">)) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">pre</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">concat</span><span style="color: #F07178">(</span><span style="color: #82AAFF">myFlat</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">cur</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">depth</span><span style="color: #F07178"> </span><span style="color: #89DDFF">-</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #F07178">))</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">pre</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">concat</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">cur</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">},</span><span style="color: #F07178"> [])</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="实现数组的-push-方法" tabindex="-1">实现数组的 push 方法 <a class="header-anchor" href="#实现数组的-push-方法" aria-label="Permalink to &quot;实现数组的 push 方法&quot;">&ZeroWidthSpace;</a></h2>
<p>语法：
<code>arr.push(element1, element2, ..., elementN)</code></p>
<p>参数：element1, element2, ..., elementN：要添加到数组末尾的一个或多个元素。</p>
<p>返回值：返回值是一个表示修改后的数组的新长度的整数。</p>
<ol>
<li>自定义函数实现</li>
</ol>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> myPush </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">arr</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">...</span><span style="color: #A6ACCD; font-style: italic">elements</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">length</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">arr</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newLength</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">length</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">elements</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178"> (</span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">elements</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">++</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">arr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">length</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178">] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">elements</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newLength</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><ol start="2">
<li>数组原型实现</li>
</ol>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #FFCB6B">Array</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">prototype</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(...</span><span style="color: #A6ACCD; font-style: italic">elements</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">length</span><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">this</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newLength</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">length</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">elements</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178"> (</span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">elements</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">++</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">this</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">length</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178">] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">elements</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newLength</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="实现数组的-filter-方法" tabindex="-1">实现数组的 filter 方法 <a class="header-anchor" href="#实现数组的-filter-方法" aria-label="Permalink to &quot;实现数组的 filter 方法&quot;">&ZeroWidthSpace;</a></h2>
<p>filter 方法用于创建一个新数组，其中包含通过指定函数测试的所有元素。</p>
<p>语法：<code>const newArray = array.filter(callback(element[, index[, array]])[, thisArg])</code></p>
<p>参数:</p>
<ul>
<li>callback：表示对每个元素进行测试的函数，它可以接收三个参数：</li>
</ul>
<ol>
<li>element：当前正在被测试的元素。</li>
<li>index（可选）：当前元素的索引。</li>
<li>array（可选）：调用 filter 方法的原始数组。</li>
</ol>
<ul>
<li>thisArg（可选）：可在 callback 函数中使用的 this 值。</li>
</ul>
<p>返回值:
filter 方法返回一个新数组，其中包含通过测试函数的元素。</p>
<p><strong>该方法不会改变原数组</strong></p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #FFCB6B">Array</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">prototype</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">_filter</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">fn</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">typeof</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">fn</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!==</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">function</span><span style="color: #89DDFF">&quot;</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF; font-style: italic">throw</span><span style="color: #F07178"> </span><span style="color: #82AAFF">Error</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">参数必须是一个函数</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">res</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> []</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178"> (</span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">len</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">length</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">len</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">++</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #82AAFF">fn</span><span style="color: #F07178">(</span><span style="color: #89DDFF">this</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">]) </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">res</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push</span><span style="color: #F07178">(</span><span style="color: #89DDFF">this</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">])</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">res</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="实现数组的map方法" tabindex="-1">实现数组的map方法 <a class="header-anchor" href="#实现数组的map方法" aria-label="Permalink to &quot;实现数组的map方法&quot;">&ZeroWidthSpace;</a></h2>
<p>map 方法用于创建一个新数组，其中包含对原始数组的每个元素应用指定函数后的结果。</p>
<p>语法：
<code>const newArray = array.map(callback(element[, index[, array]])[, thisArg])</code></p>
<p>参数：</p>
<ul>
<li>callback：表示对每个元素进行操作的函数，它可以接收三个参数：</li>
</ul>
<ol>
<li>element：当前正在被操作的元素。</li>
<li>index（可选）：当前元素的索引。</li>
<li>array（可选）：调用 map 方法的原始数组。</li>
</ol>
<ul>
<li>thisArg（可选）：可在 callback 函数中使用的 this 值。</li>
</ul>
<p>返回值:
map 方法返回一个新数组，其中包含对原始数组的每个元素应用指定函数后的结果。</p>
<p><strong>该方法不会改变原数组</strong></p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #FFCB6B">Array</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">prototype</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">_map</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">fn</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">   </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">typeof</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">fn</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!==</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">function</span><span style="color: #89DDFF">&quot;</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF; font-style: italic">throw</span><span style="color: #F07178"> </span><span style="color: #82AAFF">Error</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">参数必须是一个函数</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">res</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> []</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178"> (</span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">len</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">length</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">len</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">++</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #A6ACCD">res</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push</span><span style="color: #F07178">(</span><span style="color: #82AAFF">fn</span><span style="color: #F07178">(</span><span style="color: #89DDFF">this</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">]))</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">res</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="实现字符串的-repeat-方法" tabindex="-1">实现字符串的 repeat 方法 <a class="header-anchor" href="#实现字符串的-repeat-方法" aria-label="Permalink to &quot;实现字符串的 repeat 方法&quot;">&ZeroWidthSpace;</a></h2>
<p>repeat 方法用于重复字符串。</p>
<p><code>repeat(s, n)</code>，输入字符串s，以及其重复的次数，输出重复后的结果，例如输入abc，2，输出abcabc。</p>
<p>可以通过 new Array(n + 1) 来创建一个长为 n + 1 的空数组。</p>
<p>然后使用 join 方法，以 str 为分隔符，将这个数组连接起来，就可以得到 str 重复 n 次后的字符串。</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">repeat</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">str</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">n</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">Array</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">n</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1</span><span style="color: #F07178">)</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">join</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">str</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="实现字符串翻转" tabindex="-1">实现字符串翻转 <a class="header-anchor" href="#实现字符串翻转" aria-label="Permalink to &quot;实现字符串翻转&quot;">&ZeroWidthSpace;</a></h2>
<p>思路比较简单，先通过 split() 方法，以空值为分隔符，将字符串分割为字符数组。</p>
<p>然后对数组调用 reverse() 方法，得到翻转后的字符数组。</p>
<p>最后通过 join() 方法，以控制为分隔符，把这个字符数组连接起来，返回连接后的字符串。</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">reverse</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">str</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">str</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">split</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;&#39;</span><span style="color: #F07178">)</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">reverse</span><span style="color: #F07178">()</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">join</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;&#39;</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="将数字每千分位用逗号隔开" tabindex="-1">将数字每千分位用逗号隔开 <a class="header-anchor" href="#将数字每千分位用逗号隔开" aria-label="Permalink to &quot;将数字每千分位用逗号隔开&quot;">&ZeroWidthSpace;</a></h2>
<ol>
<li>无小数情况</li>
</ol>
<ul>
<li>
<p>首先使用 toString() 方法，将数字转换为字符串。</p>
</li>
<li>
<p>接着使用一个正则表达式，匹配每三个数字的位置。</p>
</li>
</ul>
<h2 id="解析-url-params-为对象" tabindex="-1">解析 URL Params 为对象 <a class="header-anchor" href="#解析-url-params-为对象" aria-label="Permalink to &quot;解析 URL Params 为对象&quot;">&ZeroWidthSpace;</a></h2>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> urlData </span><span style="color: #89DDFF">=</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">http://www.domain.com/?user=anonymous&amp;id=123&amp;id=456&amp;city=%E5%8C%97%E4%BA%AC&amp;enabled</span><span style="color: #89DDFF">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> getParams </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">url</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">queryString</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">url</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">split</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">?</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)[</span><span style="color: #F78C6C">1</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">paramsArray</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">queryString</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">split</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">&amp;</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">paramsObj</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">paramsArray</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">forEach</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">param</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #89DDFF">[</span><span style="color: #A6ACCD">key</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">value</span><span style="color: #89DDFF">]</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">param</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">split</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">=</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">paramsObj</span><span style="color: #F07178">[</span><span style="color: #82AAFF">decodeURIComponent</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">)]) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">paramsObj</span><span style="color: #F07178">[</span><span style="color: #82AAFF">decodeURIComponent</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">)] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">decodeURIComponent</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">value</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">paramsObj</span><span style="color: #F07178">[</span><span style="color: #82AAFF">decodeURIComponent</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">)] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> []</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">concat</span><span style="color: #F07178">(</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #A6ACCD">paramsObj</span><span style="color: #F07178">[</span><span style="color: #82AAFF">decodeURIComponent</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">)]</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #82AAFF">decodeURIComponent</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">value</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">      )</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">value</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">paramsObj</span><span style="color: #F07178">[</span><span style="color: #82AAFF">decodeURIComponent</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">)] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">true</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">paramsObj</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[2023-9-4 算法日记]]></title>
            <link>https://desain7.top/coding/algorithm/2023-9-4.html</link>
            <guid>https://desain7.top/coding/algorithm/2023-9-4.html</guid>
            <pubDate>Sun, 03 Sep 2023 16:00:00 GMT</pubDate>
            <description><![CDATA[ 1. 左叶子之和
题目地址
题意：求出一颗二叉树所有左叶子的和。
思路：分别递归遍历二叉树的左子树和右子树，在这个过程中，不断判断每个子树根节点的左节点是否为叶节点，并将其添加到结果中；最后将结果相]]></description>
            <content:encoded><![CDATA[<h1 id="_2023-9-4-算法日记" tabindex="-1">2023-9-4 算法日记 <a class="header-anchor" href="#_2023-9-4-算法日记" aria-label="Permalink to &quot;2023-9-4 算法日记&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="_1-左叶子之和" tabindex="-1">1. 左叶子之和 <a class="header-anchor" href="#_1-左叶子之和" aria-label="Permalink to &quot;1. 左叶子之和&quot;">&ZeroWidthSpace;</a></h2>
<p><a href="https://leetcode.cn/problems/sum-of-left-leaves/description/" target="_blank" rel="noreferrer">题目地址</a></p>
<p><strong>题意</strong>：求出一颗二叉树所有左叶子的和。</p>
<p><strong>思路</strong>：分别递归遍历二叉树的左子树和右子树，在这个过程中，不断判断每个子树根节点的左节点是否为叶节点，并将其添加到结果中；最后将结果相加即可得到答案。</p>
<p><strong>代码实现</strong>：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">/**</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">TreeNode</span><span style="color: #89DDFF; font-style: italic">}</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">root</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">return</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">number</span><span style="color: #89DDFF; font-style: italic">}</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> */</span></span>
<span class="line"><span style="color: #C792EA">var</span><span style="color: #A6ACCD"> sumOfLeftLeaves </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">root</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">root</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 计算当前节点左子树的所有左叶子之和</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">leftSum</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">sumOfLeftLeaves</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">left</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 若当前节点左节点为叶子节点，则加入结果</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">left</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">left</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">left</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">left</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">right</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">leftSum</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">left</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">val</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 计算当前节点右子树的所有左叶子之和</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">rightSum</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">sumOfLeftLeaves</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">right</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 返回当前节点左右子树所有左叶子之和</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">leftSum</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">rightSum</span></span>
<span class="line"><span style="color: #89DDFF">};</span></span></code></pre>
</div><h2 id="_2-找树左下角的值" tabindex="-1">2. 找树左下角的值 <a class="header-anchor" href="#_2-找树左下角的值" aria-label="Permalink to &quot;2. 找树左下角的值&quot;">&ZeroWidthSpace;</a></h2>
<p><a href="https://leetcode.cn/problems/find-bottom-left-tree-value/" target="_blank" rel="noreferrer">题目地址</a></p>
<p><strong>题意</strong>：找出一颗二叉树左下角的值（即最后一层最左边的值）。</p>
<p><strong>思路</strong>：层序遍历整棵二叉树，不断更新每一层最左侧的节点。</p>
<p><strong>代码实现</strong>：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">/**</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">TreeNode</span><span style="color: #89DDFF; font-style: italic">}</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">root</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">return</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">number</span><span style="color: #89DDFF; font-style: italic">}</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> */</span></span>
<span class="line"><span style="color: #C792EA">var</span><span style="color: #A6ACCD"> findBottomLeftValue </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">root</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">res</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">que</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> []</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">que</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">while</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">que</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&gt;</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">len</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">que</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178"> (</span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">len</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">++</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">node</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">que</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">shift</span><span style="color: #F07178">()</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #676E95; font-style: italic">// 移除队列的第一个元素，并保存到临时变量node中</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">node</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">left</span><span style="color: #F07178">) </span><span style="color: #A6ACCD">que</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">node</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">left</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">node</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">right</span><span style="color: #F07178">) </span><span style="color: #A6ACCD">que</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">node</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">right</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #A6ACCD">res</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">node</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">val</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #676E95; font-style: italic">// 更新res为第一个元素的值</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">res</span></span>
<span class="line"><span style="color: #89DDFF">};</span></span></code></pre>
</div><h2 id="_3-路经总和" tabindex="-1">3. 路经总和 <a class="header-anchor" href="#_3-路经总和" aria-label="Permalink to &quot;3. 路经总和&quot;">&ZeroWidthSpace;</a></h2>
<p><a href="https://leetcode.cn/problems/path-sum/" target="_blank" rel="noreferrer">题目地址</a></p>
<p><strong>题意</strong>：求出一颗二叉树是否存在根节点至叶节点的一条路径，能使得路径总合为目标值。</p>
<p><strong>思路</strong>：通过先序遍历遍历整棵二叉树，若存在这样的一条路径，则返回 <code>true</code>。</p>
<p><strong>代码实现</strong>：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">/**</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">TreeNode</span><span style="color: #89DDFF; font-style: italic">}</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">root</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">number</span><span style="color: #89DDFF; font-style: italic">}</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">targetSum</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">return</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">boolean</span><span style="color: #89DDFF; font-style: italic">}</span></span>
<span class="line"><span style="color: #676E95; font-style: italic"> */</span></span>
<span class="line"><span style="color: #C792EA">var</span><span style="color: #A6ACCD"> hasPathSum </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">root</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">targetSum</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">res</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">false</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">dfs</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">node</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">curSum</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">node</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">return</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">sum</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">node</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">val</span><span style="color: #F07178"> </span><span style="color: #89DDFF">+</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">curSum</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">sum</span><span style="color: #F07178"> </span><span style="color: #89DDFF">==</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">targetSum</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">node</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">left</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&amp;&amp;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">node</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">right</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">res</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #FF9CAC">true</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">return</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">dfs</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">node</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">left</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">sum</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">dfs</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">node</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">right</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">sum</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #82AAFF">dfs</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">root</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">res</span></span>
<span class="line"><span style="color: #89DDFF">};</span></span></code></pre>
</div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[深拷贝的实现]]></title>
            <link>https://desain7.top/coding/js/深拷贝的实现.html</link>
            <guid>https://desain7.top/coding/js/深拷贝的实现.html</guid>
            <pubDate>Sun, 03 Sep 2023 16:00:00 GMT</pubDate>
            <description><![CDATA[ 什么是深拷贝？
深拷贝与浅拷贝最大的不同就在于，当遇到属性值为引用类型的时候，它会新建一个引用类型并将对应的值复制给它，因此新对象获得的一个是新的引用类型而不是原有类型的引用。
深拷贝对于一些对象可]]></description>
            <content:encoded><![CDATA[<h1 id="深拷贝的实现" tabindex="-1">深拷贝的实现 <a class="header-anchor" href="#深拷贝的实现" aria-label="Permalink to &quot;深拷贝的实现&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="什么是深拷贝" tabindex="-1">什么是深拷贝？ <a class="header-anchor" href="#什么是深拷贝" aria-label="Permalink to &quot;什么是深拷贝？&quot;">&ZeroWidthSpace;</a></h2>
<p>深拷贝与浅拷贝最大的不同就在于，当遇到属性值为引用类型的时候，它会新建一个引用类型并将对应的值复制给它，因此新对象获得的一个是新的引用类型而不是原有类型的引用。</p>
<p>深拷贝对于一些对象可以使用 JSON 的两个函数来实现，但是由于 JSON 的对象格式比 js 的对象格式更加严格，所以如果属性值里边出现函数或者 Symbol 类型的值时，会转换失败。</p>
<h2 id="代码实现" tabindex="-1">代码实现 <a class="header-anchor" href="#代码实现" aria-label="Permalink to &quot;代码实现&quot;">&ZeroWidthSpace;</a></h2>
<h3 id="json-stringify" tabindex="-1">JSON.stringify() <a class="header-anchor" href="#json-stringify" aria-label="Permalink to &quot;JSON.stringify()&quot;">&ZeroWidthSpace;</a></h3>
<ul>
<li><code>JSON.parse(JSON.stringify(obj))</code> 是目前比较常用的深拷贝方法之一，它的原理就是利用 <code>JSON.stringify()</code> 将js对象序列化（JSON字符串），再使用 <code>JSON.parse()</code> 来反序列化(还原)js对象。</li>
<li>这个方法可以简单粗暴地实现深拷贝，但是还存在问题，要拷贝的对象中如果有函数，undefined 或 symbol，当使用过 <code>JSON.stringify()</code> 进行处理之后，都会消失。</li>
</ul>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">let</span><span style="color: #A6ACCD"> obj1 </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #A6ACCD">  </span><span style="color: #F07178">a</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #A6ACCD">              </span><span style="color: #F07178">b</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">                 </span><span style="color: #F07178">c</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">0</span></span>
<span class="line"><span style="color: #A6ACCD">                 </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #A6ACCD">            </span><span style="color: #89DDFF">};</span></span>
<span class="line"><span style="color: #C792EA">let</span><span style="color: #A6ACCD"> obj2 </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> JSON</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">parse</span><span style="color: #A6ACCD">(JSON</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">stringify</span><span style="color: #A6ACCD">(obj1))</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">obj1</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">a </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">obj1</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">b</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">c </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #A6ACCD">(obj1)</span><span style="color: #89DDFF">;</span><span style="color: #A6ACCD"> </span><span style="color: #676E95; font-style: italic">// {a: 1, b: {c: 1}}</span></span>
<span class="line"><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #A6ACCD">(obj2)</span><span style="color: #89DDFF">;</span><span style="color: #A6ACCD"> </span><span style="color: #676E95; font-style: italic">// {a: 0, b: {c: 0}}</span></span></code></pre>
</div><h3 id="手写实现" tabindex="-1">手写实现 <a class="header-anchor" href="#手写实现" aria-label="Permalink to &quot;手写实现&quot;">&ZeroWidthSpace;</a></h3>
<p><strong>思路</strong>：</p>
<ol>
<li>遍历源对象的所有属性。</li>
<li>对于每个属性，如果是基本类型，则直接赋值给目标对象。</li>
<li>如果是引用类型（如对象或数组），则递归调用深拷贝函数，创建一个新的对象或数组，并将属性值复制到新的对象或数组中。</li>
</ol>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">deepCopy</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">obj</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 检查是否是基本类型</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">obj</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #89DDFF">null</span><span style="color: #F07178"> </span><span style="color: #89DDFF">||</span><span style="color: #F07178"> </span><span style="color: #89DDFF">typeof</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">obj</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!==</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">object</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">obj</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 创建目标对象</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">copy</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">Array</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">isArray</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">obj</span><span style="color: #F07178">)) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 如果是数组，创建一个空数组</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">copy</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> []</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 如果是对象，创建一个空对象</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">copy</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{};</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 遍历源对象的属性</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178"> (</span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">in</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">obj</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 这里使用了 hasOwnProperty，是为了过滤掉原型链上的属性，保证只对对象本身的属性进行深拷贝</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">obj</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">hasOwnProperty</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">)) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// 对于每个属性，递归调用深拷贝函数</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">copy</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">deepCopy</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">obj</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">])</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">copy</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[浅拷贝的实现]]></title>
            <link>https://desain7.top/coding/js/浅拷贝的实现.html</link>
            <guid>https://desain7.top/coding/js/浅拷贝的实现.html</guid>
            <pubDate>Sat, 02 Sep 2023 16:00:00 GMT</pubDate>
            <description><![CDATA[ 什么是浅拷贝？
浅拷贝是指将一个新的对象对原始对象的属性值进行精确地拷贝，如果是基本数据类型，拷贝的就是基本数据类型的值，如果是引用数据类型，拷贝的就是内存地址。如果其中一个对象的引用类型属性的值发]]></description>
            <content:encoded><![CDATA[<h1 id="浅拷贝的实现" tabindex="-1">浅拷贝的实现 <a class="header-anchor" href="#浅拷贝的实现" aria-label="Permalink to &quot;浅拷贝的实现&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="什么是浅拷贝" tabindex="-1">什么是浅拷贝？ <a class="header-anchor" href="#什么是浅拷贝" aria-label="Permalink to &quot;什么是浅拷贝？&quot;">&ZeroWidthSpace;</a></h2>
<p>浅拷贝是指将一个新的对象对原始对象的属性值进行精确地拷贝，如果是基本数据类型，拷贝的就是基本数据类型的值，如果是引用数据类型，拷贝的就是内存地址。如果其中一个对象的引用类型属性的值发生改变，另一个对象也会发生变化。</p>
<h2 id="代码实现" tabindex="-1">代码实现 <a class="header-anchor" href="#代码实现" aria-label="Permalink to &quot;代码实现&quot;">&ZeroWidthSpace;</a></h2>
<p>通常情况下，有多种手段可以实现浅拷贝</p>
<h3 id="object-assign" tabindex="-1">Object.assign() <a class="header-anchor" href="#object-assign" aria-label="Permalink to &quot;Object.assign()&quot;">&ZeroWidthSpace;</a></h3>
<p><code>Object.assign()</code> 是 ES6 中对象的拷贝方法，第一个参数是要拷贝到的目标对象，其余参数是源对象。</p>
<p>用法：<code>Object.assign(target, source_1, ···)</code></p>
<div class="tip custom-block"><p class="custom-block-title">TIP</p>
<ol>
<li>如果目标对象和源对象有同名属性，或者多个源对象有同名属性，则后面的属性会覆盖前面的属性。</li>
<li>当该函数只有一个参数是，如果参数为对象，直接返回该对象；如果参数不是对象，会先将参数转为对象然后返回。</li>
<li>因为 null 和 undefined 不能转化为对象，所以第一个参数不能为 null 或 undefined，会报错。</li>
</ol>
</div>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">let</span><span style="color: #A6ACCD"> target </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #F07178">a</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD"> </span></span>
<span class="line"><span style="color: #C792EA">let</span><span style="color: #A6ACCD"> object2 </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #F07178">b</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">2</span><span style="color: #89DDFF">};</span></span>
<span class="line"><span style="color: #C792EA">let</span><span style="color: #A6ACCD"> object3 </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #F07178">c</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">3</span><span style="color: #89DDFF">};</span></span>
<span class="line"><span style="color: #A6ACCD">Object</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">assign</span><span style="color: #A6ACCD">(target</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD">object2</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD">object3)</span><span style="color: #89DDFF">;</span><span style="color: #A6ACCD">  </span></span>
<span class="line"><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #A6ACCD">(target)</span><span style="color: #89DDFF">;</span><span style="color: #A6ACCD">  </span><span style="color: #676E95; font-style: italic">// {a: 1, b: 2, c: 3}</span></span></code></pre>
</div><h3 id="扩展运算符" tabindex="-1">扩展运算符 <a class="header-anchor" href="#扩展运算符" aria-label="Permalink to &quot;扩展运算符&quot;">&ZeroWidthSpace;</a></h3>
<p>在构造字面量对象时，可以使用扩展运算符进行对象属性的拷贝。</p>
<p>用法：<code>let cloneObj = {...obj}</code></p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">let</span><span style="color: #A6ACCD"> obj1 </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span><span style="color: #F07178">a</span><span style="color: #89DDFF">:</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #F07178">b</span><span style="color: #89DDFF">:{</span><span style="color: #F07178">c</span><span style="color: #89DDFF">:</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">}}</span></span>
<span class="line"><span style="color: #C792EA">let</span><span style="color: #A6ACCD"> obj2 </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{...</span><span style="color: #A6ACCD">obj1</span><span style="color: #89DDFF">};</span></span>
<span class="line"><span style="color: #A6ACCD">obj1</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">a </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">2</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #A6ACCD">(obj1)</span><span style="color: #89DDFF">;</span><span style="color: #A6ACCD"> </span><span style="color: #676E95; font-style: italic">//{a:2,b:{c:1}}</span></span>
<span class="line"><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #A6ACCD">(obj2)</span><span style="color: #89DDFF">;</span><span style="color: #A6ACCD"> </span><span style="color: #676E95; font-style: italic">//{a:1,b:{c:1}}</span></span>
<span class="line"><span style="color: #A6ACCD">obj1</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">b</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">c </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">2</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #A6ACCD">(obj1)</span><span style="color: #89DDFF">;</span><span style="color: #A6ACCD"> </span><span style="color: #676E95; font-style: italic">//{a:2,b:{c:2}}</span></span>
<span class="line"><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #A6ACCD">(obj2)</span><span style="color: #89DDFF">;</span><span style="color: #A6ACCD"> </span><span style="color: #676E95; font-style: italic">//{a:1,b:{c:2}}</span></span></code></pre>
</div><h3 id="数组方法实现数组浅拷贝" tabindex="-1">数组方法实现数组浅拷贝 <a class="header-anchor" href="#数组方法实现数组浅拷贝" aria-label="Permalink to &quot;数组方法实现数组浅拷贝&quot;">&ZeroWidthSpace;</a></h3>
<ol>
<li><code>Array.prototype.slice()</code></li>
</ol>
<ul>
<li><code>slice()</code> 方法可以从已有的数组中返回选定的元素，该方法不会改变原数组。</li>
<li>该方法有两个参数，两个参数都可选，如果两个参数都不写，就可以实现一个数组的浅拷贝。</li>
</ul>
<p>用法：<code>Array.slice(start, end)</code></p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">let</span><span style="color: #A6ACCD"> arr </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> [</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">2</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">3</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #F78C6C">4</span><span style="color: #A6ACCD">]</span></span>
<span class="line"><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #A6ACCD">(arr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">slice</span><span style="color: #A6ACCD">())</span><span style="color: #89DDFF">;</span><span style="color: #A6ACCD"> </span><span style="color: #676E95; font-style: italic">// [1,2,3,4]</span></span>
<span class="line"><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #A6ACCD">(arr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">slice</span><span style="color: #A6ACCD">() </span><span style="color: #89DDFF">===</span><span style="color: #A6ACCD"> arr)</span><span style="color: #89DDFF">;</span><span style="color: #A6ACCD"> </span><span style="color: #676E95; font-style: italic">//false</span></span></code></pre>
</div><ol start="2">
<li><code>Array.prototype.concat()</code></li>
</ol>
<ul>
<li><code>concat()</code> 方法用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组。</li>
<li>该方法有两个参数，两个参数都可选，如果两个参数都不写，就可以实现一个数组的浅拷贝。</li>
</ul>
<p>用法： <code>arr1.concat(arr2)</code></p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">let</span><span style="color: #A6ACCD"> arr </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> [</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #F78C6C">2</span><span style="color: #89DDFF">,</span><span style="color: #F78C6C">3</span><span style="color: #89DDFF">,</span><span style="color: #F78C6C">4</span><span style="color: #A6ACCD">]</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #A6ACCD">(arr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">concat</span><span style="color: #A6ACCD">())</span><span style="color: #89DDFF">;</span><span style="color: #A6ACCD"> </span><span style="color: #676E95; font-style: italic">// [1,2,3,4]</span></span>
<span class="line"><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #A6ACCD">(arr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">concat</span><span style="color: #A6ACCD">() </span><span style="color: #89DDFF">===</span><span style="color: #A6ACCD"> arr)</span><span style="color: #89DDFF">;</span><span style="color: #A6ACCD"> </span><span style="color: #676E95; font-style: italic">//false</span></span></code></pre>
</div><h3 id="手写实现" tabindex="-1">手写实现 <a class="header-anchor" href="#手写实现" aria-label="Permalink to &quot;手写实现&quot;">&ZeroWidthSpace;</a></h3>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// 浅拷贝的实现;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">shallowCopy</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">object</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 只拷贝对象</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">object</span><span style="color: #F07178"> </span><span style="color: #89DDFF">||</span><span style="color: #F07178"> </span><span style="color: #89DDFF">typeof</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">object</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!==</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">object</span><span style="color: #89DDFF">&quot;</span><span style="color: #F07178">) </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 根据 object 的类型判断是新建一个数组还是对象</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newObject</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">Array</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">isArray</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">object</span><span style="color: #F07178">) </span><span style="color: #89DDFF">?</span><span style="color: #F07178"> [] </span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{};</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 遍历 object，并且判断是 object 的属性才拷贝</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178"> (</span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">in</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">object</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">object</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">hasOwnProperty</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">)) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">newObject</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">object</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">]</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newObject</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #676E95; font-style: italic">// 浅拷贝的实现;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">shallowCopy</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">object</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 只拷贝对象</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">object</span><span style="color: #F07178"> </span><span style="color: #89DDFF">||</span><span style="color: #F07178"> </span><span style="color: #89DDFF">typeof</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">object</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!==</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">object</span><span style="color: #89DDFF">&quot;</span><span style="color: #F07178">) </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 根据 object 的类型判断是新建一个数组还是对象</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newObject</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">Array</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">isArray</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">object</span><span style="color: #F07178">) </span><span style="color: #89DDFF">?</span><span style="color: #F07178"> [] </span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{};</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 遍历 object，并且判断是 object 的属性才拷贝</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178"> (</span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">in</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">object</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">object</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">hasOwnProperty</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">)) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">newObject</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">object</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">]</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newObject</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span><span style="color: #676E95; font-style: italic">// 浅拷贝的实现;</span></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">shallowCopy</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">object</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 只拷贝对象</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">!</span><span style="color: #A6ACCD">object</span><span style="color: #F07178"> </span><span style="color: #89DDFF">||</span><span style="color: #F07178"> </span><span style="color: #89DDFF">typeof</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">object</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!==</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">object</span><span style="color: #89DDFF">&quot;</span><span style="color: #F07178">) </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 根据 object 的类型判断是新建一个数组还是对象</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newObject</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">Array</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">isArray</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">object</span><span style="color: #F07178">) </span><span style="color: #89DDFF">?</span><span style="color: #F07178"> [] </span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{};</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 遍历 object，并且判断是 object 的属性才拷贝</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178"> (</span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">key</span><span style="color: #F07178"> </span><span style="color: #89DDFF">in</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">object</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">object</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">hasOwnProperty</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">)) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">newObject</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">object</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">key</span><span style="color: #F07178">]</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">newObject</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[函数柯里化的实现]]></title>
            <link>https://desain7.top/coding/js/函数柯里化的实现.html</link>
            <guid>https://desain7.top/coding/js/函数柯里化的实现.html</guid>
            <pubDate>Fri, 01 Sep 2023 16:00:00 GMT</pubDate>
            <description><![CDATA[ 实现思路
1. 创建一个柯里化函数，它接受一个函数作为参数，并返回一个新函数。
2. 在新函数内部，使用闭包保存传入的函数和已经传入的参数。
3. 在新函数的主体中，判断已经传入的参数数量是否满足原]]></description>
            <content:encoded><![CDATA[<h1 id="函数柯里化的实现" tabindex="-1">函数柯里化的实现 <a class="header-anchor" href="#函数柯里化的实现" aria-label="Permalink to &quot;函数柯里化的实现&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="实现思路" tabindex="-1">实现思路 <a class="header-anchor" href="#实现思路" aria-label="Permalink to &quot;实现思路&quot;">&ZeroWidthSpace;</a></h2>
<ol>
<li>
<p>创建一个柯里化函数，它接受一个函数作为参数，并返回一个新函数。</p>
</li>
<li>
<p>在新函数内部，使用闭包保存传入的函数和已经传入的参数。</p>
</li>
<li>
<p>在新函数的主体中，判断已经传入的参数数量是否满足原函数的参数数量。</p>
</li>
<li>
<p>如果已经传入的参数数量足够，就调用原函数并传入这些参数，返回结果。</p>
</li>
<li>
<p>如果已经传入的参数数量不足，就返回一个新的柯里化函数，并将已经传入的参数和新传入的参数合并。</p>
</li>
<li>
<p>重复步骤3到步骤5，直到所有参数都被处理完毕。</p>
</li>
</ol>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// 函数柯里化通常由闭包和递归实现</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">curry</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">fn</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 返回柯里化后的函数</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #C792EA">function</span><span style="color: #F07178"> </span><span style="color: #82AAFF">curried</span><span style="color: #89DDFF">(...</span><span style="color: #A6ACCD; font-style: italic">args</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 持续接受参数，若参数数量大于等于原函数，则直接传入原函数并调用</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">args</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&gt;=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">fn</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">fn</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">apply</span><span style="color: #F07178">(</span><span style="color: #89DDFF">this,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">args</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// 否则返回一个新的函数，直到函数的所有参数都被收集完毕</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #C792EA">function</span><span style="color: #F07178"> </span><span style="color: #89DDFF">(...</span><span style="color: #A6ACCD; font-style: italic">newArgs</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">// 收集参数</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">curried</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">apply</span><span style="color: #F07178">(</span><span style="color: #89DDFF">this,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">args</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">concat</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">newArgs</span><span style="color: #F07178">))</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">};</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">};</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[手写类型判断函数]]></title>
            <link>https://desain7.top/coding/js/手写类型判断函数.html</link>
            <guid>https://desain7.top/coding/js/手写类型判断函数.html</guid>
            <pubDate>Fri, 01 Sep 2023 16:00:00 GMT</pubDate>
            <description><![CDATA[ 实现思路
实现一个类型判断函数可以按照下面这个思路：
1. 首先，通过 JavaScript 提供的基本类型判断方法进行判断。包括使用 typeof 操作符判断基本类型（如字符串、数字、布尔值、函数]]></description>
            <content:encoded><![CDATA[<h1 id="手写类型判断函数" tabindex="-1">手写类型判断函数 <a class="header-anchor" href="#手写类型判断函数" aria-label="Permalink to &quot;手写类型判断函数&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="实现思路" tabindex="-1">实现思路 <a class="header-anchor" href="#实现思路" aria-label="Permalink to &quot;实现思路&quot;">&ZeroWidthSpace;</a></h2>
<p>实现一个类型判断函数可以按照下面这个思路：</p>
<ol>
<li>
<p>首先，通过 JavaScript 提供的基本类型判断方法进行判断。包括使用 typeof 操作符判断基本类型（如字符串、数字、布尔值、函数等），使用 <code>Array.isArray()</code> 判断数组，使用 typeof null 判断 null 类型。</p>
</li>
<li>
<p>对于引用类型（对象、数组等），可以通过判断其构造函数来确定具体类型。使用 instanceof 操作符可以判断一个对象是否属于某个构造函数创建的实例。例如，使用 obj instanceof Array 可以判断 obj 是否为数组。</p>
</li>
<li>
<p>对于特殊类型的判断，可以使用其他方法。例如，使用 <code>Object.prototype.toString()</code> 方法可以获取对象的内部属性 <code>[[Class]]</code>，从而判断其类型。这种方式可以判断更复杂的类型，如日期对象、正则表达式等。</p>
</li>
<li>
<p>对于 null 和 undefined，它们的类型判断比较特殊。可以通过严格相等（===）运算符进行判断，如 value === null 判断是否为 null，typeof value === 'undefined' 判断是否为 undefined。</p>
</li>
</ol>
<h2 id="代码实现" tabindex="-1">代码实现 <a class="header-anchor" href="#代码实现" aria-label="Permalink to &quot;代码实现&quot;">&ZeroWidthSpace;</a></h2>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">getType</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">value</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">value</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #89DDFF">null</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">null</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">typeof</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">value</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">undefined</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">undefined</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #89DDFF">typeof</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">value</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">object</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">valueClass</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Object</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">prototype</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">toString</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">call</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">value</span><span style="color: #F07178">)</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">type</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">valueClass</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">split</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #F07178">)[</span><span style="color: #F78C6C">1</span><span style="color: #F07178">]</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">split</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&quot;&quot;</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">type</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">pop</span><span style="color: #F07178">()</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">type</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">join</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&quot;&quot;</span><span style="color: #F07178">)</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">toLowerCase</span><span style="color: #F07178">()</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">type</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">typeof</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">value</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">Object</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">prototype</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">toString</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">call</span><span style="color: #A6ACCD">(</span><span style="color: #F78C6C">2</span><span style="color: #A6ACCD">) </span><span style="color: #676E95; font-style: italic">// [object Number]</span></span>
<span class="line"><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">getType</span><span style="color: #A6ACCD">(</span><span style="color: #F78C6C">2</span><span style="color: #A6ACCD">) </span><span style="color: #676E95; font-style: italic">// Number</span></span></code></pre>
</div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[手写实现 call、apply 方法]]></title>
            <link>https://desain7.top/coding/js/手写 call与apply.html</link>
            <guid>https://desain7.top/coding/js/手写 call与apply.html</guid>
            <pubDate>Thu, 24 Aug 2023 16:00:00 GMT</pubDate>
            <description><![CDATA[ call 方法和 apply 方法的区别
1. 参数传递方式：
call 方法接受的参数是作为函数调用时的参数一一传递的，通过逗号分隔。
例如：`func.call(context, arg1, a]]></description>
            <content:encoded><![CDATA[<h1 id="手写实现-call、apply-方法" tabindex="-1">手写实现 call、apply 方法 <a class="header-anchor" href="#手写实现-call、apply-方法" aria-label="Permalink to &quot;手写实现 call、apply 方法&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="call-方法和-apply-方法的区别" tabindex="-1">call 方法和 apply 方法的区别 <a class="header-anchor" href="#call-方法和-apply-方法的区别" aria-label="Permalink to &quot;call 方法和 apply 方法的区别&quot;">&ZeroWidthSpace;</a></h2>
<ol>
<li>参数传递方式：</li>
</ol>
<p>call 方法接受的参数是作为函数调用时的参数一一传递的，通过逗号分隔。</p>
<p>例如：<code>func.call(context, arg1, arg2, ...)</code>。</p>
<p>apply 方法接受的参数是一个数组或类数组对象，数组中的元素作为函数调用时的参数传递。</p>
<p>例如：<code>func.apply(context, [arg1, arg2, ...])</code>。</p>
<ol start="2">
<li>参数数量：</li>
</ol>
<p>call 方法的参数数量是固定的，需要按照实际参数的个数逐个传递。</p>
<p>apply 方法可以接受任意数量的参数，只需要将参数以数组的形式传递。</p>
<ol start="3">
<li>使用方式：</li>
</ol>
<p>call 方法在调用时，参数需要逐个列举出来，适合已知参数个数的情况。</p>
<p>apply 方法在调用时，参数以数组形式传递，适合参数数量不确定或已经存在数组的情况。</p>
<p><em>用例：</em></p>
<p>假设有一个函数 greet 和一个对象 person：</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">greet</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">message</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">punctuation</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #89DDFF">`${</span><span style="color: #A6ACCD">message</span><span style="color: #89DDFF">}</span><span style="color: #C3E88D"> </span><span style="color: #89DDFF">${</span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">name</span><span style="color: #89DDFF">}${</span><span style="color: #A6ACCD">punctuation</span><span style="color: #89DDFF">}`</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> person </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">name</span><span style="color: #89DDFF">:</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">John</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #89DDFF">};</span></span></code></pre>
</div><p>分别使用 call 和 apply 方法来调用 greet 函数</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// 使用 call 方法调用 greet 函数</span></span>
<span class="line"><span style="color: #A6ACCD">greet</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">call</span><span style="color: #A6ACCD">(person</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">Hello</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">!</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 使用 apply 方法调用 greet 函数</span></span>
<span class="line"><span style="color: #A6ACCD">greet</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">apply</span><span style="color: #A6ACCD">(person</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> [</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">Hello</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">!</span><span style="color: #89DDFF">&#39;</span><span style="color: #A6ACCD">])</span><span style="color: #89DDFF">;</span></span></code></pre>
</div><div class="tip custom-block"><p class="custom-block-title">TIP</p>
<p>除了参数传递方式的不同，二者在其他方面的行为是类似的，得到的结果也是相同的</p>
</div>
<h2 id="实现-call-方法" tabindex="-1">实现 call 方法 <a class="header-anchor" href="#实现-call-方法" aria-label="Permalink to &quot;实现 call 方法&quot;">&ZeroWidthSpace;</a></h2>
<ol>
<li>将 call 通过原型链的方式添加到 Function 的 Prototype 上，确保所有函数都能调用该方法</li>
<li>将提供给 call 方法的对象作为函数的上下文，参数作为函数的参数</li>
<li>在 call 方法内部通过 this 引用调用了 call 的函数</li>
<li>将该引用赋值为对象的方法，调用方法得到结果</li>
<li>从对象上删除该方法，返回结果</li>
</ol>
<div class="tip custom-block"><p class="custom-block-title">TIP</p>
<p>由于 this 引用得到的函数不能直接调用，所以将它暂时作为对象上的方法，为了避免与原对象上的方法或属性名重复，故将 symbol 作为方法名</p>
</div>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #FFCB6B">Function</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">prototype</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">myCall</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">ctx</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">...</span><span style="color: #A6ACCD; font-style: italic">args</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">fn</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">Symbol</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">fn</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 若传入的对象为空，则使用 window 对象</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">ctx</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">ctx</span><span style="color: #F07178"> </span><span style="color: #89DDFF">||</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">window</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">ctx</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">fn</span><span style="color: #F07178">] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">this</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">res</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">ctx</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">fn</span><span style="color: #F07178">](</span><span style="color: #89DDFF">...</span><span style="color: #A6ACCD">args</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">delete</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">ctx</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">fn</span><span style="color: #F07178">]</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">res</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="实现-apply-方法" tabindex="-1">实现 apply 方法 <a class="header-anchor" href="#实现-apply-方法" aria-label="Permalink to &quot;实现 apply 方法&quot;">&ZeroWidthSpace;</a></h2>
<p>具体实现和 call 方法类似</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #FFCB6B">Function</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">prototype</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">myApply</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">ctx</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">args</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">fn</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">Symbol</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">fn</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">ctx</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">ctx</span><span style="color: #F07178"> </span><span style="color: #89DDFF">||</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">window</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #A6ACCD">ctx</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">fn</span><span style="color: #F07178">] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">this;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">result</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">Array</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">isArray</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">args</span><span style="color: #F07178">)) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">result</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">ctx</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">fn</span><span style="color: #F07178">](</span><span style="color: #89DDFF">...</span><span style="color: #A6ACCD">args</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 如果传给 apply 方法的第二个参数不是数组或类数组对象，那么就直接执行函数</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">result</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">ctx</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">fn</span><span style="color: #F07178">]()</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">delete</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">ctx</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">fn</span><span style="color: #F07178">]</span><span style="color: #89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">result</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">};</span></span></code></pre>
</div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[手写实现 Promise]]></title>
            <link>https://desain7.top/coding/js/手写promise.html</link>
            <guid>https://desain7.top/coding/js/手写promise.html</guid>
            <pubDate>Thu, 24 Aug 2023 16:00:00 GMT</pubDate>
            <description><![CDATA[Promise 简述
---
 定义三种状态
* Promise 的三种状态
  * pending（等待）: 初始状态，没有完成，也没有被拒绝
  * resolved（完成）: 表示操作成功完成
]]></description>
            <content:encoded><![CDATA[<h1 id="手写实现-promise" tabindex="-1">手写实现 Promise <a class="header-anchor" href="#手写实现-promise" aria-label="Permalink to &quot;手写实现 Promise&quot;">&ZeroWidthSpace;</a></h1>
<p><a href="/interview/js/Promise简述.html">Promise 简述</a></p>
<hr>
<h2 id="定义三种状态" tabindex="-1">定义三种状态 <a class="header-anchor" href="#定义三种状态" aria-label="Permalink to &quot;定义三种状态&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li>Promise 的三种状态
<ul>
<li>pending（等待）: 初始状态，没有完成，也没有被拒绝</li>
<li>resolved（完成）: 表示操作成功完成</li>
<li>rejected（拒绝）: 表示操作失败</li>
</ul>
</li>
</ul>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> PENDING </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">PENDING</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">;</span><span style="color: #A6ACCD"> </span><span style="color: #676E95; font-style: italic">// 进行中</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> FULFILLED </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">FULFILLED</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">;</span><span style="color: #A6ACCD"> </span><span style="color: #676E95; font-style: italic">// 已成功</span></span>
<span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> REJECTED </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">REJECTED</span><span style="color: #89DDFF">&quot;</span><span style="color: #89DDFF">;</span><span style="color: #A6ACCD"> </span><span style="color: #676E95; font-style: italic">// 已失败</span></span></code></pre>
</div><h2 id="定义-promise-类及构造器-初始化-promise-内部属性、方法" tabindex="-1">定义 Promise 类及构造器，初始化 Promise 内部属性、方法 <a class="header-anchor" href="#定义-promise-类及构造器-初始化-promise-内部属性、方法" aria-label="Permalink to &quot;定义 Promise 类及构造器，初始化 Promise 内部属性、方法&quot;">&ZeroWidthSpace;</a></h2>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">class</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">Promise</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">  </span><span style="color: #676E95; font-style: italic">// 构造器</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #C792EA">constructor</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">exextor</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// Promise 初始状态为 Pending</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">status</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">PENDING</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 将成功与失败的结果存到 this 上，便于 then 与 catch 的访问</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">value</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">undefined</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">reason</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">undefined</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 成功后的回调函数队列</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">onFulfilledCallbacks</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> []</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 失败后的回调函数队列</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">onRejectedCallbacks</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 定义 resolve 方法</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">resolve</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">value</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// 只有当状态为 Pending 时，才可以更改状态</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">status</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">PENDING</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">status</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">FULFILLED</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">value</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">value</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">onFulfilledCallbacks</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">forEach</span><span style="color: #F07178">(</span><span style="color: #A6ACCD; font-style: italic">fn</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #82AAFF">fn</span><span style="color: #F07178">(</span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">value</span><span style="color: #F07178">))</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 定义 reject 方法</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">reject</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">reason</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// 只有当状态为 Pending 时，才可以更改状态</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">status</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">PENDING</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">status</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">REJECTED</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">reason</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">reason</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">onRejectedCallbacks</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">forEach</span><span style="color: #F07178">(</span><span style="color: #A6ACCD; font-style: italic">fn</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #82AAFF">fn</span><span style="color: #F07178">(</span><span style="color: #89DDFF">this.</span><span style="color: #A6ACCD">reason</span><span style="color: #F07178">))</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 初始化成功后立即执行 Promise 内部的语句</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">try</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// 立即执行 executor</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// 把内部的 resolve 和 reject 传入 executor，用户可调用 resolve 和 reject 来变更 Promise 的状态</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">exector</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">resolve</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">reject</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">catch</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">e</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// executor 执行出错，将错误内容 reject 抛出去</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">reject</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">e</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><div class="tip custom-block"><p class="custom-block-title">TIP</p>
<p>以下方法均定义在 Promise 类内部</p>
</div>
<h2 id="实现-promise-then-方法" tabindex="-1">实现 Promise.then() 方法 <a class="header-anchor" href="#实现-promise-then-方法" aria-label="Permalink to &quot;实现 Promise.then() 方法&quot;">&ZeroWidthSpace;</a></h2>
<p><code>Promise.then()</code> 方法接收两个参数，对应 Promise 成功和失败的两种状态，它会返回一个等效的 Promise 对象。</p>
<div class="tip custom-block"><p class="custom-block-title">TIP</p>
<p>当传入的参数不为函数时，则直接返回值或抛出错误</p>
</div>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">/**</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">   * promise.then 的实现</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">   * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">*</span><span style="color: #89DDFF; font-style: italic">}</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">onFulfilled</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">   * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">param</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #89DDFF; font-style: italic">{</span><span style="color: #FFCB6B; font-style: italic">*</span><span style="color: #89DDFF; font-style: italic">}</span><span style="color: #676E95; font-style: italic"> </span><span style="color: #A6ACCD; font-style: italic">onRejected</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">   * </span><span style="color: #89DDFF; font-style: italic">@</span><span style="color: #C792EA; font-style: italic">returns</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">   * </span></span>
<span class="line"><span style="color: #676E95; font-style: italic">   */</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #82AAFF">then</span><span style="color: #A6ACCD">(onFulfilled</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> onRejected) </span><span style="color: #89DDFF">{</span></span>
<span class="line"></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// onFulfilled 函数会在 Promise 对象完成时异步执行</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">onFulfilled</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">typeof</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">onFulfilled</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">function</span><span style="color: #89DDFF">&quot;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">?</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">onFulfilled</span><span style="color: #F07178"> </span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">value</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">value</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">onRejected</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">typeof</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">onRejected</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&quot;</span><span style="color: #C3E88D">function</span><span style="color: #89DDFF">&quot;</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">?</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">onRejected</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">reason</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #89DDFF; font-style: italic">throw</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">Error</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">reason</span><span style="color: #F07178"> </span><span style="color: #89DDFF">instanceof</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Error</span><span style="color: #F07178"> </span><span style="color: #89DDFF">?</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">reason</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">message</span><span style="color: #F07178"> </span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">reason</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #89DDFF">};</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 保存this</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">self</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">this;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Promise</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">resolve</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">reject</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">self</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">status</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">PENDING</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #A6ACCD">self</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">onFulfilledCallbacks</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push</span><span style="color: #F07178">(</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">          </span><span style="color: #676E95; font-style: italic">// try捕获错误</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #89DDFF; font-style: italic">try</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">            </span><span style="color: #676E95; font-style: italic">// 模拟微任务</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #82AAFF">setTimeout</span><span style="color: #F07178">(</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">              </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">result</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">onFulfilled</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">self</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">value</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">              </span><span style="color: #676E95; font-style: italic">// 分两种情况：</span></span>
<span class="line"><span style="color: #89DDFF">              </span><span style="color: #676E95; font-style: italic">// 1. 回调函数返回值是Promise，执行then操作</span></span>
<span class="line"><span style="color: #89DDFF">              </span><span style="color: #676E95; font-style: italic">// 2. 如果不是Promise，调用新Promise的resolve函数</span></span>
<span class="line"><span style="color: #F07178">              </span><span style="color: #A6ACCD">result</span><span style="color: #F07178"> </span><span style="color: #89DDFF">instanceof</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Promise</span></span>
<span class="line"><span style="color: #F07178">                </span><span style="color: #89DDFF">?</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">result</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">resolve</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">reject</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">                </span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #82AAFF">resolve</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">result</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">catch</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">e</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #82AAFF">reject</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">e</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #A6ACCD">self</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">onRejectedCallbacks</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">push</span><span style="color: #F07178">(</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">          </span><span style="color: #676E95; font-style: italic">// 以下同理</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #89DDFF; font-style: italic">try</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #82AAFF">setTimeout</span><span style="color: #F07178">(</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">              </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">result</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">onRejected</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">self</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">reason</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">              </span><span style="color: #676E95; font-style: italic">// 不同点：此时是reject</span></span>
<span class="line"><span style="color: #F07178">              </span><span style="color: #A6ACCD">result</span><span style="color: #F07178"> </span><span style="color: #89DDFF">instanceof</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Promise</span></span>
<span class="line"><span style="color: #F07178">                </span><span style="color: #89DDFF">?</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">result</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">resolve</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">reject</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">                </span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #82AAFF">reject</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">result</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">catch</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">e</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #82AAFF">reject</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">e</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">self</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">status</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">FULFILLED</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF; font-style: italic">try</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #82AAFF">setTimeout</span><span style="color: #F07178">(</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">result</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">onFulfilled</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">self</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">value</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #A6ACCD">result</span><span style="color: #F07178"> </span><span style="color: #89DDFF">instanceof</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Promise</span></span>
<span class="line"><span style="color: #F07178">              </span><span style="color: #89DDFF">?</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">result</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">resolve</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">reject</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">              </span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #82AAFF">resolve</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">result</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">catch</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">e</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #82AAFF">reject</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">e</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">self</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">status</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">REJECTED</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF; font-style: italic">try</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #82AAFF">setTimeout</span><span style="color: #F07178">(</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">result</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">onRejected</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">self</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">reason</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #A6ACCD">result</span><span style="color: #F07178"> </span><span style="color: #89DDFF">instanceof</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Promise</span></span>
<span class="line"><span style="color: #F07178">              </span><span style="color: #89DDFF">?</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">result</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">resolve</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">reject</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">              </span><span style="color: #89DDFF">:</span><span style="color: #F07178"> </span><span style="color: #82AAFF">resolve</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">result</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">catch</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">e</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #82AAFF">reject</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">e</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="promise-实例上的方法" tabindex="-1">Promise 实例上的方法 <a class="header-anchor" href="#promise-实例上的方法" aria-label="Permalink to &quot;Promise 实例上的方法&quot;">&ZeroWidthSpace;</a></h2>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">class</span><span style="color: #A6ACCD"> </span><span style="color: #FFCB6B">Promise</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #A6ACCD"> </span></span>
<span class="line"><span style="color: #A6ACCD"> </span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #F07178">catch</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">onRejected</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">this.</span><span style="color: #82AAFF">then</span><span style="color: #F07178">(</span><span style="color: #89DDFF">null,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">onRejected</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #C792EA">static</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">resolve</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">value</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">value</span><span style="color: #F07178"> </span><span style="color: #89DDFF">instanceof</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Promise</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// 如果是Promise实例，直接返回</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">value</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">else</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">      </span><span style="color: #676E95; font-style: italic">// 如果不是Promise实例，返回一个新的Promise对象，状态为FULFILLED</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Promise</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">resolve</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">reject</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #82AAFF">resolve</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">value</span><span style="color: #F07178">))</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #C792EA">static</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">reject</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">reason</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Promise</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">resolve</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">reject</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">reject</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">reason</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #C792EA">static</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">all</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">promiseArr</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">len</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">promiseArr</span><span style="color: #89DDFF">.</span><span style="color: #A6ACCD">length</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">values</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">Array</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">len</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">    </span><span style="color: #676E95; font-style: italic">// 记录已经成功执行的promise个数</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">count</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Promise</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">resolve</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">reject</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">for</span><span style="color: #F07178"> (</span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">len</span><span style="color: #89DDFF">;</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">i</span><span style="color: #89DDFF">++</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">        </span><span style="color: #676E95; font-style: italic">// Promise.resolve()处理，确保每一个都是promise实例</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #FFCB6B">Promise</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">resolve</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">promiseArr</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">])</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #F07178">(</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">val</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #A6ACCD">values</span><span style="color: #F07178">[</span><span style="color: #A6ACCD">i</span><span style="color: #F07178">] </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">val</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #A6ACCD">count</span><span style="color: #89DDFF">++;</span></span>
<span class="line"><span style="color: #89DDFF">            </span><span style="color: #676E95; font-style: italic">// 如果全部执行完，返回promise的状态就可以改变了</span></span>
<span class="line"><span style="color: #F07178">            </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178"> (</span><span style="color: #A6ACCD">count</span><span style="color: #F07178"> </span><span style="color: #89DDFF">===</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">len</span><span style="color: #F07178">) </span><span style="color: #82AAFF">resolve</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">values</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #89DDFF">},</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">err</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #82AAFF">reject</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">err</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">        )</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #C792EA">static</span><span style="color: #A6ACCD"> </span><span style="color: #F07178">race</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">promiseArr</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Promise</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">resolve</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">reject</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">promiseArr</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">forEach</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">p</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">        </span><span style="color: #FFCB6B">Promise</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">resolve</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">p</span><span style="color: #F07178">)</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #F07178">(</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">val</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #82AAFF">resolve</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">val</span><span style="color: #F07178">)</span><span style="color: #89DDFF">,</span></span>
<span class="line"><span style="color: #F07178">          </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">err</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #82AAFF">reject</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">err</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">        )</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[节流&防抖]]></title>
            <link>https://desain7.top/coding/js/节流&amp;防抖.html</link>
            <guid>https://desain7.top/coding/js/节流&amp;防抖.html</guid>
            <pubDate>Wed, 23 Aug 2023 16:00:00 GMT</pubDate>
            <description><![CDATA[ 节流
* 规定一个时间，在这个时间内，只能有一次触发事件的回调函数执行，如果在同一个时间内某事件被触发多次，只有一次能生效
```js
const throttle = function (call]]></description>
            <content:encoded><![CDATA[<h1 id="节流-防抖" tabindex="-1">节流&amp;防抖 <a class="header-anchor" href="#节流-防抖" aria-label="Permalink to &quot;节流&amp;防抖&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="节流" tabindex="-1">节流 <a class="header-anchor" href="#节流" aria-label="Permalink to &quot;节流&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li>规定一个时间，在这个时间内，只能有一次触发事件的回调函数执行，如果在同一个时间内某事件被触发多次，只有一次能生效</li>
</ul>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> throttle </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">callback</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">delay</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">timer</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">null</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #C792EA">function</span><span style="color: #F07178"> </span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF; font-style: italic">if</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">timer</span><span style="color: #F07178">) </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #89DDFF; font-style: italic">return</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">callback</span><span style="color: #F07178">()</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">timer</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">setTimeout</span><span style="color: #F07178">(</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #A6ACCD">timer</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">null</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">},</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">delay</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div><h2 id="防抖" tabindex="-1">防抖 <a class="header-anchor" href="#防抖" aria-label="Permalink to &quot;防抖&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li>规定一个时间，在这个时间内，一次触发事件的回调函数会被执行，如果在同一时间内某事件被触发多次，该回调函数会被重新执行</li>
</ul>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">const</span><span style="color: #A6ACCD"> debounce </span><span style="color: #89DDFF">=</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">callback</span><span style="color: #89DDFF">,</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD; font-style: italic">delay</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #C792EA">let</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">timer</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">null</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #C792EA">function</span><span style="color: #F07178"> </span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #82AAFF">clearTimeout</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">timer</span><span style="color: #F07178">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #A6ACCD">timer</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #82AAFF">setTimeout</span><span style="color: #F07178">(</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">      </span><span style="color: #82AAFF">callback</span><span style="color: #F07178">()</span></span>
<span class="line"><span style="color: #F07178">    </span><span style="color: #89DDFF">},</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">delay</span><span style="color: #F07178">)</span></span>
<span class="line"><span style="color: #F07178">  </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span></code></pre>
</div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Promise的特点是什么，分别有什么优缺点？什么是Promise链？Promise构造函数执行和then函数执行有什么区别？]]></title>
            <link>https://desain7.top/interview/js/Promise简述.html</link>
            <guid>https://desain7.top/interview/js/Promise简述.html</guid>
            <pubDate>Wed, 23 Aug 2023 16:00:00 GMT</pubDate>
            <description><![CDATA[ 特点
* Promise 有三种状态
  * pending（等待）: 初始状态，没有完成，也没有被拒绝
  * resolved（完成）: 表示操作成功完成
  * rejectde（拒绝）: 表]]></description>
            <content:encoded><![CDATA[<h1 id="promise-的特点是什么-分别有什么优缺点-什么是-promise-链-promise-构造函数执行和-then-函数执行有什么区别" tabindex="-1">Promise 的特点是什么，分别有什么优缺点？什么是 Promise 链？Promise 构造函数执行和 then 函数执行有什么区别？ <a class="header-anchor" href="#promise-的特点是什么-分别有什么优缺点-什么是-promise-链-promise-构造函数执行和-then-函数执行有什么区别" aria-label="Permalink to &quot;Promise 的特点是什么，分别有什么优缺点？什么是 Promise 链？Promise 构造函数执行和 then 函数执行有什么区别？&quot;">&ZeroWidthSpace;</a></h1>
<h2 id="特点" tabindex="-1">特点 <a class="header-anchor" href="#特点" aria-label="Permalink to &quot;特点&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li>Promise 有三种状态
<ul>
<li>pending（等待）: 初始状态，没有完成，也没有被拒绝</li>
<li>resolved（完成）: 表示操作成功完成</li>
<li>rejectde（拒绝）: 表示操作失败</li>
</ul>
</li>
<li>如果一个 Promise 从等待状态变为其他状态就永远不能更改状态，此时的状态可称为 settled（已敲定）</li>
</ul>
<h2 id="优点" tabindex="-1">优点 <a class="header-anchor" href="#优点" aria-label="Permalink to &quot;优点&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li>
<p>很好的解决了回调地狱的问题</p>
</li>
<li>
<p>Promise 利用三大手段解决回调地狱：</p>
<ol>
<li>回调函数延迟绑定
通过将回调函数封装在一个函数中，并在异步操作完成后调用该函数并传递结果实现</li>
</ol>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #676E95; font-style: italic">// 异步操作返回一个 Promise 对象</span></span>
<span class="line"><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">asyncOperation</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">   </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Promise</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">resolve</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">     </span><span style="color: #82AAFF">setTimeout</span><span style="color: #F07178">(</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">       </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">result</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">Operation result</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">       </span><span style="color: #82AAFF">resolve</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">result</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">     </span><span style="color: #89DDFF">},</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1000</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD"> </span><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">nextOperation</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">result</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">   </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">result</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">   </span><span style="color: #676E95; font-style: italic">// 执行下一个操作</span></span>
<span class="line"><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #89DDFF"> </span><span style="color: #676E95; font-style: italic">// 通过 .then() 方法，在异步操作完成后执行下一个操作，若出现错误，则用 .catch() 捕获并处理</span></span>
<span class="line"><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">asyncOperation</span><span style="color: #A6ACCD">()</span></span>
<span class="line"><span style="color: #A6ACCD">   </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #A6ACCD">(nextOperation)</span></span>
<span class="line"><span style="color: #A6ACCD">   </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">catch</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">error</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">     </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">error</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">error</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">   </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span></code></pre>
</div><ol start="2">
<li>返回值穿透
通过一个函数返回 Promise，以链式的方式连接多个异步操作，避免嵌套回调函数</li>
</ol>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">asyncOperation</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Promise</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">resolve</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">   </span><span style="color: #82AAFF">setTimeout</span><span style="color: #F07178">(</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">     </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">result</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">Operation result</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">     </span><span style="color: #82AAFF">resolve</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">result</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">   </span><span style="color: #89DDFF">},</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1000</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"><span style="color: #676E95; font-style: italic">// 每个 .then() 方法都返回一个新的 Promise 对象，从而将多个操作连接在一起，并在过程中完成值的传递</span></span>
<span class="line"><span style="color: #82AAFF">asyncOperation</span><span style="color: #A6ACCD">()</span></span>
<span class="line"><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">result</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">   </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">result</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">   </span><span style="color: #676E95; font-style: italic">// 执行下一个操作</span></span>
<span class="line"><span style="color: #F07178">   </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">Next operation result</span><span style="color: #89DDFF">&#39;</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">nextResult</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">   </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">nextResult</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">   </span><span style="color: #676E95; font-style: italic">// 执行下一个操作</span></span>
<span class="line"><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">catch</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">error</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">   </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">error</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">error</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span></code></pre>
</div><ol start="3">
<li>错误冒泡
通过在 Promise 链中使用 .catch() 方法来捕获和处理错误，避免它们在链中传播并导致回调地狱</li>
</ol>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre v-pre class="shiki material-theme-palenight" ><code><span class="line"><span style="color: #C792EA">function</span><span style="color: #A6ACCD"> </span><span style="color: #82AAFF">asyncOperation</span><span style="color: #89DDFF">()</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178"> </span><span style="color: #89DDFF; font-style: italic">return</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #FFCB6B">Promise</span><span style="color: #F07178">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">resolve</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #A6ACCD; font-style: italic">reject</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">   </span><span style="color: #82AAFF">setTimeout</span><span style="color: #F07178">(</span><span style="color: #89DDFF">()</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #89DDFF">     </span><span style="color: #676E95; font-style: italic">// 若异步操作失败，就抛出错误，并将 Promise 的状态变为 rejected</span></span>
<span class="line"><span style="color: #F07178">     </span><span style="color: #C792EA">const</span><span style="color: #F07178"> </span><span style="color: #A6ACCD">error</span><span style="color: #F07178"> </span><span style="color: #89DDFF">=</span><span style="color: #F07178"> </span><span style="color: #89DDFF">new</span><span style="color: #F07178"> </span><span style="color: #82AAFF">Error</span><span style="color: #F07178">(</span><span style="color: #89DDFF">&#39;</span><span style="color: #C3E88D">Operation failed</span><span style="color: #89DDFF">&#39;</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">     </span><span style="color: #82AAFF">reject</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">error</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178">   </span><span style="color: #89DDFF">},</span><span style="color: #F07178"> </span><span style="color: #F78C6C">1000</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #82AAFF">asyncOperation</span><span style="color: #A6ACCD">()</span></span>
<span class="line"><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">then</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">result</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">   </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">result</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">   </span><span style="color: #676E95; font-style: italic">// 执行下一个操作</span></span>
<span class="line"><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">catch</span><span style="color: #A6ACCD">(</span><span style="color: #89DDFF">(</span><span style="color: #A6ACCD; font-style: italic">error</span><span style="color: #89DDFF">)</span><span style="color: #A6ACCD"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #A6ACCD"> </span><span style="color: #89DDFF">{</span></span>
<span class="line"><span style="color: #F07178">   </span><span style="color: #A6ACCD">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">error</span><span style="color: #F07178">(</span><span style="color: #A6ACCD">error</span><span style="color: #F07178">)</span><span style="color: #89DDFF">;</span></span>
<span class="line"><span style="color: #89DDFF">   </span><span style="color: #676E95; font-style: italic">// 错误处理逻辑</span></span>
<span class="line"><span style="color: #F07178"> </span><span style="color: #89DDFF">}</span><span style="color: #A6ACCD">)</span><span style="color: #89DDFF">;</span></span></code></pre>
</div></li>
</ul>
<h2 id="缺点" tabindex="-1">缺点 <a class="header-anchor" href="#缺点" aria-label="Permalink to &quot;缺点&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li>无法取消
Promise 一旦创建并开始执行后，就无法取消了</li>
<li>异常处理比较复杂
Promise 的异常处理需要通过 .catch() 方法，或在每个 .then() 方法中处处理错误来实现</li>
</ul>
<h2 id="promise链" tabindex="-1">Promise链 <a class="header-anchor" href="#promise链" aria-label="Permalink to &quot;Promise链&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li>每次调用 .then() 之后返回的都是一个全新的 Promise，此时又可以接着使用 .then() 方法,由此便形成了一条 Promise 链</li>
<li>在 .then() 中 使用了 return，那么 return 的值会被 Promise.resolve() 包装</li>
</ul>
<h2 id="promise-构造函数执行和-then-函数执行有什么区别" tabindex="-1">Promise 构造函数执行和 then 函数执行有什么区别 <a class="header-anchor" href="#promise-构造函数执行和-then-函数执行有什么区别" aria-label="Permalink to &quot;Promise 构造函数执行和 then 函数执行有什么区别&quot;">&ZeroWidthSpace;</a></h2>
<ul>
<li>构造 Promise 时，构造函数内部的代码是立即执行的（同步）</li>
<li>.then() 在  Promise 对象的状态变为 resolved 时执行（异步）</li>
</ul>
<div class="tip custom-block"><p class="custom-block-title">TIP</p>
<p>.then() 中的回调函数会被放入微任务队列中，等待 JavaScript 引擎空闲时执行</p>
</div>
]]></content:encoded>
        </item>
    </channel>
</rss>